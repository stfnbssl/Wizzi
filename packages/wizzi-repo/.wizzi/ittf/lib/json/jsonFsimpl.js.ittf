module wizzi-repo.json.jsonFsimpl
	kind jsfile

	var
		decl FsJson = require('./fs/fsjson')
		decl DocumentManager = require('./fs/documentmanager')
		decl jsonUriParser = require('wizzi-utils').uriParser

	#
        # class JsonFsImpl
        #
		# Implements the `fsimpl` interface for a json backed file system.
        # It is used by repo/jsonDbStore that implements the json repo store.
        # uses a json/DocumentManager instance to manage an in-memory json filesystem (json/fs/FsJson)
		# ctor params
		#  { fsJsonData
		#    [ items
        #      # simple javascript array
		#    [ documents
        #      # simple javascript array

	class JsonFsImpl

		ctor
			param fsJsonData
			set this.classType = 'wizzi-repo.json.JsonFsImpl'
			set this.fsJsonData = fsJsonData
			set this.fsJson = null
			set this.docManager = null
		
		m db
			callback
			if this.docManager == null
				r_cb_wz_err( InvalidOperation, db )
					@ 'Connection not opened. The method `open` must be called before calling `db`.'
			else
				return
					_ callback
						@ null
						@ this.docManager
		
		m open
			options-callback
			var that = this
			if this.docManager
				return
					_ callback
						@ null
						@ this.docManager
			set this.fsJson
				iif options.fsJson
					then options.fsJson
					else
						iif options.fsJsonData
							then
								new FsJson(options.fsJsonData)
							else
								new FsJson(this.fsJsonData)
			set that.docManager = new DocumentManager(this.fsJson)
			# log '***** json connected'
			return
				_ callback
					@ null
					@ that.docManager

		m close
			if this.docManager
				# log '***** json start closing'
				set this.docManager = null
				# log '***** json closed'

		jsonFsimpl/m( stat )
			_ jsonDb.stat
				@ parsedUri.internalPath
				f_cb( result )
					_ callback(null, result)

		jsonFsimpl/m( lstat )
			_ jsonDb.stat
				@ parsedUri.internalPath
				f_cb( result )
					_ callback(null, result)

		jsonFsimpl/m( readFile, options )
			_ jsonDb.readFile
				@ parsedUri.internalPath
				f_cb( result )
					_ callback(null, result)
		
		jsonFsimpl/m( writeFile, content, options )
			_ jsonDb.writeFile
				@ parsedUri.internalPath
				@ content
				f_cb( result )
					_ callback(null, result)

		jsonFsimpl/m( readdir, options )
			_ jsonDb.getDir
				@ parsedUri.internalPath
				@ options
				f_cb( result )
					var dir = []
					foreach item in result
						# log 'wizzi-repo.json.jsonFsimpl.readdir.parsedUri.internalPath, item', parsedUri.internalPath, item
						_ dir.push(item.basename)
					_ callback(null, dir)
		
		jsonFsimpl/m( mkdir, options )
			_ jsonDb.createFolder
				@ parsedUri.internalPath
				f_cb( result )
					_ callback(null, result)

		jsonFsimpl/m( unlink )
			_ jsonDb.deleteFile
				@ parsedUri.internalPath
				f_cb( result )
					_ callback(null, result)

		m createWriteStream
			string documentUri
			checked_call_return( parsedUri )
				_ jsonUriParser
					@ documentUri
					@ this.jsonBaseFolder
			return
				_ this.docManager.createWriteStream
					@ parsedUri.internalPath

		m toJson
			param callback
			_ this.fsJson.toJson
				f_cb_test( json )
					return
						_ callback(null, json)

	set module.exports = JsonFsImpl