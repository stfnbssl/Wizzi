$group

    +
    export
        async-function getTFolderObject
            param owner
                :string
            param name
                :string
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ getTFolder
                            @ owner
                            @ name
                            ._ then
                                =>
                                    param result
                                    if !result.ok
                                        return reject(result)
                                    const tf
                                        :ref ITFolderModel
                                        = result.item
                                    log 'myname', 'getTFolderObject.tf', tf
                                    const tf_packiFiles_object
                                        :ref packiTypes.PackiFiles
                                        _ JSON.parse(tf.packiFiles)
                                    log 'myname', 'getTFolderObject.tf_packiFiles_object', tf_packiFiles_object
                                    const obj
                                        { 
                                            @ ...tf._doc
                                            @ packiFiles tf_packiFiles_object
                                            @ _id tf._id.toString()
                                    log 'myname', 'getTFolderObject', obj
                                    return 
                                        _ resolve
                                            @ obj
                            catch_reject( getTFolder_withCache.getTFolder )

    +
    export
        async-function getTFolder_withCache
            param owner
                :string
            param name
                :string
            var cacheKey = owner + '|' + name
            log 'getTFolder_withCache.cacheKey', cacheKey
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        let tfValue = tfolderCache.get(cacheKey)
                        if tfValue
                            return resolve(tfValue)
                        _ getTFolder
                            @ owner
                            @ name
                            ._ then
                                =>
                                    param result
                                    if !result.ok
                                        return reject(result)
                                    const tf
                                        :ref ITFolderModel
                                        = result.item
                                    const tf_packiFiles_object
                                        :ref packiTypes.PackiFiles
                                        _ JSON.parse(tf.packiFiles)
                                    set tfValue
                                        { 
                                            @ packiFiles tf_packiFiles_object
                                    _ tfolderCache.set(cacheKey, tfValue)
                                    return resolve(tfValue)
                            catch_reject( getTFolder_withCache.getArtifactProduction )

    +
    export
        function invalidateCache
            param owner
                :string
            param name
                :string
            var cacheKey = owner + '|' + name
            _ tfolderCache.del(cacheKey)


