$group

    
    $include main/functions
    $include main/styled
    
    react Main

        ctor
            set this.store = new LocalStorage('cssEditor')
            set this.storeSamples = new LocalStorage('cssEditorSamples')
            set this.state
                {
                    @ currentSampleName ''
                    @ currentSample null
                    @ storedSamplesNames []
                    @ createNewSampleOpen false
                    @ newSampleName ''
                    @ newSampleHtml ''
                    @ ruleData null
                    @ htmlData ''
                    @ cssRule ''
                    @ editHtmlModalOpen false
                    @ htmlEdit ''
                    { values

        did-mount
            let currentSample
            const recentSample = this.store.get('recentSample')
            log 'recentSample', recentSample
            if !recentSample
                _ this.createNewSample
                    @ 'sidebar'
            else
                log 'recentSample', recentSample
                _ this.setSample
                    @ recentSample

            set this.executeValuesChangeDebounced
                _ wz.debounce
                    =>
                        param newRuleData
                        param cssRule
                        if newRuleData
                            const newSampleData
                                {
                                    @ sampleName this.props.currentSampleName
                                    @ ruleData newRuleData
                                    @ htmlData this.state.htmlData
                            _ this.storeSamples.set
                                @ this.props.currentSampleName
                                _ JSON.stringify
                                    @ newSampleData
                        if cssRule
                            var sheetToBeRemoved = document.getElementById('demo_styles')
                            var sheetParent = sheetToBeRemoved.parentNode
                            _ sheetParent.removeChild(sheetToBeRemoved)                           
                            var sheetToBeAdded = document.createElement('style')
                            set sheetToBeAdded.id = 'demo_styles'
                            set sheetToBeAdded.innerHTML = cssRule
                            _ sheetParent.appendChild(sheetToBeAdded);            
                    @ 1000

        did-update
            if this.props.currentSampleName != prevProps.currentSampleName
                log 'Main.did-update', prevProps.currentSampleName, 'changed to ',this.props.currentSampleName
                _ this.setState
                    {
                        @ currentSampleName this.props.currentSampleName
                        @ ruleData this.props.ruleData 
                        @ htmlData this.props.htmlData 

        => handleValuesChange
            param values
            const newRuleData = []
            const cssStyles = []
            const cssStylesIttf = []
            _ this.state.ruleData.map
                =>
                    param rule
                    const newRuleStyles
                        {
                            @ name rule.name
                            { styles
                    _ cssStyles.push('.' + rule.name + ' {')
                    _ cssStylesIttf.push('. ' + rule.name)
                    const styleValues = values[rule.name]
                    _ Object.keys(styleValues).map
                        =>
                            param styleName
                            if styleValues[styleName] && styleValues[styleName].length > 0
                                _ cssStyles.push('\t' + styleName + ':' + styleValues[styleName] + ';')
                                _ cssStylesIttf.push('\t' + styleName + ' ' + styleValues[styleName])
                                set newRuleStyles.styles[styleName] = styleValues[styleName]
                    _ cssStyles.push('}')
                    _ newRuleData.push(newRuleStyles)
            const cssRule = cssStyles.join('\n')
            const cssRuleIttf = cssStylesIttf.join('\n')
            _ this.setState
                =>
                    param state
                    return
                        {
                            @ cssRule cssRule + '\n\n' + cssRuleIttf
                            @ values values
            _ this.executeValuesChangeDebounced
                @ newRuleData
                @ cssRule

        $include main/methods
        $include main/handlers
        
        render

            if !this.state.currentSample
                return
                    h1
                        + ...loading...

            return
                < React.Fragment
                    < StyleSampleRoot
                        < SampleTitleBar
                            < FlexColumn
                                @ width '20%'
                                fieldset
                                    < SelectorLabel
                                        @ size 'h1'
                                        + Sample
                                    < SelectorSelectValue
                                        @ onChange {this.handleChangeSample}
                                        @ value {this.state.currentSampleName}
                                        {
                                            _ this.state.storedSamplesNames.map
                                                =>
                                                    param sampleName
                                                    param ndx 
                                                    option
                                                        @ key {ndx}
                                                        @ value {sampleName}
                                                        + {sampleName}
                            < FlexRow
                                < FlexColumn
                                    < Button
                                        @ size 'h1'
                                        @ onClick {this.handleAddSampleRequest}
                                        + Add sample
                                < FlexColumn
                                    < Button
                                        @ size 'h1'
                                        @ onClick {this.handleEditHtmlRequest}
                                        + Edit html
                                < FlexColumn
                                    < Button
                                        @ size 'h1'
                                        @ onClick {this.handleEditRulesRequest}
                                        + Edit rules
                            < FlexRow
                                < FlexColumn
                                    < Button
                                        @ size 'h1'
                                        @ onClick {this.handleShowDocs}
                                        + Docs
                        < SampleBody
                            < RuleEditor
                                @ cssDefs {this.props.cssDefs}
                                @ ruleData {this.state.ruleData}
                                @ onChange {this.handleValuesChange}
                            < HtmlPreview
                                
                                @ dangerouslySetInnerHTML {{__html: this.state.htmlData}}
                            < CssPreview
                                < CssPreviewTb
                                    < FlexColumn
                                        < Button
                                            @ size 'h6'
                                            @ name 'css-preview'
                                            @ onClick {this.handleSelectCssPreviewMode}
                                            + Css
                                    < FlexColumn
                                        < Button
                                            @ size 'h6'
                                            @ name 'css-ittf'
                                            @ onClick {this.handleSelectCssPreviewMode}
                                            + Ittf
                                    < FlexColumn
                                        < Button
                                            @ size 'h6'
                                            @ name 'css-in-js'
                                            @ onClick {this.handleSelectCssPreviewMode}
                                            + Css-in-Js
                                < CssPreviewBody
                                    pre
                                        code
                                            + {this.state.cssRule}
                        $include main/modals           

