module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import formatDistance from 'date-fns/formatDistance'
    import 
        as React
        from 'react'
    $if wzCtx.Build.useOk
        import 
            @ getLoginHref
            from '../../features/auth'
    import 
        @ c
        from '../ThemeProvider'
    $if true
        import 
            @ SaveStatus
            @ SaveHistory
            from '../../features/packi'
        import 
            @ Viewer
            from '../../features/account'
    $else
        import 
            @ SaveStatus
            @ SaveHistory
            from './mocks'
        import 
            @ Viewer
            from './mocks'
    import EditorTitleName from './EditorTitleName'
    import ModalEditTitleAndDescription from './ModalEditTitleAndDescription'
    export
        :type EditorTitleProps
            :{ 
                :p name
                    :string 
                :p description
                    :union 
                        :string 
                        :undefined 
                :p createdAt
                    :union 
                        :string 
                        :undefined 
                :p saveHistory
                    :ref SaveHistory
                :p saveStatus
                    :ref SaveStatus
                :p viewer
                    :union 
                        :ref Viewer
                        :undefined 
                :p isEditModalVisible
                    :boolean 
                $if wzCtx.Build.useExpo
                    :p onShowPreviousSaves
                        :=> 
                            :void 
                :p onShowEditModal
                    :=> 
                        :void 
                :p onDismissEditModal
                    :=> 
                        :void 
                :p onSubmitMetadata
                    :=> 
                        :void 
                        param details
                            :{ 
                                :p name
                                    :string 
                                :p description
                                    :string 
    export
        function EditorTitle
            param props
                :ref EditorTitleProps
            const [date, setDate] = React.useState(new Date())
            _ React.useEffect
                => 
                    const timer
                        _ setInterval
                            => 
                                _ setDate(new Date())
                            @ 10000
                    return 
                        => 
                            _ clearInterval(timer)
                [ 
            const 
                { 
                    @ description
                    @ name
                    @ createdAt
                    @ saveHistory
                    @ saveStatus
                    @ viewer
                    @ isEditModalVisible
                    $if wzCtx.Build.useExpo
                        @ onShowPreviousSaves
                    @ onShowEditModal
                    @ onSubmitMetadata
                    @ onDismissEditModal
                = props
            const lastSave
                iif saveHistory.length
                    then saveHistory[0]
                    else null
            const savedAt
                iif lastSave
                    then lastSave.savedAt
                    else createdAt
            const hasPermanentHistory
                iif saveHistory
                    then
                        _ saveHistory.some
                            => 
                                param item
                                + !item.isDraft
                    else false
            let statusText
            if viewer
                if saveStatus === 'saving-draft' || saveStatus === 'publishing'
                    set statusText = 'Saving changesâ€¦'
                else
                    if savedAt
                        const dtSavedAt = new Date(savedAt)
                        const timestamp
                            iif date > dtSavedAt
                                then
                                    `lit 
                                        + 
                                        _ formatDistance
                                            @ date
                                            @ dtSavedAt
                                            { 
                                                @ includeSeconds true
                                                @ addSuffix true
                                        + 
                                else ''
                        if saveStatus === 'unsaved' || saveStatus === 'edited'
                            set statusText =
                                `lit 
                                    + Last saved&nbsp;
                                    @ timestamp
                                    + 
                        else
                            set statusText =
                                `lit 
                                    + All changes saved&nbsp;
                                    @ timestamp
                                    + 
                    else
                        set statusText = 'Not saved yet'
                set statusText =
                    < React.Fragment
                        span 
                            @ className {css(styles.statusText)}
                            + {statusText}
                            + .
                        + {' '}
                        $if wzCtx.Build.useExpo
                            { 
                                iif hasPermanentHistory
                                    then
                                        button 
                                            @ onClick {onShowPreviousSaves}
                                            @ className {css(styles.textButton)}
                                            + See previous saves.
                                    else null
            else
                set statusText =
                    < React.Fragment
                        a 
                            $if wzCtx.Build.useOk
                                @ href {getLoginHref()}
                            $else
                                @ href #
                            @ className {css(styles.textButton)}
                            + Log in
                        + {' '}
                        span 
                            @ className {css(styles.statusText)}
                            + to save your changes as you work
                    # User is a guest
            return 
                div 
                    @ className {css(styles.container)}
                    div 
                        @ className {css(styles.header)}
                        < EditorTitleName 
                            @ name {name}
                            @ description {description}
                            @ onSubmitMetadata {onSubmitMetadata}
                            @ onShowEditModal {onShowEditModal}
                        div 
                            @ className {css(styles.metadata)}
                            p 
                                @ className {css(styles.status)}
                                + {statusText}
                            { 
                                iif viewer && saveStatus === 'saving-draft'
                                    then
                                        div 
                                            @ className {css(styles.spinner)}
                                    else null
                            { 
                                iif (viewer && saveStatus === 'saved-draft') || saveStatus === 'published'
                                    then
                                        svg 
                                            @ className {css(styles.check)}
                                            @ width "11px"
                                            @ height "8px"
                                            @ viewBox "0 0 11 8"
                                            polygon 
                                                @ fill {c('success')}
                                                @ points "3.34328358 6.32835821 0.835820896 3.82089552 0 4.65671642 3.34328358 8 10.5074627 0.835820896 9.67164179 0"
                                    else null
                    < ModalEditTitleAndDescription 
                        @ title "Edit Snack Details"
                        @ action "Done"
                        @ visible {isEditModalVisible}
                        @ onDismiss {onDismissEditModal}
                        @ onSubmit
                            => 
                                param details
                                _ onSubmitMetadata(details)
                                _ onDismissEditModal()
                        @ description {description}
                        @ name {name}
    +
    const spin
        { 
            { from
                @ transform 'rotate(0deg)'
            { to
                @ transform 'rotate(360deg)'
    +
    export-default EditorTitle
    +    
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ display 'flex'
                    @ alignItems 'center'
                    @ minWidth 0
                    @ height '100%'
                { header
                    @ minWidth 0
                    @ marginRight 16
                { metadata
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'center'
                { status
                    @ fontSize 14
                    @ margin '-2px 4px 0 6px'
                    @ textOverflow 'ellipsis'
                    @ overflow 'hidden'
                { textButton
                    @ appearance 'none'
                    @ background 'none'
                    @ border 0
                    @ color c('text')
                    @ margin 0
                    @ padding 0
                    @ textDecoration 'underline'
                { statusText
                    @ opacity 0.5
                { spinner
                    @ borderStyle 'solid'
                    @ borderTopColor c('selected')
                    @ borderLeftColor c('selected')
                    @ borderBottomColor c('selected')
                    @ borderRightColor 'rgba(0, 0, 0, .16)'
                    @ borderWidth 1
                    @ height 12
                    @ width 12
                    @ borderRadius '50%'
                    @ margin '0 4px'
                    @ animationDuration '1s'
                    [ animationName
                        @ spin
                    @ animationIterationCount 'infinite'
                    @ animationTimingFunction 'linear'
                { check
                    @ marginBottom -4