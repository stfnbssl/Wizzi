module

    $
        var md = {
            Name: 'PackageProduction',
            descr: 'package production',
            query: [
                { name: 'owner', type: 'string' },
                { name: 'name', type: 'string' },
            ],
            fields: [
                { name: 'owner', type: 'string' },
                { name: 'name', type: 'string' },
                { name: 'description', type: 'string' },
                { name: 'packiFiles', type: 'string' },
            ],
            created_at: true,
            updated_at: true
        }
    
    import NodeCache from 'node-cache'        
    import
        @ GetPackageProductionModel
        from '../mongo/package'
    import
        @ IPackageProductionModel
        from '../types'
    import
        @ ValidateResult
        @ CRUDResult
        from '../../types'
    +
    const myname = 'features.production.api.package'
    +
    const packageCache
        new NodeCache
            { 
                @ stdTTL 120
                @ checkperiod 60
    +
    export
        async-function validatePackageProduction
            param owner
                :string
            param name
                :string
            const PackageProduction = GetPackageProductionModel()
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        let query = { owner: owner, name: name }
                        _ PackageProduction.find
                            @ query
                            =>
                                param err
                                param result
                                log myname, 'validatePackageProduction', 'PackageProduction.find', 'error', err
                                if err
                                    return reject(err)
                                if result.length == 1
                                    return 
                                        _ resolve
                                            {
                                                @ isValid false
                                                @ message 'package production already exists'
                                _ resolve
                                    {
                                        @ isValid true
    
    mongo/get_list_api(&md)
    mongo/get_api(&md)
    mongo/create_api(&md)
    mongo/update_api(&md)
    $include package/cached_get_save