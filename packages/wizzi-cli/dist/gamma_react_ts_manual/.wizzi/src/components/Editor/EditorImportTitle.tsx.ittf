module
    import 
        as React
        from 'react'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import querystring from 'query-string'
    import 
        @ prefTypes
        @ withThemeName
        from '../../features/preferences'
    :type Props
        :{ 
            :p name
                :union 
                    :string 
                    :undefined 
            :p description
                :union 
                    :string 
                    :undefined 
            :p theme
                :ref prefTypes.ThemeName
    :type State
        :{ 
            :p status
                :union 
                    :literal 'idle'
                    :literal 'importing'
                    :literal 'error'
            :p description
                :union 
                    :string 
                    :undefined 
    const TIMEOUT_MS = 45000
    export 
        class EditorImportTitle
            super React.PureComponent
                :param 
                    :ref Props
                :param 
                    :ref State
            p state
                :ref State
                { 
                    @ status 'idle'
                    @ description this.props.description
            p _handleClick
                async=> 
                    if this.state.status === 'idle'
                        _ this._handleReimport
                    else
                        if this.state.status === 'error'
                            _ this._handleDismissError
            => _handleDismissError
                _ this.setState
                    { 
                        @ status 'idle'
                        @ description this.props.description
            p _handleReimport
                async=> 
                    _ this.setState
                        { 
                            @ status 'importing'
                            @ description 'Importing latest commit...'
                    # TODO: this parsing isn't necessarily sufficient, ideally someone with
                    # more regex experience than me would look over this for holes. My worry
                    # is that additional fields will require more complex regexes
                    try 
                        # If the import hangs we want to make sure to throw an error
                        const hangTimer
                            _ setTimeout
                                => 
                                    if this.state.status === 'importing'
                                        _ this.setState
                                            { 
                                                @ status 'error'
                                @ TIMEOUT_MS
                        if !process.env.IMPORT_SERVER_URL
                            throw new Error('Missing IMPORT_SERVER_URL')
                        const IMPORT_API_URL
                            `lit 
                                + 
                                @ process.env.IMPORT_SERVER_URL
                                + /git
                        # Takes an expo url of the form:
                        # https://snack.expo.io/@git/[host]/[owner]/[repo]:[path]@[branch]
                        # Turns it into: [host]/[owner]/[repo]:[path]@[branch]
                        const data = window.location.href.split('/@git/')[1]
                        const match = data.match(/([\w,\-,\_,\.]+)\/([\w,\-,\_]+)\/([\w,\-,\_]+)/)
                        # Then matches it into: [host]/[owner]/[repo] and prepends https
                        const repo
                            `lit 
                                + https://
                                iif match
                                    then match[0]
                                    else ''
                                + 
                        # Generates git import parameters from data
                        const params
                            :{ 
                                :p repo
                                    :string 
                                :p subpath
                                    :optional 
                                    :string 
                                :p branch
                                    :optional 
                                    :string 
                            { 
                                @ repo
                        # Takes data of the form: [host]/[owner]/[repo]:[path]@[branch]
                        # and extracts the path
                        const subpath = data.match(/:([\w,\-,\_.\/]+)/)
                        if subpath
                            set params.subpath = subpath[0].slice(1)
                        # Takes data of the form: [host]/[owner]/[repo]:[path]@[branch]
                        # and extracts the branch
                        const branch = data.match(/@([\w,\-,\_.\/]+)/)
                        if branch
                            set params.branch = branch[0].slice(1)
                        const res
                            await 
                                _ fetch
                                    `lit 
                                        + 
                                        @ IMPORT_API_URL
                                        + ?
                                        _ querystring.stringify(params)
                                        + 
                        _ clearTimeout(hangTimer)
                        if res.ok
                            _ window.location.reload
                            _ this.setState
                                { 
                                    @ status 'idle'
                                    @ description this.props.description
                        else
                            throw 
                                await 
                                    _ res.text
                    catch error
                        _ this.setState
                            { 
                                @ status 'error'
                                @ description 'There was an error updating your project'
            m render
                const 
                    { 
                        @ status
                        @ description
                    = this.state
                return 
                    div 
                        @ className {css(styles.container)}
                        div 
                            @ className {css(styles.header)}
                            div 
                                @ className {css(styles.titleContainer)}
                                h1 
                                    @ className {css(styles.title)}
                                    + {this.props.name}
                            p 
                                @ className {css(styles.description)}
                                @ style
                                    { 
                                        @ opacity
                                            iif status !== 'error'
                                                then 0.5
                                                else 1
                                svg 
                                    @ className
                                        iif status !== 'importing'
                                            then css(styles.reimportBtn)
                                            else css(styles.spinningBtn)
                                    @ xmlns "http://www.w3.org/2000/svg"
                                    @ width "18"
                                    @ height "18"
                                    @ viewBox "0 0 18 18"
                                    @ onClick {this._handleClick}
                                    @ style
                                        { 
                                            @ fill
                                                iif status === 'error'
                                                    then 'red'
                                                    else undefined
                                    path 
                                        @ d
                                            iif status !== 'error'
                                                then 'M9 13.5c-2.49 0-4.5-2.01-4.5-4.5S6.51 4.5 9 4.5c1.24 0 2.36.52 3.17 1.33L10 8h5V3l-1.76 1.76C12.15 3.68 10.66 3 9 3 5.69 3 3.01 5.69 3.01 9S5.69 15 9 15c2.97 0 5.43-2.16 5.9-5h-1.52c-.46 2-2.24 3.5-4.38 3.5z'
                                                    # Circular Arrow
                                                else 'M9 1C4.58 1 1 4.58 1 9s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm4 10.87L11.87 13 9 10.13 6.13 13 5 11.87 7.87 9 5 6.13 6.13 5 9 7.87 11.87 5 13 6.13 10.13 9 13 11.87z'
                                                    # Cancel cross TODO make this red
                                span 
                                    @ className
                                        iif status === 'error'
                                            then css(styles.error)
                                            else ''
                                    + {description}
    export-default withThemeName(EditorImportTitle)
    const rotation
        { 
            { '0%'
                @ transform
                    `lit 
                        + rotate(0deg)
            { '100%'
                @ transform
                    `lit 
                        + rotate(360deg)
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'center'
                    @ minWidth 0
                    @ margin '0 1em'
                    @ padding '.25em 0'
                { header
                    @ display 'block'
                    @ appearance 'none'
                    @ backgroundColor 'transparent'
                    @ outline 0
                    @ padding 0
                    @ margin 0
                    @ border 0
                    @ minWidth 0
                    @ textAlign 'left'
                    @ whiteSpace 'nowrap'
                    { '@media (max-width: 480px)'
                        @ whiteSpace 'normal'
                { title
                    @ fontSize '1.3em'
                    @ fontWeight 500
                    @ margin 0
                    @ textOverflow 'ellipsis'
                    @ overflow 'hidden'
                { titleContainer
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'flex-end'
                { description
                    @ display 'flex'
                    @ alignItems 'center'
                    @ margin '0 0 -.25em'
                    @ textOverflow 'ellipsis'
                    @ overflow 'hidden'
                    { '@media (max-width: 480px)'
                        @ margin '.5em 0 0'
                { error
                    @ color 'red'
                { reimportBtn
                    @ cursor 'pointer'
                { spinningBtn
                    @ animationDuration '1s'
                    [ animationName
                        @ rotation
                    @ animationIterationCount 'infinite'
                    @ animationTimingFunction 'linear'
