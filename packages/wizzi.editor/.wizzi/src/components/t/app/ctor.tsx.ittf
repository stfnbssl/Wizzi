$group
    $params level|1
    ctor 
        param props
            :ref Props
        _ super(props)
        let name = DEFAULT_PACKI_NAME
        let description = DEFAULT_PACKI_DESCRIPTION
        let sdkVersion
            :ref SDKVersion
            = DEFAULT_SDK_VERSION
        let files = props.files
        let dependencies
            iif props.files === DEFAULT_PACKI_CODE && !props.packi?.packiFiles
                then DEFAULT_DEPENDENCIES
                else
                    { 
        let id = undefined
        if props.packi
            set id = props.packi._id ?? id
            set files = props.packi.packiFiles ?? code
            set dependencies = props.packi.dependencies ?? dependencies
            if props.packi.manifest
                const 
                    { 
                        @ manifest
                    = props.packi
                set name = manifest.name
                set description = manifest.description
                set sdkVersion = manifest.sdkVersion ?? sdkVersion
            else
                set name = props.packi.name
        const initialSdkVersion = sdkVersion
        let wasUpgraded = false
        if !versions.hasOwnProperty(sdkVersion)
            set sdkVersion = DEFAULT_SDK_VERSION
            set wasUpgraded = true
        const verbose = props.preferences.verbose
        const sendCodeOnChangeEnabled = true
        $if wzCtx.Build.usePackiAspects
            const sessionSecret = null
        $else
            const sessionSecret = props.getSessionSecret()
        const packierURL = nullthrows(process.env.IMPORT_SERVER_URL)
        const isLocalWebPreview = false
        set this._PackiSession =
            new PackiSession
                { 
                    @ disabled true
                    @ name
                    @ description
                    @ files
                    @ dependencies
                    @ sdkVersion
                    @ verbose
                    @ codeChangesDelay
                        iif sendCodeOnChangeEnabled
                            then 1000
                            else -1
                    @ id
                    @ user
                        iif sessionSecret
                            then
                                { 
                                    @ sessionSecret
                            else undefined
                    @ apiURL nullthrows(process.env.API_SERVER_URL)
                    @ packierURL
                    @ host
                        iif process.env.NODE_ENV === 'development'
                            then 'staging.packi.expo.io'
                            else new URL(nullthrows(process.env.SERVER_URL)).host
                            # Use staging server in development, otherwise Wizzi Go and appetize
                            # can't access the runtime. Replace with ngrok url to test locally.
                    @ webPreviewRef
                        iif typeof window !== 'undefined'
                            then this._previewRef
                            else undefined
                    @ webPlayerURL
                        iif typeof window !== 'undefined' && isLocalWebPreview
                            then
                                `lit 
                                    + 
                                    @ window.location.origin
                                    + /web-player/%%SDK_VERSION%%
                            else nullthrows(process.env.PACKI_WEBPLAYER_URL) + '/v2/%%SDK_VERSION%%'
                        # Serve local web-player through `/web-player` end-point to prevent CORS issues
        const devicePreviewShown = props.preferences.devicePreviewShown
        # TODO preserve selected from history
        const selectedFile
            iif Object.keys(files).length
                then Object.keys(files)[0]
                else ''
        
        set this.state =
            { 
                @ session this._PackiSession.getState()
                @ selectedFile
                @ sendCodeOnChangeEnabled
                @ autosaveEnabled true
                @ isSavedOnce false
                @ saveHistory props.packi?.history ?? []
                @ saveStatus
                    iif props.packi?.isDraft
                        then 'saved-draft'
                        else
                            iif id
                                then 'published'
                                else 'unsaved'
                @ isLocalWebPreview
                @ wasUpgraded
                @ initialSdkVersion
                @ isDownloading false
                @ devicePreviewShown
                @ verbose
                @ annotations []
                @ packierURL
                @ webPreviewURL ''
                @ packiStoreId undefined
                @ packiSessionReady false
                @ fileEntries []
                @ generatedArtifact undefined
                @ jobGeneratedArtifacts undefined
                @ jobError undefined
                @ isWizziJobWaiting false
                @ lastJobfileEntries []