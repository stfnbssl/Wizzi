$group
    $params &md
    import
        @ Router
        @ Request
        @ Response
        from 'express'
    import
        as bodyParser
        from 'body-parser'
    import
        @ ControllerType
        @ AppInitializerType
        from '../../app/types'
    import
        @ fsTypes
        from '../../filesystem'
    import
        @ wizziTypes
        @ wizziProds
        @ WizziFactory
        from '../../wizzi'
    import
        @ PackiFiles
        @ TemplateList
        @ Template
        from '../types'
    import
        @ sendPromiseResult
        @ sendSuccess
        @ sendFailure
        from '../../../utils/response'
    import
        @ file
        from 'wizzi'
    var jsonParser = bodyParser.json()
    export
        class ProductionsController
            :implements ControllerType
            p path
                :public
                = '/api/v1/productions'
            p router
                :public
                _ Router()
            p fsDb
                :public
                :union
                    :ref fsTypes.FsDb
                    :undefined
            => initialize
                param initValues
                    :ref AppInitializerType
                set this.fsDb = initValues.fsDb
                _ this.router.post
                    `lit
                        +
                        @ this.path
                        + /artifact/:id
                    @expr this.generateArtifact
                _ this.router.post
                    `lit
                        +
                        @ this.path
                        + /job
                    @expr this.executeJob
            p generateArtifact
                :private
                async=>
                    param request
                        :ref Request
                    param response
                        :ref Response
                    const id = request.params.id
                    const files
                        :ref PackiFiles
                        = request.body
                    _ console.log('generateArtifact.received files', Object.keys(files))
                    _ wizziProds.generateArtifact(id, files).then
                        =>
                            param value
                            _ console.log('ga', value)
                            _ sendSuccess
                                @ response
                                {
                                    @ generatedArtifact value
                        ._ catch
                            =>
                                param err
                                _ console.log('features.packi.controllers.production.generateArtifact.err', err)
                                _ sendFailure(response, err, 501)
            p executeJob
                :private
                async=>
                    param request
                        :ref Request
                    param response
                        :ref Response
                    const files
                        :ref PackiFiles
                        = request.body
                    _ console.log('ProductionsController.executeJob.received files', Object.keys(files))
                    _ wizziProds.executeJobs(files).then
                        async=>
                            param fsJson
                            const files
                                await
                                    _ WizziFactory.extractGeneratedFiles(fsJson)
                            _ console.log('features.packi.controllers.production.executeJob.generatedArtifacts', Object.keys(files))
                            _ sendSuccess
                                @ response
                                {
                                    @ generatedArtifacts files
                        ._ catch
                            =>
                                param err
                                _ console.log('features.packi.controllers.production.executeJob.err', err)
                                _ sendFailure(response, err, 501)
