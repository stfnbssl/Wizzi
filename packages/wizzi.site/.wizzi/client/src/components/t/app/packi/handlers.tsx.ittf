$group
    
    p _handleLoggedOn
        async=> 
            param user
                :ref LoggedUser
            _ this.props.dispatchLoggedOn(user)
            _ this.props.setPreferences
                { 
                    @ loggedUid user.uid
    p _handleLoggedOff
        async=> 
            _ this.props.dispatchLoggedOff()
            _ this.props.setPreferences
                { 
                    @ loggedUid undefined
    p _handleSelectPacki
        async=> 
            param packiId
                :string 
            _ this.props.dispatchSelectPacki(packiId)
    p _handleCreatePacki
        async=> 
            param packiId
                :string 
            param packiKind
                :string 
            _ this.props.dispatchCreatePacki(packiId, packiKind)
    p _handleDeletePacki
        async=> 
            param packiId
                :string 
            _ this.props.dispatchDeletePacki(packiId)
    p _findFocusedEntry
        => 
            param entries
                :[ 
                    :ref FileSystemEntry
            :return
                :union 
                    :ref TextFileEntry
                    :ref AssetFileEntry
                    :undefined 
            _ entries.find
                => 
                    { 
                        @ item
                        @ state
                    @expr item.type === 'file' && state.isFocused === true
                # @ts-ignore
    p _handleChangeCode
        => 
            param content
                :string 
            $* VIA olf version 
            let focusedEntry
                :ref FileSystemEntry
            log '_handleChangeCode', 'content', content
            _ this.setState
                => 
                    param state
                        :ref State
                    return 
                        { 
                            @ saveStatus 'changed'
                            @ fileEntries
                                _ state.fileEntries.map
                                    => 
                                        param entry
                                        if entry.item.type === 'file' && entry.state.isFocused
                                            set focusedEntry = entry
                                            return 
                                                _ updateEntry
                                                    @ entry
                                                    { 
                                                        { item
                                                            @ content
                                        return entry
                => 
                    _ this._generateArtifact()
            *$
    p _handleFileEntriesChange
        => 
            param nextFileEntries
                :[ 
                    :ref FileSystemEntry
            :return
                :ref Promise
                    :param void
            return 
                new Promise
                    => 
                        param resolve
                        _ this.setState
                            => 
                                param state
                                let fileEntries = nextFileEntries
                                return 
                                    { 
                                        @ fileEntries
                            @ resolve
    p _handleEntrySelected
        => 
            param entry
                :ref FileSystemEntry
            log 'App._handleEntrySelected', this.props.preferences.autoGenSingleDoc, entry.item.path
            if this.props.preferences.autoGenSingleDoc
                if entry.item.path.endsWith('.ittf') && entry.item.path.indexOf('/t/') < 0
                    _ this.props.dispatchGenerateArtifact
                        @expr entry.item.path
                        _ entryArrayToPacki
                            _ this.state.fileEntries.filter
                                => 
                                    param e
                                    _ e.item.path.endsWith('.ittf')


