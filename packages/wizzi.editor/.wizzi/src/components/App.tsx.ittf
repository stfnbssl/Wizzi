module
    import 
        as React
        from 'react'
    # Redux
    import 
        @ connect
        $if wzCtx.Build.usePackiAspects
            @ ConnectedProps
        from 'react-redux'
    # Styles
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    # Features
    import 
        @ getFilesFromQuery 
        @ fileConversions
        from '../features/file'
    import
        @ withAuth
        @ AuthProps
        from '../features/auth'
    import
        @ withPreferences
        @ PreferencesContextType
        from '../features/preferences'
    import
        @ Annotation
        from '../features/annotations'
    import 
        @ SavedPacki
        @ QueryParams
        @ SaveStatus
        @ SaveHistory
        @ SaveOptions
        @ SDKVersion
        @ PackiState
        @ PackiFile
        @ PackiFiles
        @ PackiDependencies
        @ PackiDependency
        @ PackiDefaults
        from '../features/packi'
    import 
        @ PackiSession
        $if wzCtx.Build.useExpo
            @ PackiLogEvent
        @ PackiListenerSubscription
        $if wzCtx.Build.useExpo
            @ isModulePreloaded
        $if wzCtx.Build.useExpo
            from 'packi-sdk'
        $else
            from '../features/packi'
    # Utils
    import nullthrows from 'nullthrows'    
    import debounce from 'lodash/debounce'    
    import 
        @ isMobile
        from '../utils/detectPlatform'
    # Widgets
    import 
        @ AnimatedLogo 
        from './widgets/AnimatedLogo'
    import 
        @ CollapsibleObject 
        from './widgets/CollapsibleObject'
    # Components
    import AppShell from './shell/AppShell'
    import AppDetails from './AppDetails'    
    import 
        @ EditorViewProps
        from './EditorView/EditorViewProps'
    import LazyLoad from './widgets/LazyLoad'
    $if wzCtx.Build.usePackiAspects
        $include app/packi/imports

    # Defaults
    import 
        @ config
        from '../features/config'
    const 
        {
            @ DEFAULT_PACKI_NAME
            @ DEFAULT_PACKI_DESCRIPTION
            @ DEFAULT_PACKI_CODE
            @ DEFAULT_DEPENDENCIES
            @ versions
            @ DEFAULT_SDK_VERSION
        = config
    $*
    import 
        @ DEFAULT_PACKI_DESCRIPTION
        @ DEFAULT_PACKI_CODE
        $if wzCtx.Build.useExpo
            @ DEFAULT_DEPENDENCIES
        from '../configs/defaults'
    *$
    
    $if wzCtx.Build.usePackiAspects
        +
        $include app/packi/state_dispacth_props

    :type Params
        :{ 
            :p id
                :optional 
                :string 
            :p username
                :optional 
                :string 
            :p projectName
                :optional 
                :string 
            :p repoName
                :optional 
                :string 
    
    :type AppProps
        :intersect 
            :ref AuthProps
            :ref PreferencesContextType
            $if wzCtx.Build.usePackiAspects
                :ref PropsFromRedux
            :{ 
                :p Packi
                    :optional 
                    :ref SavedPacki
                :p history
                    :{ 
                        :p push
                            :=> 
                                :void 
                                param props
                                    :{ 
                                        :p pathname
                                            :string 
                                        :p search
                                            :string 
                :p match
                    :{ 
                        :p params
                            :ref Params
                :p location
                    :{ 
                        :p search
                            :string 
                :p query
                    :ref QueryParams
                :p userAgent
                    :string 
                :p files
                    :ref PackiFiles
                :p defaults
                    :ref PackiDefaults
    
    :type State
        :intersect 
            :ref PackiStateProps
            :{ 
                :p session
                    :ref PackiState
                :p selectedFile
                    :string 
                :p sendCodeOnChangeEnabled
                    :boolean 
                :p autosaveEnabled
                    :boolean 
                :p isSavedOnce
                    :boolean 
                :p saveHistory
                    :ref SaveHistory
                :p saveStatus
                    :ref SaveStatus
                :p isPreview
                    :boolean 
                $if wzCtx.Build.useExpo
                    :p wasUpgraded
                        :boolean 
                    :p initialSdkVersion
                        :ref SDKVersion
                :p isDownloading
                    :boolean 
                :p devicePreviewShown
                    :boolean 
                :p webPreviewURL
                    :string 
                :p isLocalWebPreview
                    :boolean 
                :p verbose
                    :boolean 
                :p annotations
                    :[ 
                        :ref Annotation
                :p packierURL
                    :string 
                $if wzCtx.Build.usePackiAspects
                    $include app/packi/state_def

    class AppMain
        super React.Component
            :param 
                :ref AppProps
            :param 
                :ref State
        p _previewRef
            _ React.createRef
                :param 
                    :ref Window
        p edited
            :private 
            :boolean 
            = false
        
        app/ctor()
        app/properties()
        $if wzCtx.Build.usePackiAspects
            app/packi/methods()
        app/methods()
        app/handlers()
        $if wzCtx.Build.usePackiAspects
            app/packi/handlers()

        m render

            if this.props && this.state
                $if false
                    return
                        div
                            < CollapsibleObject
                                @ label "props"
                                @ object {this.props}
                            < CollapsibleObject
                                @ label "state"
                                @ object {this.state}
                const experienceURL = this.state.session.url
                if this.state.isPreview
                    return 
                        < AppDetails 
                            @ name {this.state.session.name}
                            @ description {this.state.session.description}
                            @ experienceURL {experienceURL}
                            @ onOpenEditor {this._handleOpenEditor}
                            @ userAgent {this.props.userAgent}
                $if wzCtx.Build.useExpo
                    let isResolving = false
                    for const name in this.state.session.dependencies
                        const dep = this.state.session.dependencies[name]
                        if !dep.handle && !dep.error && !isResolving && !this.state.session.disabled && !isModulePreloaded(name, this.state.session.sdkVersion)
                            set isResolving = true
                return 
                    < LazyLoad 
                        :ref React.ComponentType
                            :param 
                                :ref EditorViewProps
                        @ load
                            => 
                                ( 
                                    _ import
                                        @ './EditorView/EditorView'
                        { 
                            => 
                                { 
                                    @ loaded
                                    @ data Comp
                                iif loaded && Comp
                                    then
                                        < Comp 
                                            @ annotations {this.state.annotations}
                                            @ autosaveEnabled {this.state.autosaveEnabled}
                                            @ createdAt
                                                iif this.props.Packi
                                                    then this.props.Packi.created
                                                    else undefined
                                            @ dependencies {this.state.session.dependencies}
                                            @ missingDependencies {this.state.session.missingDependencies}
                                            @ description {this.state.session.description}
                                            @ experienceURL {experienceURL}
                                            @ files {this.state.session.files}
                                            @ isDownloading {this.state.isDownloading}
                                            $if wzCtx.Build.useExpo
                                                @ isLocalWebPreview {this.state.isLocalWebPreview}
                                                @ isResolving {isResolving}
                                            @ name {this.state.session.name}
                                            @ id {this.state.session.id}
                                            $if wzCtx.Build.useExpo
                                                @ onChangeSDKVersion {this._handleChangeSDKVersion}
                                            @ onDownloadAsync {this._handleDownloadAsync}
                                            @ onPublishAsync {this._saveAsync}
                                            $if wzCtx.Build.useExpo
                                                @ onReloadPacki {this._reloadPacki}
                                            @ onSendCode {this._handleSendCode}
                                            @ onSubmitMetadata {this._handleSubmitMetadata}
                                            @ onToggleSendCode {this._handleToggleSendCode}
                                            @ onTogglePreview {this._handleTogglePreview}
                                            @ onSelectFile {this._handleSelectFile}
                                            @ previewRef {this._previewRef}
                                            @ previewShown {this.state.devicePreviewShown}
                                            @ previewURL {this.state.webPreviewURL}
                                            @ saveHistory {this.state.saveHistory}
                                            @ saveStatus {this.state.saveStatus}
                                            @ sdkVersion {this.state.session.sdkVersion}
                                            @ selectedFile {this.state.selectedFile}
                                            @ sendCodeOnChangeEnabled {this.state.sendCodeOnChangeEnabled}
                                            @ packierURL {this.state.packierURL}
                                            @ updateDependencies {this._updateDependencies}
                                            @ updateFiles {this._updateFiles}
                                            @ uploadFileAsync {this._uploadAssetAsync}
                                            @ userAgent {this.props.userAgent}
                                            @ verbose {this.state.verbose}
                                            $if wzCtx.Build.useExpo
                                                @ wasUpgraded {this.state.wasUpgraded}
                                            $if wzCtx.Build.usePackiAspects
                                                @ currentPacki {this.props.currentPacki}
                                                @ generatedArtifact {this.props.generatedArtifact}
                                                @ fileEntries {this.state.fileEntries}
                                                @ entry {this._findFocusedEntry(this.state.fileEntries)}
                                                @ isWizziJobWaiting {this.state.isWizziJobWaiting}
                                                @ jobError {this.state.jobError}
                                                $$ VIA @ onLoggedOn {this._handleLoggedOn}
                                                $$ VIA @ onLoggedOff {this._handleLoggedOff}
                                                @ onChangeCode {this._handleChangeCode}
                                                @ onFileEntriesChange {this._handleFileEntriesChange}
                                                @ onEntrySelected {this._handleEntrySelected}
                                                @ onSelectPacki {this._handleSelectPacki}
                                                @ onCreatePacki {this._handleCreatePacki}
                                                @ onDeletePacki {this._handleDeletePacki}
                                                @ onExecuteWizziJob {this._executeJobNotDebounced}
                                                @ onSaveCode {this._saveCode}
                                    else
                                        < AppShell 
                                            @ title {this.state.session.name}
                                            @ previewShown {this.state.devicePreviewShown}
            else
                return
                    div
                        + Not ready

    $if wzCtx.Build.usePackiAspects
        const connector = connect(packiMapStateToProps, packiMapDispatchToProps)
        :type PropsFromRedux
            :ref ConnectedProps
                :param 
                    :typeof connector
        const AppMainContainer
            _ withPreferences
                _ withAuth
                    _ connector(AppMain)
    $else
        const AppMainContainer
            _ withPreferences
                _ connect
                    => 
                        param state
                            :any 
                        (
                            { 
                                @ viewer state.viewer
                    (
                        _ withAuth(AppMain)
    
    export-default AppMainContainer
    $$ $include app/asyncApp

    const styles
        _ StyleSheet.create
            { 
                { container
                    @ flexDirection 'column'
                    @ display 'flex'
                    @ height '100%'
                    @ width '100%'
                    @ alignItems 'center'
                    @ justifyContent 'center'
                { logo
                    @ transform 'scale(0.5)'
                    @ opacity 0.9
                { loadingText
                    @ marginTop 0
                    @ opacity 0.7
                    @ fontSize 18
