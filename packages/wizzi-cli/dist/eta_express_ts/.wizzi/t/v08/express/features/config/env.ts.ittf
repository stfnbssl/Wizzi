$group
    $params &md
    $if wzCtx.Build.useConfig
        import path from 'path'
        $if wzCtx.type == 'module'
            import { dirname } from 'path'
            import { fileURLToPath } from 'url'
            const __dirname = dirname(fileURLToPath(import.meta.url))
        $if wzCtx.Build.config.useEnvalid
            import dotenv from 'dotenv'
            import
                @ cleanEnv
                @ str
                @ bool
                @ port
                from 'envalid'
        import
            @ ConfigType
            from './types'
        function validateEnv
            _ dotenv.config
            let checkedEnv
                $if wzCtx.Build.config.useEnvalid
                    _ cleanEnv
                        @expr process.env
                        {
                            @ PORT port()
                            @ SESSION_SECRET str()
                            @ NO_CACHE bool()
                            $if wzCtx.Build.useMongoDb
                                @ MONGO_PASSWORD str()
                                @ MONGO_PATH str()
                                @ MONGO_USER str()
                            $if wzCtx.Build.useAuthentication
                                @ AUTH0_DOMAIN str()
                                @ AUTH0_PACKI_CLIENT_ID str()
                                @ AUTH0_PACKI_CLIENT_SECRET str()
                                @ AUTH0_PACKI_CALLBACK_URL str()
                                @ AUTH0_PACKI_API_ID str()
                                @ AUTH0_PACKI_BACKEND_APP_ID str()
                                @ AUTH0_PACKI_BACKEND_APP_SECRET str()
                                $if wzCtx.Build.authentication.useGithub
                                    @ GITHUB_CLIENT_ID str()
                                    @ GITHUB_CLIENT_SECRET str()
                                    @ GITHUB_CALLBACK_URL str()
                            $if wzCtx.Build.useWizzi
                                @ IS_WIZZI_DEV bool()
                            $if wzCtx.Build.usePacki
                                @ PACKI_TEMPLATES_FOLDER str()
                                @ PACKI_API_ENDPOINT str()
                $else
                    {
                        @ PORT ${wzCtx.App.port}
                        @ SESSION_SECRET "axr45hngmuoil9********0ofgt*kjj6767648%$Â£3f5&/4bnsa-----qq4)$35670qq4q"
                        @ NO_CACHE ${wzCtx.Build.noCache}
                        $if wzCtx.Build.useMongoDb
                            @ MONGO_USER "${wzCtx.Build.mongodb.user}"
                            @ MONGO_PASSWORD "${wzCtx.Build.mongodb.paddword}"
                            @ MONGO_PATH "${wzCtx.Build.mongodb.dbPath}/${wzCtx.Build.mongodb.dbName}"
                        $if wzCtx.Build.useAuthentication
                            @ AUTH0_ISSUER_BASE_URL "https://${wzCtx.Build.authentication.tenant}.auth0.com"
                            @ AUTH0_CLIENT_ID "${wzCtx.Build.authentication.clientID}"
                            @ AUTH0_BASE_URL "${wzCtx.Build.authentication.baseURL}"
                            @ AUTH0_SECRET "${wzCtx.Build.authentication.longRandomString}"
                            $if wzCtx.Build.authentication.useGithub
                                @ GITHUB_CLIENT_ID "${wzCtx.Build.authentication.github.clientID}"
                                @ GITHUB_CLIENT_SECRET "${wzCtx.Build.authentication.github.clientSecret}"
                                @ GITHUB_CALLBACK_URL "${wzCtx.Build.authentication.github.callbackURL}"
                        $if wzCtx.Build.useCors
                            @ CORS_CLIENT_ORIGIN "http://localhost:8080"
            $if wzCtx.Build.usePacki
                set process.env.PACKI_API_ENDPOINT = checkedEnv.PACKI_API_ENDPOINT
                log 'config/env.ts, PACKI_API_ENDPOINT after', process.env.PACKI_API_ENDPOINT
            return checkedEnv
        $if wzCtx.Build.usePacki
            export
                const packiFilePrefix = 'json:/'
        let config
            :ref ConfigType
        export-default
            function create
                :return
                    :ref ConfigType
                $if wzCtx.Build.useWizzi
                    const __ittfPath = path.join(__dirname, '..', '..', '..', 'ittf')
                if config == null
                    const checkedEnv = validateEnv()
                    set config =
                        {
                            @ port checkedEnv.PORT
                            @ sessionSecret checkedEnv.SESSION_SECRET
                            @ noCache checkedEnv.NO_CACHE
                            $if wzCtx.Build.useMongoDb
                                @ mongoPath checkedEnv.MONGO_PATH
                                @ mongoUser checkedEnv.MONGO_USER
                                @ mongoPassword checkedEnv.MONGO_PASSWORD
                            $if wzCtx.Build.useAuthentication
                                @ Auth0Domain checkedEnv.AUTH0_DOMAIN
                                @ Auth0PackiClientId checkedEnv.AUTH0_PACKI_CLIENT_ID
                                @ Auth0PackiClientSecret checkedEnv.AUTH0_PACKI_CLIENT_SECRET
                                @ Auth0PackiCallbackUrl checkedEnv.AUTH0_PACKI_CALLBACK_URL
                                @ Auth0PackiApiId checkedEnv.AUTH0_PACKI_API_ID
                                @ Auth0PackiBackendAppId checkedEnv.AUTH0_PACKI_BACKEND_APP_ID
                                @ Auth0PackiBackendAppSecret checkedEnv.AUTH0_PACKI_BACKEND_APP_SECRET
                                $if wzCtx.Build.authentication.useGithub
                                    @ GithubClientID checkedEnv.GITHUB_CLIENT_ID
                                    @ GithubClientSecret checkedEnv.GITHUB_CLIENT_SECRET
                                    @ GithubCallbackURL checkedEnv.GITHUB_CALLBACK_URL
                            $if wzCtx.Build.useWizzi
                                @ IsWizziDev checkedEnv.IS_WIZZI_DEV
                                @ MetaHtmlIttfPath path.join(__ittfPath, 'meta', 'html', 'index.html.ittf')
                                @ MetaFolderIttfPath path.join(__ittfPath, 'meta', 'folder', 'index.html.ittf')
                                @ MetaHtmlTextPath path.join(__ittfPath, 'meta', 'text', 'index.html.ittf')
                            $if wzCtx.Build.usePacki
                                @ packiTemplatesFolder checkedEnv.PACKI_TEMPLATES_FOLDER
                                @ PackiApiEndpoint checkedEnv.PACKI_API_ENDPOINT
                    _ Object.keys(config).forEach
                        =>
                            param element
                            if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                                _ console.log
                                    @ 'Created config'
                                    @ element
                                    @expr
                                        (
                                            + config
                                                :as
                                                    :any
                                        .[ element
                return config
