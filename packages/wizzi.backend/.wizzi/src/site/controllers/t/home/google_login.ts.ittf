$group

    handler( loginGoogle )
        log myname, 'loginGoogle'
        const queryParams
            _ queryString.stringify
                {
                    @ client_id config.googleClientId
                    @ scope 'openid email profile'
                    @ redirect_uri '${wzCtx.App.baseUrl}/api/v${wzCtx.App.apiVersion}/authenticate/google/callback'
                    @ nonce 'gartps'
                    @ response_type 'code'
        _ response.redirect(`https://accounts.google.com/o/oauth2/v2/auth?${queryParams}`)

    handler( googleCallback )
        log myname, 'googleCallback'
        const body
            {
                @ client_id config.googleClientId
                @ client_secret config.googleClientSecret
                @ code request.query.code
                @ redirect_uri '${wzCtx.App.baseUrl}/api/v${wzCtx.App.apiVersion}/authenticate/google/callback'
                @ grant_type 'authorization_code'
        const options = { headers: { accept: 'application/json' } }
        _ axios.post(`https://oauth2.googleapis.com/token`, body, options)
            ._ then
                =>
                    param result
                        :any
                    log myname, 'googleCallback:', JSON.stringify(result.data,null,2)
                    return result.data['access_token']
            ._ then
                =>
                    param _token
                        :string
                    log myname, '_token:', _token
                    set (request.session as any).google_access_token = _token
                    _ response.redirect('/profile/google')
            ._ catch
                =>
                    param err
                        :any
                    _ response.status(500).json({ message: err.message })

    handler( profileGoogle )
        log myname, 'profileGoogle'
        _ axios
            {
                @ method 'get'
                @ url `https://www.googleapis.com/oauth2/v2/userinfo`
                { headers
                    @ Authorization 'Bearer ' + (request.session as any).google_access_token
            ._ then
                =>
                    param googleResult
                        :any
                    log myname, 'profileGoogle', 'googleResult.data', googleResult.data
                    if googleResult.data.email == null
                        _ response.render
                            @ 'account/error-google-email-private.html.ittf'
                            {
                                @ profile googleResult.data
                                @ message 'trying to create your wizzi account'
                    else
                        _ userApi.getUserByEmail
                            @ googleResult.data.email
                            ._ then
                                =>
                                    param wizziresult
                                        :any
                                    log myname, 'profileGoogle', 'getUserByEmail', 'wizziresult', wizziresult
                                    if wizziresult.found
                                        set (request.session as any).user = wizziresult.user
                                        _ response.redirect('/profile')
                                        # _ response.send('<pre><code>' +  JSON.stringify({ userData: user /*result.data*/ }, null, 2) + '</code></pre>')
                                    else
                                        const queryParams
                                            _ queryString.stringify
                                                {
                                                    @ name googleResult.data.name
                                                    @ email googleResult.data.email
                                                    @ avatar_url googleResult.data.picture
                                                    @ openid_provider 'google'
                                        _ response.redirect(`/user/new?${queryParams}`)
                            ._ catch
                                =>
                                    param err
                                        :any
                                    log myname, 'profileGoogle', 'getUserByEmail', 'error', err
                                    _ response.render
                                        @ 'error.html.ittf'
                                        {
                                            @ error err
                                            @ message 'getting user data by email'

                    $*
                    # _ response.json({ userData: googleResult.data })
                    set (request.session as any).user = googleResult.data
                    _ response.send('<pre><code>' +  JSON.stringify({ userData: googleResult.data }, null, 2) + '</code></pre>')
                    *$



