module

    +
    export
        :type SaveStatus
            :union
                :literal 'unsaved'
                :literal 'edited'
                :literal 'saving-draft'
                :literal 'saved-draft'
                :literal 'publishing'
                :literal 'published'
    +
    export
        :type SaveHistory
            :[
                :{
                    :p hashId
                        :string
                    :p savedAt
                        :string
                    :p isDraft
                        :optional
                        :boolean
    +
    export
        :type SaveOptions
            :{
                :p isDraft
                    :optional
                    :boolean
                :p ignoreUser
                    :optional
                    :boolean
                :p excludeFromHistory
                    :optional
                    :boolean
    +
    export
        :type AuthProps
            :{
                :p getSessionSecret
                    :=>
                        :string
                :p setMetadata
                    :=>
                        :ref Promise
                            :param void
                        param metadata
                            :{
                                :p appetizeCode
                                    :string
                :p viewer
                    :optional
                    :union
                        :ref Viewer
                        :undefined
                :p dispatch
                    :=>
                        :void
                        param action
                            :{
                                :p type
                                    :literal 'UPDATE_VIEWER'
                                :p viewer
                                    :union
                                        :ref Viewer
                                        :null
                                        :undefined

    +
    export
        :type PackiCodeFile
            :{
                :p type
                    :literal 'CODE'
                :p contents
                    :string
                :p error
                    :optional
                    :ref Error
        #
            #
            # A non asset file that is included with the project.
            # This can be either a code file (.js/.tsx) or a support
            # file such as a markdown or json file.
            #
    +
    export
        :type PackiAssetFile
            :{
                :p type
                    :literal 'ASSET'
                :p contents
                    :union
                        :string
                        :ref File
                        :ref Blob
                        :ref FormData
                    # string = url
                :p error
                    :optional
                    :ref Error
                    # string = url
        #
            #
            # An asset file that refers to externaly available
            # content such as an image or font.
            #
            # When resolved, the `contents` field is an URL to the
            # uploaded asset. A File, Blob or FormData object may
            # also be provided after which it is automatically uploaded
            # and converted into an URL.
            #
    +
    export
        :type PackiFile
            :union
                :ref PackiCodeFile
                :ref PackiAssetFile
        #
            #
            # The content of a Packi code or asset file.
            #
    +
    export
        :type PackiFiles
            :{
                :index
                    :ref PackiFile
                    param path
                        :string
        #
            #
            # Dictionary of file-names and their content that make up
            # the files of the Packi.
            #
    +


