module
    import 
        as React
        from 'react'
    import ReactDOM from 'react-dom'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import 
        @ prefTypes
        @ withThemeName
        from '../../features/preferences'
    import colors from '../../configs/colors'
    :type Props
        :{ 
            :p label
                :ref React.ReactNode
            :p timeout
                :optional 
                :number 
            :p persistent
                :optional 
                :boolean 
            :p type
                :optional 
                :union 
                    :literal 'success'
                    :literal 'error'
            :p theme
                :ref prefTypes.ThemeName
            :p actions
                :ref Array
                    :param 
                        :{ 
                            :p label
                                :string 
                            :p action
                                :optional 
                                :=> 
                                    :void 
                            :p primary
                                :optional 
                                :boolean 
            :p onDismiss
                :optional 
                :=> 
                    :void 
    :type State
        :{ 
            :p dismissing
                :boolean 
    const TOAST_GROUP_ID = '__toast_group__container'
    class Toast
        super React.Component
            :param 
                :ref Props
            :param 
                :ref State
        p defaultProps
            static
            { 
                @ timeout 5000
        p state
            { 
                @ dismissing false
        m componentDidMount
            let group = document.getElementById(TOAST_GROUP_ID)
            if !group
                set group = document.createElement('div')
                set group.id = TOAST_GROUP_ID
                _ Object.assign
                    @ group.style
                    { 
                        @ position 'fixed'
                        @ bottom '3em'
                        @ left '1em'
                        @ zIndex '999'
                _ document.body.appendChild(group)
            _ group.appendChild(this._container)
            || 
                + this.props.persistent
                _ this._scheduleDismiss
        m componentWillUnmount
            const group = document.getElementById(TOAST_GROUP_ID)
            if group
                _ group.removeChild(this._container)
            _ this._cancelDismiss
        p _container
            _ document.createElement('div')
        p _timer
            :any 
        => _scheduleDismiss
            set this._timer = setTimeout(this._handleDismiss, this.props.timeout)
        => _cancelDismiss
            _ this.setState
                { 
                    @ dismissing false
            _ clearTimeout(this._timer)
        => _handleDismiss
            _ this.setState
                { 
                    @ dismissing true
            set this._timer =
                _ setTimeout
                    => 
                        && 
                            + this.props.onDismiss
                            _ this.props.onDismiss
                    @ 400
        m render
            const props
                iif this.props.persistent
                    then {}
                    else
                        { 
                            @ onMouseEnter this._cancelDismiss
                            @ onMouseLeave this._scheduleDismiss
            return 
                _ ReactDOM.createPortal
                    div 
                        @ {...props}
                        @ className
                            _ css
                                @ styles.toast
                                iif this.props.type
                                    then
                                        iif this.props.type === 'error'
                                            then styles.error
                                            else styles.success
                                    else
                                        iif this.props.theme === 'dark'
                                            then styles.dark
                                            else styles.light
                                iif this.state.dismissing
                                    then styles.dismissing
                                    else styles.appearing
                        div 
                            @ className {css(styles.label)}
                            + {this.props.label}
                        { 
                            _ this.props.actions.map
                                => 
                                    param action
                                    button 
                                        @ key {action.label}
                                        @ className
                                            _ css
                                                @ styles.button
                                                iif this.props.theme !== 'dark' && !this.props.type
                                                    then styles.buttonLight
                                                    else null
                                        @ onClick {action.action || this._handleDismiss}
                                        + {action.label}
                    @ this._container
    export-default withThemeName(Toast)
    const fadeIn
        { 
            { from
                @ opacity 0
            { to
                @ opacity 1
    const fadeOut
        { 
            { from
                @ opacity 1
            { to
                @ opacity 0
    const styles
        _ StyleSheet.create
            { 
                { toast
                    @ display 'flex'
                    @ margin '1em'
                    @ padding '0 .75em'
                    @ borderRadius 3
                    @ border
                        `lit 
                            + 1px solid&nbsp;
                            @ colors.border
                            + 
                    @ boxShadow '0 4px 16px rgba(0, 1, 31, 0.2)'
                    @ minWidth '27em'
                    @ whiteSpace 'nowrap'
                { light
                    @ backgroundColor colors.background.light
                    @ color colors.text.light
                { dark
                    @ backgroundColor '#434852'
                    @ color '#fff'
                { success
                    @ backgroundColor colors.success
                    @ color '#fff'
                { error
                    @ backgroundColor colors.error
                    @ color '#fff'
                { appearing
                    @ animationName fadeIn
                    @ animationDuration '250ms'
                    @ opacity 1
                { dismissing
                    @ animationName fadeOut
                    @ animationDuration '400ms'
                    @ opacity 0
                { label
                    @ flex 1
                    @ minWidth 0
                    @ overflow 'hidden'
                    @ textOverflow 'ellipsis'
                    @ padding '.75em'
                { button
                    @ appearance 'none'
                    @ background 'transparent'
                    @ border '0'
                    @ textTransform 'uppercase'
                    @ fontSize '.9em'
                    @ fontWeight 'bold'
                    @ padding '1em'
                    @ outline 0
                    { ':hover'
                        @ backgroundColor 'rgba(0, 0, 0, .08)'
                    { ':active'
                        @ backgroundColor 'rgba(0, 0, 0, .12)'
                { buttonLight
                    @ color colors.primary
