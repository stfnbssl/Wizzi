wfschema pdf
    $
        var md = {
        };
    
    preserve-tags true
    mtree-is-preprocessed true
    unknown-element-replacer text
    
    e node
        r node/s
    
    e pdf : node
        is-root
    
    e xname : node
        tag name
    e section : node
    e h1 : node
    e h2 : node
    e text : node
        tag +
    e emphasisMark : node
    e strike : node
    e doubleStrike : node
    e superScript : node
    e subScript : node
    e smallCaps : node
    e allCaps : node
    e smallCaps : node
    e font : node
    e color : node
    e fill : node
    e size : node
    e width : node
    e height : node
    e shading : node
    e highlight : node
    e xtype : node
        tag type
    e table : node
    e tr : node
    e td : node
    e center : node
    e bullet_0 : node
    e tabStop : node
    e position : node
    e styles : node
    e style : node
    e basedOn : node
    e next : node
    e paragraphStyles : node
        tag paragraph-styles
    e run : node
    e xdefault : node
        tag default
    e styleDef : node
        tag style-def

    #
    #
    # Layout
    e margin : node
        m wzinitialize
            var ss = this.wzName.split(/[\s,]+/)
            if ss.length == 1
                set this.wzName = ss[0] + ',' + ss[0] + ',' + ss[0] + ',' + ss[0] 
            elif ss.length == 2
                set this.wzName = ss[0] + ',' + ss[1] + ',' + ss[0] + ',' + ss[1] 
            elif ss.length == 3
                set this.wzName = ss[0] + ',' + ss[1] + ',' + ss[2] + ',0'
            else
                set this.wzName = ss[0] + ',' + ss[1] + ',' + ss[2] + ',' + ss[3]
            log 'margin', this.wzName

    #
    #
    # Paragraph
    e p : node
        # subitems are "+/text" nodes
    e stack : node
        # subitems are "p" nodes
    e break : node
        tag br
    
    #
    #
    # Text styles
    e font : node
        # string: name of the font
    
    e fontSize : node
        tag font-size
        # number: size of the font in pt
    
    e fontFeatures : node
        tag font-features
        # string[]: array of advanced typographic features supported in TTF fonts (supported features depend on font file)
    
    e lineHeight : node
        tag line-height
        # number: the line height (default: 1)

    e bold : node
        tag b
    e boldProp : node
        tag bold
    
    e italics : node
        tag i
    e italicsProp : node
        tag italic
    
    e underline : node
        tag u
    e underlineProp : node
        tag underline
    
    e alignment : node
        # string: (‘left’ or ‘center’ or ‘right’) the alignment of the text
    
    e characterSpacing : node
        tag character-spacing
        # number: size of the letter spacing in pt
    
    e color : node
        # string: the color of the text (color name e.g., ‘blue’ or hexadecimal color e.g., ‘#ff5500’)
    
    e background : node
        # string the background color of the text
    
    e markerColor : node
        tag marker-color
        # string: the color of the bullets in a buletted list
    
    e decoration : node
        # string: the text decoration to apply (‘underline’ or ‘lineThrough’ or ‘overline’)
    
    e decorationStyle : node
        tag decoration-style
        # string: the style of the text decoration (‘dashed’ or ‘dotted’ or ‘double’ or ‘wavy’)


    e image : node

    e imageDef : node
        a src
        a title
        tag image-def
    
    e imageRef : node
        tag image-ref

    e ul : node
    e ol : node

