module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import 
        @ request
        @ gql
        from 'graphql-request'
    import debounce from 'lodash/debounce'
    import nullthrows from 'nullthrows'
    import 
        as React
        from 'react'
    import 
        @ AutoSizer
        @ List
        @ InfiniteLoader
        from 'react-virtualized'
    $if wzCtx.Build.useExpo 
        import Analytics from '../../utils/Analytics'
    import
        @ withThemeName
        @ ThemeName
        from '../../features/preferences/index'
    import 
        @ c
        from '../ThemeProvider'
    import 
        @ ProgressIndicator 
        from '../widgets/ProgressIndicator'
    import SearchPlaceholder from './SearchPlaceholder'
    const ENDPOINT
        `lit 
            + 
            _ nullthrows(process.env.API_SERVER_URL)
            + /--/graphql
    const SEARCH_SNACKS
        _` gql
            + &lf;
            + &nbsp; query($query: String!, $offset: Int!, $limit: Int!) {&lf;
            + &nbsp;   search(type: SNACKS, query: $query, offset: $offset, limit: $limit) {&lf;
            + &nbsp;     __typename&lf;
            + &nbsp;     ... on SnackSearchResult {&lf;
            + &nbsp;       id&lf;
            + &nbsp;       snack {&lf;
            + &nbsp;         slug&lf;
            + &nbsp;         name&lf;
            + &nbsp;         description&lf;
            + &nbsp;       }&lf;
            + &nbsp;     }&lf;
            + &nbsp;   }&lf;
            + &nbsp; }&lf;
            + 
    :type Snack
        :{ 
            :p slug
                :string 
            :p name
                :string 
            :p description
                :string 
    :type Props
        :{ 
            :p query
                :string 
            :p theme
                :ref ThemeName
    :type Data
        :[ 
            :{ 
                :p id
                    :string 
                :p snack
                    :ref Snack
    :type State
        :{ 
            :p status
                :union 
                    :{ 
                        :p type
                            :literal 'loading'
                        :p data
                            :ref Data
                    :{ 
                        :p type
                            :literal 'success'
                        :p data
                            :ref Data
                    :{ 
                        :p type
                            :literal 'failure'
                        :p error
                            :ref Error
    const PAGE_SIZE = 30
    class SearchResults
        super React.Component
            :param 
                :ref Props
            :param 
                :ref State
        p state
            :ref State
            { 
                { status
                    @ type 'success'
                    @ data []
        m componentDidMount
            $if wzCtx.Build.useExpo
                _ Analytics.getInstance().startTimer('launchedSearch')
                _ Analytics.getInstance().logEvent('SEARCH_OPENED')
            if this.props.query
                _ this._fetchResultsNotDebounced(this.props.query)
        m componentDidUpdate
            param prevProps
                :ref Props
            if this.props.query !== prevProps.query
                _ this._fetchResults(this.props.query)
        $if wzCtx.Build.useExpo
            => _handleClick
                _ Analytics.getInstance().logEvent
                    @ 'SEARCH_RESULT_CHOSEN'
                    { 
                        @ searchTerm this.props.query
                    @ 'launchedSearch'
        p _fetchResultsNotDebounced
            async=> 
                param query
                    :string 
                param previous
                    :ref Data
                    = 
                        [ 
                $if wzCtx.Build.useExpo
                    _ Analytics.getInstance().logEvent
                        @ 'SEARCH_REQUESTED'
                        { 
                            @ searchTerm query
                _ this.setState
                    { 
                        { status
                            @ type 'loading'
                            @ data previous
                try 
                    const results
                        :{ 
                            :p search
                                :ref Data
                        =
                            await 
                                _ request
                                    @ ENDPOINT
                                    @ SEARCH_SNACKS
                                    { 
                                        @ query this.props.query
                                        @ offset previous.length
                                        @ limit PAGE_SIZE
                        # @ts-ignore
                    _ this.setState
                        { 
                            { status
                                @ type 'success'
                                [ data
                                    @ ...previous
                                    @ ...results.search
                catch error
                    _ console.error('Error fetching search results', error)
                    _ this.setState
                        { 
                            { status
                                @ type 'failure'
                                @ error
        p _fetchResults
            _ debounce(this._fetchResultsNotDebounced, 1000)
        => _fetchMore
            const 
                { 
                    @ status
                = this.state
            return 
                _ this._fetchResultsNotDebounced
                    @expr this.props.query
                    iif status.type === 'success'
                        then status.data
                        else []
        => _renderRow
            { 
                { data
                    @ snack
                @ style
                @ key
                :{ 
                    :p data
                        :{ 
                            :p snack
                                :ref Snack
                    :p style
                        :object 
                    :p key
                        :string 
            div 
                @ key {key}
                @ style {style}
                a 
                    @ target "_blank"
                    @ href
                        `lit 
                            + /
                            @ snack.slug
                            + 
                    @ onClick {this._handleClick}
                    @ className {css(styles.item)}
                    img 
                        @ className {css(styles.icon)}
                        @ src
                            iif this.props.theme === 'dark'
                                then require('../../assets/snack-icon-dark.svg')
                                else require('../../assets/snack-icon-color.svg')
                    div 
                        @ className {css(styles.content)}
                        h4 
                            @ className {css(styles.title)}
                            + {snack.name}
                        p 
                            @ className {css(styles.description)}
                            + {snack.description}
        m render
            const 
                { 
                    @ status
                = this.state
            if !this.props.query
                return 
                    < SearchPlaceholder 
                        @ label "Results will appear here."
            if status.type === 'failure'
                return 
                    < SearchPlaceholder 
                        @ label "An error ocurred. Try again after some time."
            if status.type === 'loading' && !status.data?.length
                return 
                    div 
                        @ className {css(styles.loadingContainer)}
                        < ProgressIndicator 
                        < SearchPlaceholder 
                            @ label "Searchingâ€¦"
            if status.type === 'success' && !status.data?.length
                return 
                    < SearchPlaceholder 
                        @ label "No results found."
            return 
                div 
                    @ className
                        _ css
                            iif status.type === 'loading'
                                then styles.loadingContainer
                                else styles.container
                    { 
                        iif status.type === 'loading'
                            then
                                < ProgressIndicator 
                            else null
                    < AutoSizer 
                        { 
                            => 
                                { 
                                    @ height
                                    @ width
                                < InfiniteLoader 
                                    @ isRowLoaded
                                        => 
                                            { 
                                                @ index
                                            set index < status.data.length
                                    @ loadMoreRows {this._fetchMore}
                                    @ rowCount {status.data.length + 1}
                                    { 
                                        => 
                                            { 
                                                @ onRowsRendered
                                                @ registerChild
                                            < List 
                                                @ ref {registerChild}
                                                @ onRowsRendered {onRowsRendered}
                                                @ height {height}
                                                @ width {width}
                                                @ rowCount {status.data.length}
                                                @ rowHeight {72}
                                                @ rowRenderer
                                                    => 
                                                        { 
                                                            @ index
                                                            @ style
                                                            @ key
                                                        _ this._renderRow
                                                            { 
                                                                @ data status.data[index]
                                                                @ style
                                                                @ key
    export-default withThemeName(SearchResults)
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ flex 1
                { loadingContainer
                    @ display 'flex'
                    @ flex 1
                { icon
                    @ display 'block'
                    @ height 36
                    @ width 36
                    @ marginTop 4
                { item
                    @ height 72
                    @ display 'flex'
                    @ padding '16px 24px'
                    @ cursor 'pointer'
                    @ color 'inherit'
                    @ textDecoration 'none'
                    @ borderBottom
                        `lit 
                            + 1px solid&nbsp;
                            _ c('border')
                            + 
                    { ':hover'
                        @ backgroundColor c('hover')
                { content
                    @ marginLeft 16
                { title
                    @ fontSize 16
                    @ fontWeight 'bold'
                    @ margin 0
                    @ whiteSpace 'nowrap'
                    @ textOverflow 'ellipsis'
                { description
                    @ fontSize 14
                    @ margin 0
                    @ whiteSpace 'nowrap'
                    @ textOverflow 'ellipsis'
