module
    import 
        as React
        from 'react'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import distanceInWords from 'date-fns/distance_in_words'
    import 
        @ appTypes
        from '../../features/app'
    import 
        @ prefTypes
        @ withThemeName
        from '../../features/preferences'
    import 
        @ packiTypes
        @ packiDefaults
        from '../../features/packi'
    import Popover from '../shared/Popover'
    import EditableField from '../shared/EditableField'
    import ModalEditTitleAndDescription from './ModalEditTitleAndDescription'
    import colors from '../../configs/colors'
    :type Props
        :{ 
            :p name
                :string 
            :p description
                :union 
                    :string 
                    :undefined 
            :p createdAt
                :union 
                    :string 
                    :undefined 
            :p saveHistory
                :ref packiTypes.SaveHistory
            :p saveStatus
                :ref packiTypes.SaveStatus
            :p loggedUser
                :union 
                    :ref appTypes.LoggedUser
                    :undefined 
            :p isEditModalVisible
                :boolean 
            :p onShowPreviousSaves
                :=> 
                    :void 
            :p onShowEditModal
                :=> 
                    :void 
            :p onDismissEditModal
                :=> 
                    :void 
            :p onSubmitMetadata
                :=> 
                    :ref Promise
                        :param void
                    param details
                        :{ 
                            :p name
                                :string 
                            :p description
                                :string 
                    param draft
                        :boolean 
                        :optional 
            # onLogInClick: () => void;
            :p theme
                :ref prefTypes.ThemeName
    :type State
        :{ 
            :p date
                :ref Date
    class EditorTitle
        super React.Component
            :param 
                :ref Props
            :param 
                :ref State
        p state
            { 
                @ date new Date()
        m componentDidMount
            set this._timer =
                _ setInterval
                    => 
                        _ this.setState
                            { 
                                @ date new Date()
                    @ 10000
        m componentWillUnmount
            _ clearInterval(this._timer)
        p _timer
            :any 
        => _handleSubmitTitle
            param name
                :string 
            _ this.props.onSubmitMetadata
                { 
                    @ name
                    @ description this.props.description || ''
        m render
            const 
                { 
                    @ name
                    @ description
                    @ createdAt
                    @ saveHistory
                    @ saveStatus
                    @ loggedUser
                    @ theme
                    @ isEditModalVisible
                    @ onShowPreviousSaves
                    @ onShowEditModal
                    @ onSubmitMetadata
                    @ onDismissEditModal
                    # onLogInClick,
                = this.props
            const lastSave
                iif saveHistory.length
                    then saveHistory[0]
                    else null
            const savedAt
                iif lastSave
                    then lastSave.savedAt
                    else createdAt
            const hasPermanentHistory
                iif saveHistory
                    then
                        _ saveHistory.some
                            => 
                                param item
                                + !item.isDraft
                    else false
            let statusText
            if loggedUser
                # User is logged in
                if saveStatus === 'saving-draft'
                    set statusText = 'Saving changesâ€¦'
                else
                    if savedAt
                        const dtSavedAt = new Date(savedAt)
                        const timestamp
                            iif this.state.date > dtSavedAt
                                then
                                    `lit 
                                        + 
                                        _ distanceInWords
                                            @ this.state.date
                                            @ dtSavedAt
                                            { 
                                                @ includeSeconds true
                                                @ addSuffix true
                                        + 
                                else ''
                        if saveStatus === 'changed'
                            set statusText =
                                `lit 
                                    + Last saved&nbsp;
                                    @ timestamp
                                    + 
                        else
                            set statusText =
                                `lit 
                                    + All changes saved&nbsp;
                                    @ timestamp
                                    + 
                    else
                        set statusText = 'Not saved yet'
                set statusText =
                    < React.Fragment 
                        span 
                            @ className {css(styles.statusText)}
                            + {statusText}
                            + .
                        + {' '}
                        { 
                            iif hasPermanentHistory
                                then
                                    button 
                                        @ onClick {onShowPreviousSaves}
                                        @ className {css(styles.textButton)}
                                        + See previous saves.
                                else null
            else
                set statusText =
                    < React.Fragment 
                        button 
                            #
                                # onClick={onLogInClick}
                            #
                                # onClick={onLogInClick}
                            @ className {css(styles.textButton)}
                            + Log in
                        + {' '}
                        span 
                            @ className {css(styles.statusText)}
                            + to save your changes as you work
                    # User is a guest
            return 
                div 
                    @ className {css(styles.container)}
                    div 
                        @ className {css(styles.header)}
                        div 
                            @ className {css(styles.titleContainer)}
                            h1 
                                @ className {css(styles.title)}
                                < EditableField 
                                    @ value {name}
                                    @ onSubmitText {this._handleSubmitTitle}
                            < Popover 
                                @ content
                                    < React.Fragment 
                                        p 
                                            @ className {css(styles.description)}
                                            # 
                                                # description || packiDefaults.DEFAULT_DESCRIPTION
                                        button 
                                            @ onClick {onShowEditModal}
                                            @ className {css(styles.editButton)}
                                            + Edit details
                                button 
                                    @ className
                                        _ css
                                            @ styles.icon
                                            iif theme === 'light'
                                                then styles.infoLight
                                                else styles.infoDark
                        div 
                            @ className {css(styles.metadata)}
                            p 
                                @ className {css(styles.status)}
                                + {statusText}
                            { 
                                iif loggedUser && saveStatus === 'saving-draft'
                                    then
                                        div 
                                            @ className {css(styles.spinner)}
                                    else null
                            { 
                                iif (loggedUser && saveStatus === 'saved-draft') || saveStatus === 'published'
                                    then
                                        svg 
                                            @ className {css(styles.check)}
                                            @ width "11px"
                                            @ height "8px"
                                            @ viewBox "0 0 11 8"
                                            polygon 
                                                @ fill "#4CAF50"
                                                @ points "3.34328358 6.32835821 0.835820896 3.82089552 0 4.65671642 3.34328358 8 10.5074627 0.835820896 9.67164179 0"
                                    else null
                    < ModalEditTitleAndDescription 
                        @ title "Edit Packi Details"
                        @ action "Done"
                        @ visible {isEditModalVisible}
                        @ onDismiss {onDismissEditModal}
                        @ onSubmit
                            => 
                                param details
                                _ onSubmitMetadata(details)
                                _ onDismissEditModal
                        @ description {description}
                        @ name {name}
    export-default withThemeName(EditorTitle)
    const spin
        { 
            { from
                @ transform 'rotate(0deg)'
            { to
                @ transform 'rotate(360deg)'
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ display 'flex'
                    @ alignItems 'center'
                    @ minWidth 0
                    @ height '100%'
                { header
                    @ padding 2
                    @ minWidth 0
                { title
                    @ fontSize '1.3em'
                    @ lineHeight '1.3em'
                    @ fontWeight 500
                    @ margin 0
                    @ textOverflow 'ellipsis'
                    @ overflow 'hidden'
                { titleContainer
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'flex-end'
                { metadata
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'center'
                { status
                    @ fontSize 12
                    @ margin '0 6px'
                    @ textOverflow 'ellipsis'
                    @ overflow 'hidden'
                { textButton
                    @ appearance 'none'
                    @ background 'none'
                    @ border 0
                    @ margin 0
                    @ padding 0
                    @ textDecoration 'underline'
                { statusText
                    @ opacity 0.5
                { spinner
                    @ borderStyle 'solid'
                    @ borderTopColor colors.primary
                    @ borderLeftColor colors.primary
                    @ borderBottomColor colors.primary
                    @ borderRightColor 'rgba(0, 0, 0, .16)'
                    @ borderWidth 1
                    @ height 12
                    @ width 12
                    @ borderRadius '50%'
                    @ margin '0 4px'
                    @ animationDuration '1s'
                    [ animationName
                        @ spin
                    @ animationIterationCount 'infinite'
                    @ animationTimingFunction 'linear'
                { check
                    @ marginBottom -4
                { icon
                    @ display 'block'
                    @ position 'relative'
                    @ appearance 'none'
                    @ backgroundColor 'transparent'
                    @ backgroundRepeat 'no-repeat'
                    @ backgroundSize 16
                    @ backgroundPosition 'center'
                    @ border 0
                    @ outline 0
                    @ margin 0
                    @ padding 0
                    @ height 24
                    @ width 24
                    @ opacity 0.3
                    @ transition '.2s'
                    { ':hover'
                        @ opacity 0.8
                { description
                    @ margin 16
                { modal
                    @ padding '1em 1.5em'
                    @ borderRadius 3
                    @ width 360
                    @ maxWidth '100%'
                    @ boxShadow '0 1px 8px rgba(0, 0, 0, 0.07)'
                { infoLight
                    @ backgroundImage
                        `lit 
                            + url(
                            _ require('../../assets/info-icon.png')
                            + )
                { infoDark
                    @ backgroundImage
                        `lit 
                            + url(
                            _ require('../../assets/info-icon-light.png')
                            + )
                { editButton
                    @ width '100%'
                    @ background 'none'
                    @ outline 0
                    @ borderWidth '1px 0 0 0'
                    @ borderColor colors.border
                    @ padding '8px 16px'
