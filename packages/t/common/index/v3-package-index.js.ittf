module
	$params pkgname, version|0.0.0
	kind jsfile
	+
    $include versions
    +
	var util = require('util')
	var path = require('path')
	var stringify = require('json-stringify-safe')
	+
	var md = module.exports = {}
	set md.name = '${pkgname}'
    +
    $if isWebpackTarget
        # preloads for webpack
        $foreach schema in wfpackage.schemas
            $ var sn = schema.name

            set md.__preload_${sn}_model = require("./lib/wizzi/models/${sn}-model.g")
            set md.__preload_${sn}_factory = require("./lib/wizzi/models/${sn}-factory.g")
            $foreach transformer in schema.transformers
                $ var tn = transformer.name
                $ var tnx = _.replace(_.replace(transformer.name, '/', '_'), '-', '_')
                set md.__preload_${tnx}_trans = require("./lib/artifacts/${tn}/trans/main")
            $foreach artifact in schema.artifacts
                $ var an = artifact.name
                $ var anx = _.replace(_.replace(artifact.name, '/', '_'), '-', '_')
                set md.__preload_${anx}_gen = require("./lib/artifacts/${an}/gen/main")
        #
        # window(s) vars must be declared even if empty
        var window_modelFactories
            {
                $foreach schema in wfpackage.schemas
                    $ var sn = schema.name

                    @ ${sn} require("./lib/wizzi/models/${sn}-factory.g")
        
        var window_artifactGenerators
            {
                $foreach schema in wfpackage.schemas
                    $foreach artifact in schema.artifacts
                        $ var an = artifact.name
                        @ '${an}' require("./lib/artifacts/${an}/gen/main")

        var window_transformers
            {
                $foreach schema in wfpackage.schemas
                    $foreach transformer in schema.transformers
                        $ var tn = transformer.name
                        @ '${tn}' require("./lib/artifacts/${tn}/trans/main")
        
        var window_schemaDefinitions
            {
        +

	$hook model-transform-artifacts
	+
	#
		# FactoryPlugin class
	class FactoryPlugin
		ctor
			param wizziPackage
			param provides
			set this.file = wizziPackage.file
			set this.provides = provides
			set this.modelFactories = {}
			set this.modelTransformers = {}
			set this.artifactGenerators = {}
			set this.schemaDefinitions = {}
		m initialize
			param options
			param callback
			# TODO
			return
				_ callback(null)
		m getName
			return '${pkgname}'
		
		m getFilename
			return __filename
		
		m getVersion
			return '${versions[pkgname + '@next']}'

		m getProvides
			return this.provides

		$include ./v3-model-factory
		$include ./v3-model-transformation
		$include ./v3-artifact-generation
		$include ./v3-schema-definition
	+
	function error
		param code
		param message
		return
			{
				@ __is_error true
				@ source '${pkgname}/FactoryPlugin'
				@ code code
				@ message message
	+
	set module.exports
		{
            @ provides
                {
                    @ schemas
                        [
                            $foreach schema in wfpackage.schemas
                                $ var sn = schema.name
                                @ '${sn}' 
                    @ modelTransformers
                        [
                            $foreach schema in wfpackage.schemas
                                $foreach transformer in schema.transformers
                                    $ var tn = transformer.name
                                    @ '${tn}'
                    @ artifactGenerators
                        [
                            $foreach schema in wfpackage.schemas
                                $foreach artifact in schema.artifacts
                                    $ var an = artifact.name
                                    @ '${an}'
			$hook
			@ createFactoryPlugin
				function
					param wizziPackage
					param options
					param callback
					var plugin
						new FactoryPlugin
							@ wizziPackage
							@ this.provides
					_ plugin.initialize
						@ options
						f_cb( notUsed )
							return
								_ callback
									@ null
									@ plugin
	+

