module
    $
        var pack_Name = wzCtx.Build.useExpo ? '${pack_Name}' : 'Packi';
        var pack_name = wzCtx.Build.useExpo ? 'snack' : 'packi';
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import debounce from 'lodash/debounce'
    import 
        as React
        from 'react'
    import 
        @ connect
        from 'react-redux'
    $if wzCtx.Build.useExpo
        import 
            @ SDKVersion
            from '../types'
    import 
        @ ${pack_Name}Files
        from '../../features/packi'
    $if wzCtx.Build.usePackiAspects        
        import 
            @ GeneratedArtifact
            @ JobError
            from '../../features/wizzi'
    import 
        @ Viewer
        from '../../features/account'
    import 
        @ Annotation
        from '../../features/annotations'
    $if wzCtx.Build.useExpo 
        import Analytics from '../utils/Analytics'
    $if wzCtx.Build.useOk
        import 
            @ isMobile
            from '../../utils/detectPlatform'
    import 
        @ isScript
        @ isJson
        @ isTest
        from '../../features/file/index'
    $if wzCtx.Build.useExpo 
        import lintFile from '../../features/lint/index'
        import prettierCode from '../../features/prettier/index'
        import AssetViewer from './AssetViewer'
        import 
            @ withDependencyManager
            from './DependencyManager'
        import DeviceInstructionsModal
            @ ConnectionMethod
            from './DeviceInstructions/DeviceInstructionsModal'
        import DevicePreview from './DevicePreview/DevicePreview'
    import 
        @ EditorProps
        from '../Editor/EditorProps'
    import EditorFooter from './EditorFooter'
    import EditorPanels from './EditorPanels'
    import EditorToolbar from './EditorToolbar'
    import 
        @ EditorViewProps
            as BaseEditorViewProps
        from './EditorViewProps'
    $if wzCtx.Build.useExpo 
        import EmbedCode from './EmbedCode'
    import FileList from '../FileList/FileList'
    $if wzCtx.Build.useExpo 
        import ImportProductionModal from './Import/ImportProductionModal'
        import ImportRepoModal from './Import/ImportRepoModal'
    import KeyboardShortcuts
        @ Shortcuts
        from './KeyboardShortcuts'
    import NoFileSelected from './NoFileSelected'
    import PageMetadata from './PageMetadata'
    
    :import-type
        @ PanelType
        from '../../features/preferences/index'
    
    import
        @ withPreferences
        @ PreferencesContextType
        from '../../features/preferences/index'
    
    $if wzCtx.Build.useExpo 
        import PreviousSaves from './PreviousSaves'
    
    import PublishManager
        @ PublishModals
        from '../Publish/PublishManager'
    
    # from shell
    import 
        @ ContentShell 
        from '../shell/ContentShell'
    import 
        @ EditorShell 
        from '../shell/EditorShell'
    import 
        @ LayoutShell 
        from '../shell/LayoutShell'
    
    import 
        @ c
        @ s
        from '../ThemeProvider'
    
    # from widgets
    import Banner from '../widgets/Banner'
    import KeybindingsManager from '../widgets/KeybindingsManager'
    import LazyLoad from '../widgets/LazyLoad'
    import 
        @ ModalDialog 
        from '../widgets/ModalDialog'
    import 
        @ ProgressIndicator 
        from '../widgets/ProgressIndicator'
    $if wzCtx.Build.usePackiAspects
        +
        import PackiManagerContainer
            from '../Packi/PackiManagerContainer'
        import GeneratedView from './GeneratedView'
        import GenerationErrors from './GenerationErrors'
    +
    const EDITOR_LOAD_FALLBACK_TIMEOUT = 3000
    +
    export 
        :type EditorViewProps
            :intersect 
                :ref PreferencesContextType
                :ref BaseEditorViewProps
                :{ 
                    :p viewer
                        :optional 
                        :ref Viewer

    :type ModalName
        :union 
            $if wzCtx.Build.useOk
                :ref PublishModals
            $if wzCtx.Build.useExpo 
                :literal 'device-instructions'
                :literal 'embed'
            $if wzCtx.Build.usePackiAspects 
                :literal 'auth'
                :literal 'packi-manager'
                :literal 'github-commit'
                :literal 'github-create'
            :literal 'edit-info'
            :literal 'shortcuts'
            :literal 'previous-saves'
            :literal 'import-repo'
            :literal 'import-production'
    :type BannerName
        :union 
            :literal 'connected'
            :literal 'disconnected'
            :literal 'reconnect'
            :literal 'autosave-disabled'
            $if wzCtx.Build.useExpo 
                :literal 'sdk-upgraded'
                :literal 'embed-unavailable'
            :literal 'export-unavailable'
            :literal 'slow-connection'
    $if wzCtx.Build.usePackiAspects
        :type SplitViewKind
            :union 
                :literal 'left'
                :literal 'right'
                :literal 'both'
    $if wzCtx.Build.useExpo 
        :type LintedFile
            :{ 
                :p code
                    :string 
                :p annotations
                    :[ 
                        :ref Annotation
        :type LintedFiles
            :{ 
                :index 
                    :ref LintedFile
                    param path
                        :string 
    :type State
        :{ 
            :p currentModal
                :union 
                    :ref ModalName
                    :null 
            :p currentBanner
                :union 
                    :ref BannerName
                    :null 
            :p loadedEditor
                :union 
                    :literal 'monaco'
                    :literal 'simple'
                    :null 
            :p isMarkdownPreview
                :boolean 
            $if wzCtx.Build.useExpo 
                :p deviceLogsShown
                    :boolean 
                :p lintedFiles
                    :ref LintedFiles
                :p lintAnnotations
                    :[ 
                        :ref Annotation
            :p shouldPreventRedirectWarning
                :boolean 
            $if wzCtx.Build.usePackiAspects
                :p isDownloading
                    :boolean 
                :p splitViewKind
                    :ref SplitViewKind
    const BANNER_TIMEOUT_SHORT = 1500
    const BANNER_TIMEOUT_LONG = 5000
    class EditorViewComp
        super React.Component
            :param 
                :ref EditorViewProps
            :param 
                :ref State
        p state
            :ref State
            { 
                @ currentModal null
                @ currentBanner null
                @ loadedEditor null
                @ isMarkdownPreview true
                $if wzCtx.Build.useExpo 
                    @ deviceLogsShown false
                    { lintedFiles
                    @ lintAnnotations []
                @ shouldPreventRedirectWarning false
                $if wzCtx.Build.usePackiAspects
                    @ isDownloading false
                    @ splitViewKind
                        + 'both'
                            :as 
                                :ref SplitViewKind
        m getDerivedStateFromProps
            static
            param props
                :ref EditorViewProps
            param state
                :ref State
            const 
                { 
                    @ selectedFile
                    @ files
                = props
            let newState
                :any 
                = null
                # When an empty markdown file is opened, switch to edit mode
            if state.isMarkdownPreview && selectedFile.endsWith('.md') && !files[selectedFile]?.contents
                set newState =
                    || 
                        + newState
                        { 
                set newState.isMarkdownPreview = false
            return newState
        m componentDidMount
            _ window.addEventListener('beforeunload', this._handleUnload)
            $if wzCtx.Build.useExpo 
                _ setTimeout
                    => 
                        _ this._lint(this.props.selectedFile, this.props.files, this.props.sdkVersion)
                        _ prettierCode
                            iif isScript(this.props.selectedFile)
                                then this.props.selectedFile
                                else 'index.md'
                            @ ''
                    @ 5000
                    # Load prettier early so that clicking on the prettier button doesn't take too long
                    # Try to preload plugins required for the current entry first
                    # If entry isn't present, load plugins for markdown, which will load several of them
            $if wzCtx.Build.useExpo 
                if this.props.wasUpgraded
                    _ this._showBanner('sdk-upgraded', BANNER_TIMEOUT_LONG)
        m componentDidUpdate
            param prevProps
                :ref EditorViewProps
            $if wzCtx.Build.useExpo 
                if this.props.files !== prevProps.files
                    _ this._lint(this.props.selectedFile, this.props.files, this.props.sdkVersion)
                if prevProps.connectedDevices !== this.props.connectedDevices
                    if prevProps.connectedDevices.length < this.props.connectedDevices.length
                        _ Analytics.getInstance().logEvent('CONNECTED_DEVICE')
                        if prevProps.connectedDevices.length === 0
                            _ Analytics.getInstance().startTimer('deviceConnected')
                        _ this._showBanner('connected', BANNER_TIMEOUT_SHORT)
                    if prevProps.connectedDevices.length > this.props.connectedDevices.length
                        if this.props.connectedDevices.length === 0
                            _ Analytics.getInstance().logEvent
                                @ 'DISCONNECTED_DEVICE'
                                { 
                                @ 'deviceConnected'
                        else
                            _ Analytics.getInstance().logEvent('DISCONNECTED_DEVICE')
                        _ this._showBanner('disconnected', BANNER_TIMEOUT_SHORT)
                if prevProps.sdkVersion !== this.props.sdkVersion && this.props.connectedDevices.length
                    _ this._showBanner('reconnect', BANNER_TIMEOUT_LONG)
            if prevProps.autosaveEnabled !== this.props.autosaveEnabled && !this.props.autosaveEnabled
                _ this._showBanner('autosave-disabled', BANNER_TIMEOUT_LONG)
        m componentWillUnmount
            _ window.removeEventListener('beforeunload', this._handleUnload)
        => _handleUnload
            param e
                :any 
            const isUnsaved = this.props.saveStatus === 'edited' || this.props.saveStatus === 'publishing' || this.props.saveStatus === 'saving-draft'
            if !isUnsaved || this.state.shouldPreventRedirectWarning
                _ this._allowRedirectWarning()
                return 
            const message = 'You have unsaved changes. Are you sure you want to leave this page?'
            set e.returnValue = message
            return message
        $if wzCtx.Build.useExpo 
            p _lintNotDebounced
                async=> 
                    param _selectedFile
                        :string 
                    param files
                        :ref ${pack_Name}Files
                    param _sdkVersion
                        :ref SDKVersion
                    const 
                        { 
                            @ lintedFiles
                        = this.state
                    let newLintedFiles
                        :union 
                            :ref LintedFiles
                            :null 
                        = null
                        # Lint other files if they have changed
                    for 
                        left
                            const path
                        in files
                        const file = files[path]
                        if !isTest(path) && file.type === 'CODE' && file.contents !== lintedFiles[path]?.code
                            const annotations
                                await 
                                    _ lintFile(path, files)
                            set newLintedFiles =
                                ?? 
                                    + newLintedFiles
                                    { 
                                        @ ...lintedFiles
                            set newLintedFiles[path] =
                                { 
                                    @ code file.contents
                                    @ annotations
                        # Lint other files if they have changed
                        # Remove linter-results for removed files
                    for 
                        left
                            const path
                        in lintedFiles
                        if !files[path] || files[path].type !== 'CODE'
                            set newLintedFiles =
                                ?? 
                                    + newLintedFiles
                                    { 
                                        @ ...lintedFiles
                            delete newLintedFiles[path]
                        # Remove linter-results for removed files
                        # Update state
                    if newLintedFiles
                        _ this.setState
                            => 
                                (
                                    { 
                                        @ lintedFiles
                                            + newLintedFiles
                                                :as 
                                                    :ref LintedFiles
                                        @ lintAnnotations
                                            _ Object.values
                                                + newLintedFiles
                                                    :as 
                                                        :ref LintedFiles
                                                ._ flatMap
                                                    => 
                                                        { 
                                                            @ annotations
                                                        + annotations
            p _lint
                _ debounce(this._lintNotDebounced, 500)
            p _prettier
                async=> 
                    const 
                        { 
                            @ selectedFile
                            @ files
                        = this.props
                    const file = files[selectedFile]
                    if file?.type === 'CODE'
                        let code
                            :string 
                        if isJson(selectedFile)
                            set code = JSON.stringify(JSON.parse(file.contents), null, 2)
                        else
                            set code =
                                await 
                                    _ prettierCode(selectedFile, file.contents)
                        if code !== file.contents
                            _ this.props.updateFiles
                                => 
                                    (
                                        { 
                                            { [selectedFile]
                                                @ type 'CODE'
                                                @ contents code
        => _showBanner
            param name
                :ref BannerName
            param duration
                :number 
            _ this.setState
                { 
                    @ currentBanner name
            _ setTimeout
                => 
                    _ this.setState
                        => 
                            param state
                            ( 
                                iif state.currentBanner === name
                                    then
                                        { 
                                            @ currentBanner null
                                    else state
                        # @ts-ignore
                @ duration
        $if wzCtx.Build.usePackiAspects
            +
            p _handleChangeSplitViewKind
                => 
                    param e
                        :ref React.ChangeEvent
                            :param 
                                :ref HTMLSelectElement
                    _ this.setState
                        { 
                            @ splitViewKind
                                @expr e.target.value
                                    :as 
                                        :ref SplitViewKind
        +
        => _handleDismissEditModal
            $if wzCtx.Build.useExpo 
                _ Analytics.getInstance().logEvent
                    @ 'DISMISSED_AUTH_MODAL'
                    { 
                        @ currentModal this.state.currentModal
            _ this.setState
                { 
                    @ currentModal null
        => _handleShowTitleDescriptionModal
            _ this.setState
                { 
                    @ currentModal 'edit-info'
        $if wzCtx.Build.useExpo 
            => _handleShowDeviceInstructions
                _ Analytics.getInstance().logEvent('REQUESTED_QR_CODE')
                _ this.setState
                    { 
                        @ currentModal 'device-instructions'
        $if wzCtx.Build.usePackiAspects
            p _handleShowPackiManager
                => 
                    _ this.setState
                        { 
                            @ currentModal 'packi-manager'
        $if wzCtx.Build.usePackiAspectsGithub
            p _handleShowGithubCommit
                => 
                    _ this.setState
                        { 
                            @ currentModal 'github-commit'
            p _handleShowGithubCreate
                => 
                    _ this.setState
                        { 
                            @ currentModal 'github-create'
        p _handleShowAuthModal
            => 
                _ this.setState
                    { 
                        @ currentModal 'auth'
        
        
        => _handleShowShortcuts
            _ this.setState
                { 
                    @ currentModal 'shortcuts'
        $if wzCtx.Build.useExpo 
            => _handleShowPreviousSaves
                _ this.setState
                    { 
                        @ currentModal 'previous-saves'
        => _handleShowImportRepoModal
            _ this.setState
                { 
                    @ currentModal 'import-repo'
        => _handleShowImportProductionModal
            _ this.setState
                { 
                    @ currentModal 'import-production'
        => _handleHideModal
            _ this.setState
                { 
                    @ currentModal null
        => _handleShowModal
            param name
                :any 
            _ this.setState
                { 
                    @ currentModal name
        $if wzCtx.Build.useExpo 
            => _handleShowEmbedCode
                if !this.props.id
                    _ this._showBanner('embed-unavailable', BANNER_TIMEOUT_LONG)
                    return 
                _ Analytics.getInstance().logEvent('REQUESTED_EMBED')
                _ this.setState
                    { 
                        @ currentModal 'embed'
        => _handleRemoveFile
            param path
                :string 
            _ this._EditorComponent?.removePath?.(path)
        => _handleRenameFile
            param oldPath
                :string 
            param newPath
                :string 
            _ this._EditorComponent?.renamePath?.(oldPath, newPath)
        p _EditorComponent
            :any 
        => _showErrorPanel
            _ this.props.setPreferences
                { 
                    @ panelType 'errors'
        $if wzCtx.Build.useExpo 
            => _showDeviceLogs
                _ this.props.setPreferences
                    { 
                        @ panelType 'logs'
        => _togglePanels
            param panelType
                :ref PanelType
                :optional 
            _ this.props.setPreferences
                { 
                    @ panelsShown !this.props.preferences.panelsShown
                    @ panelType
                        iif panelType && !this.props.preferences.panelsShown
                            then panelType
                            else this.props.preferences.panelType
        => _toggleFileTree
            _ this.props.setPreferences
                { 
                    @ fileTreeShown !this.props.preferences.fileTreeShown
        $if wzCtx.Build.useExpo 
            => _changeConnectionMethod
                param deviceConnectionMethod
                    :ref ConnectionMethod
                _ this.props.setPreferences
                    { 
                        @ deviceConnectionMethod
            => _toggleEditorMode
                _ this.props.setPreferences
                    { 
                        @ editorMode
                            iif this.props.preferences.editorMode === 'vim'
                                then 'normal'
                                else 'vim'
        => _toggleTheme
            _ this.props.setPreferences
                { 
                    @ theme
                        iif this.props.preferences.theme === 'light'
                            then 'dark'
                            else 'light'
        => _toggleMarkdownPreview
            _ this.setState
                => 
                    param state
                    (
                        { 
                            @ isMarkdownPreview !state.isMarkdownPreview
        => _preventRedirectWarning
            _ this.setState
                { 
                    @ shouldPreventRedirectWarning true
        => _allowRedirectWarning
            _ this.setState
                { 
                    @ shouldPreventRedirectWarning false
        m render
            const 
                { 
                    @ currentModal
                    @ currentBanner
                    $if wzCtx.Build.useExpo 
                        @ lintAnnotations
                    $if wzCtx.Build.usePackiAspects
                        @ isDownloading
                = this.state
            const 
                { 
                    @ id
                    @ createdAt
                    @ experienceURL
                    $if wzCtx.Build.useExpo
                        @ experienceName
                    @ saveHistory
                    @ saveStatus
                    @ viewer
                    @ snackagerURL
                    @ files
                    @ selectedFile
                    $if wzCtx.Build.useExpo 
                        @ dependencies
                        @ deviceId
                        @ isResolving
                    @ sendCodeOnChangeEnabled
                    $if wzCtx.Build.useExpo 
                        @ sdkVersion
                        @ isLocalWebPreview
                    @ userAgent
                    $if wzCtx.Build.useExpo 
                        @ connectedDevices
                        @ deviceLogs
                    @ onSendCode
                    $if wzCtx.Build.useExpo 
                        @ onReloadSnack
                        @ onClearDeviceLogs
                        @ onChangePlatform
                    @ onToggleSendCode
                    @ onTogglePreview
                    @ uploadFileAsync
                    @ preferences
                    @ name
                    @ description
                    @ previewRef
                    @ previewURL
                    $if wzCtx.Build.useExpo 
                        @ platform
                        @ platformOptions
                    @ previewShown
                    $if wzCtx.Build.usePackiAspects
                        @ loggedUser
                        @ onLoggedOn
                        @ onLoggedOff
                        @ currentPacki
                        @ onExecuteWizziJob
                        @ generatedArtifact
                        @ jobError
                        @ isWizziJobWaiting
                        @ onSaveCode
                = this.props
            const annotations
                $if wzCtx.Build.useExpo 
                    iif lintAnnotations.length
                        then
                            [ 
                                @ ...this.props.annotations
                                @ ...lintAnnotations
                        else this.props.annotations
                $else
                    = this.props.annotations
            return 
                < ContentShell 
                    { 
                        iif this.state.loadedEditor
                            then null
                            else
                                < ProgressIndicator 
                    < PageMetadata 
                        @ name {name}
                        @ description {description}
                        @ id {id}
                    < PublishManager 
                        @ id {id}
                        $if wzCtx.Build.useExpo 
                            @ sdkVersion {sdkVersion}
                        @ name {name}
                        @ description {description}
                        @ onSubmitMetadata {this.props.onSubmitMetadata}
                        @ onPublishAsync {this.props.onPublishAsync}
                        @ onShowModal {this._handleShowModal}
                        @ onHideModal {this._handleHideModal}
                        @ currentModal {currentModal}
                        { 
                            => 
                                { 
                                    @ onPublishAsync
                                return 
                                    < React.Fragment
                                        < KeybindingsManager 
                                            @ bindings {Shortcuts}
                                            @ onTrigger
                                                => 
                                                    param type
                                                    const commands
                                                        :{ 
                                                            :index 
                                                                :union 
                                                                    :paren 
                                                                        :=> 
                                                                            :void 
                                                                    :null 
                                                                param key
                                                                    :string 
                                                        =
                                                            { 
                                                                @ save
                                                                    iif saveStatus === 'published'
                                                                        then null
                                                                        $if wzCtx.Build.useExpo 
                                                                            else
                                                                                iif this.props.isResolving
                                                                                    then null
                                                                                    else onPublishAsync
                                                                        $else
                                                                            else onPublishAsync
                                                                @ tree this._toggleFileTree
                                                                @ panels this._togglePanels
                                                                $if wzCtx.Build.useExpo 
                                                                    @ format this._prettier
                                                                @ shortcuts this._handleShowShortcuts
                                                                @ update onSendCode
                                                    const fn = commands[type]
                                                    if fn
                                                        _ fn()
                                        < EditorToolbar 
                                            @ name {name}
                                            @ description {description}
                                            @ createdAt {createdAt}
                                            @ saveHistory {saveHistory}
                                            @ saveStatus {saveStatus}
                                            @ viewer {viewer}
                                            $if wzCtx.Build.useExpo 
                                                @ isResolving {isResolving}
                                            @ isEditModalVisible {currentModal === 'edit-info'}
                                            $if wzCtx.Build.usePackiAspects
                                                @ loggedUser {loggedUser}
                                                @ isWizziJobWaiting {isWizziJobWaiting}
                                                @ onChangeSplitViewKind {this._handleChangeSplitViewKind}
                                                $$
                                                @ creatorUsername {this.props.creatorUsername}
                                                    # name={name}
                                                    # description={description}
                                                @ currentPacki {currentPacki}
                                                @ splitViewKind {this.state.splitViewKind}
                                                $$ @ saveHistory {saveHistory}
                                                $$ @ saveStatus {saveStatus}
                                                @ isDownloading {isDownloading}
                                                @ isAuthModalVisible {currentModal === 'auth'}
                                                $$ @ onShowPreviousSaves {this._handleShowPreviousSaves}
                                                @ onLoggedOn {onLoggedOn}
                                                @ onLoggedOff {onLoggedOff}
                                                @ onShowEditModal {this._handleShowTitleDescriptionModal}
                                                @ onDismissEditModal {this._handleDismissEditModal}
                                                $if wzCtx.Build.usePackiAspectsAuth
                                                    @ onShowAuthModal {this._handleShowAuthModal}
                                                    @ onDismissAuthModal {this._handleHideModal}
                                                @ onExecuteWizziJob {onExecuteWizziJob}
                                                @ onShowPackiManager {this._handleShowPackiManager}
                                                $if wzCtx.Build.usePackiAspectGithub
                                                    @ onShowGithubCommit {this._handleShowGithubCommit}
                                                    @ onShowGithubCreate {this._handleShowGithubCreate}
                                                @ onSaveCode {onSaveCode}
                                            $if wzCtx.Build.useExpo 
                                                @ onShowPreviousSaves {this._handleShowPreviousSaves}
                                            @ onSubmitMetadata {this.props.onSubmitMetadata}
                                            $if wzCtx.Build.useExpo 
                                                @ onShowQRCode {this._handleShowDeviceInstructions}
                                                @ onShowEmbedCode {this._handleShowEmbedCode}
                                            @ onDownloadCode {this.props.onDownloadAsync}
                                            @ onPublishAsync {onPublishAsync}
                                        div 
                                            @ className {css(styles.editorAreaOuterWrapper)}
                                            div 
                                                @ className {css(styles.editorAreaOuter)}
                                                < LayoutShell 
                                                    < FileList 
                                                        @ annotations {annotations}
                                                        @ visible {preferences.fileTreeShown}
                                                        @ files {files}
                                                        @ selectedFile {selectedFile}
                                                        @ updateFiles {this.props.updateFiles}
                                                        @ onSelectFile {this.props.onSelectFile}
                                                        @ onRemoveFile {this._handleRemoveFile}
                                                        @ onRenameFile {this._handleRenameFile}
                                                        @ uploadFileAsync {uploadFileAsync}
                                                        @ onDownloadCode {this.props.onDownloadAsync}
                                                        @ onImportRepo {this._handleShowImportRepoModal}
                                                        @ onImportProduction {this._handleShowImportProductionModal}
                                                        $if wzCtx.Build.useExpo 
                                                            @ has${pack_Name}Id {!!id}
                                                        @ saveStatus {saveStatus}
                                                        $if wzCtx.Build.useExpo 
                                                            @ sdkVersion {sdkVersion}
                                                    { 
                                                        && 
                                                            + (this.state.splitViewKind == 'both' || this.state.splitViewKind == 'left')
                                                            < LazyLoad 
                                                                @ load
                                                                    async=> 
                                                                        :return
                                                                            :ref Promise
                                                                                :param 
                                                                                    :{ 
                                                                                        :p default
                                                                                            :ref React.ComponentType
                                                                                                :param 
                                                                                                    :ref EditorProps
                                                                        $if wzCtx.Build.useOk
                                                                            if isMobile(userAgent)
                                                                                const editor
                                                                                    await 
                                                                                        _ import
                                                                                            @ '../Editor/SimpleEditor'
                                                                                    # Monaco doesn't work great on mobile`
                                                                                    # Use simple editor for better experience
                                                                                _ this.setState
                                                                                    { 
                                                                                        @ loadedEditor 'simple'
                                                                                return editor
                                                                        $if wzCtx.Build.useMonacoEditor
                                                                            let timeout
                                                                                :any 
                                                                            const MonacoEditorPromise
                                                                                _ import
                                                                                    @ '../Editor/MonacoEditor'
                                                                                        #
                                                                                            # webpackPreload: true
                                                                                    ._ then
                                                                                        => 
                                                                                            param editor
                                                                                            (
                                                                                                { 
                                                                                                    @ editor
                                                                                                    @ type 'monaco'
                                                                                # Fallback to simple editor if monaco editor takes too long to load
                                                                            const SimpleEditorPromise
                                                                                new Promise
                                                                                    => 
                                                                                        param resolve
                                                                                        param reject
                                                                                        set timeout =
                                                                                            _ setTimeout
                                                                                                => 
                                                                                                    _ this._showBanner('slow-connection', BANNER_TIMEOUT_LONG)
                                                                                                    _ import
                                                                                                        @ '../Editor/SimpleEditor'
                                                                                                        ._ then
                                                                                                            @ resolve
                                                                                                            @ reject
                                                                                                @ EDITOR_LOAD_FALLBACK_TIMEOUT
                                                                                    ._ then
                                                                                        => 
                                                                                            param editor
                                                                                            (
                                                                                                { 
                                                                                                    @ editor
                                                                                                    @ type 'simple'
                                                                                # Fallback to simple editor if monaco editor takes too long to load
                                                                            return 
                                                                                _ Promise.race
                                                                                    [ 
                                                                                        _ MonacoEditorPromise.catch
                                                                                            => 
                                                                                                + SimpleEditorPromise
                                                                                        @ SimpleEditorPromise
                                                                                    ._ then
                                                                                        => 
                                                                                            { 
                                                                                                @ editor
                                                                                                @ type
                                                                                                :any 
                                                                                            _ this.setState
                                                                                                { 
                                                                                                    @ loadedEditor type
                                                                                            _ clearTimeout(timeout)
                                                                                            return editor
                                                                        $else
                                                                            const editor
                                                                                await 
                                                                                    _ import
                                                                                        @ '../Editor/SimpleEditor'
                                                                                # Monaco doesn't work great on mobile`
                                                                                # Use simple editor for better experience
                                                                            _ this.setState
                                                                                { 
                                                                                    @ loadedEditor 'simple'
                                                                            return editor
                                                                { 
                                                                    => 
                                                                        { 
                                                                            @ loaded
                                                                            @ data Comp
                                                                        set this._EditorComponent = Comp
                                                                        const file = files[selectedFile]
                                                                        if file
                                                                            $if wzCtx.Build.useExpo 
                                                                                if file.type === 'ASSET'
                                                                                    return 
                                                                                        < AssetViewer 
                                                                                            @ selectedFile {selectedFile}
                                                                                            @ files {files}
                                                                            const 
                                                                                { 
                                                                                    @ contents
                                                                                = file
                                                                            const isMarkdown = selectedFile.endsWith('.md')
                                                                            if isMarkdown && this.state.isMarkdownPreview
                                                                                return 
                                                                                    < React.Fragment
                                                                                        < LazyLoad 
                                                                                            @ load
                                                                                                => 
                                                                                                    _ import
                                                                                                        @ '../Markdown/MarkdownPreview'
                                                                                            { 
                                                                                                => 
                                                                                                    { 
                                                                                                        @ loaded mdLoaded
                                                                                                        @ data MarkdownPreview
                                                                                                    if mdLoaded && MarkdownPreview
                                                                                                        return 
                                                                                                            < MarkdownPreview 
                                                                                                                @ source {contents as string}
                                                                                                    return 
                                                                                                        < EditorShell 
                                                                                        button 
                                                                                            @ className {css(styles.previewToggle)}
                                                                                            @ onClick {this._toggleMarkdownPreview}
                                                                                            svg 
                                                                                                @ width "12px"
                                                                                                @ height "12px"
                                                                                                @ viewBox "0 0 18 18"
                                                                                                @ className {css(styles.previewToggleIcon)}
                                                                                                g 
                                                                                                    @ transform "translate(-147.000000, -99.000000)"
                                                                                                    g 
                                                                                                        @ transform "translate(144.000000, 96.000000)"
                                                                                                        path 
                                                                                                            @ d "M3,17.25 L3,21 L6.75,21 L17.81,9.94 L14.06,6.19 L3,17.25 L3,17.25 Z M20.71,7.04 C21.1,6.65 21.1,6.02 20.71,5.63 L18.37,3.29 C17.98,2.9 17.35,2.9 16.96,3.29 L15.13,5.12 L18.88,8.87 L20.71,7.04 L20.71,7.04 Z"
                                                                            if loaded && Comp
                                                                                return 
                                                                                    < React.Fragment
                                                                                        < Comp 
                                                                                            $if wzCtx.Build.useExpo 
                                                                                                @ dependencies {dependencies}
                                                                                                @ sdkVersion {sdkVersion}
                                                                                            @ selectedFile {selectedFile}
                                                                                            @ files {files}
                                                                                            @ autoFocus {!/Untitled file.*\.(js|tsx?)$/.test(selectedFile)}
                                                                                            @ annotations {annotations}
                                                                                            @ updateFiles {this.props.updateFiles}
                                                                                            @ onSelectFile {this.props.onSelectFile}
                                                                                            $if wzCtx.Build.useExpo 
                                                                                                @ mode {preferences.editorMode}
                                                                                            @ lineNumbers
                                                                                                $if wzCtx.Build.useOk
                                                                                                    iif isMobile(userAgent)
                                                                                                        then 'off'
                                                                                                        else undefined
                                                                                                $else
                                                                                                    + undefined
                                                                                        { 
                                                                                            iif isMarkdown
                                                                                                then
                                                                                                    button 
                                                                                                        @ className {css(styles.previewToggle)}
                                                                                                        @ onClick {this._toggleMarkdownPreview}
                                                                                                        svg 
                                                                                                            @ width "16px"
                                                                                                            @ height "12px"
                                                                                                            @ viewBox "0 0 22 16"
                                                                                                            @ className {css(styles.previewToggleIcon)}
                                                                                                            g 
                                                                                                                @ transform "translate(-145.000000, -1156.000000)"
                                                                                                                g 
                                                                                                                    @ transform "translate(144.000000, 1152.000000)"
                                                                                                                    path 
                                                                                                                        @ d "M12,4.5 C7,4.5 2.73,7.61 1,12 C2.73,16.39 7,19.5 12,19.5 C17,19.5 21.27,16.39 23,12 C21.27,7.61 17,4.5 12,4.5 L12,4.5 Z M12,17 C9.24,17 7,14.76 7,12 C7,9.24 9.24,7 12,7 C14.76,7 17,9.24 17,12 C17,14.76 14.76,17 12,17 L12,17 Z M12,9 C10.34,9 9,10.34 9,12 C9,13.66 10.34,15 12,15 C13.66,15 15,13.66 15,12 C15,10.34 13.66,9 12,9 L12,9 Z"
                                                                                                else null
                                                                        else
                                                                            return 
                                                                                < NoFileSelected 
                                                                        return 
                                                                            < EditorShell 
                                                    $if wzCtx.Build.usePackiAspects
                                                        { 
                                                            iif ((this.state.splitViewKind == 'both' || this.state.splitViewKind == 'right') && generatedArtifact) && generatedArtifact.artifactContent
                                                                then
                                                                    < GeneratedView 
                                                                        @ generatedContent {generatedArtifact.artifactContent}
                                                                        @ generatedSourcePath {generatedArtifact.sourcePath}
                                                                        @ splitViewKind {this.state.splitViewKind}
                                                                else
                                                                    iif generatedArtifact && generatedArtifact.errorLines
                                                                        then
                                                                            < GenerationErrors 
                                                                                @ errorName {generatedArtifact.errorName}
                                                                                @ errorLines {generatedArtifact.errorLines}
                                                                                @ errorMessage {generatedArtifact.errorMessage}
                                                                                @ errorStack {generatedArtifact.errorStack}
                                                                        else null
                                                        { 
                                                            iif jobError
                                                                then
                                                                    < GenerationErrors 
                                                                        @ errorName {jobError.errorName}
                                                                        @ errorLines {[]}
                                                                        @ errorMessage {jobError.errorMessage}
                                                                        @ errorStack {jobError.errorStack}
                                                                else null

                                                { 
                                                    iif preferences.panelsShown
                                                        then
                                                            < EditorPanels 
                                                                @ annotations {annotations}
                                                                $if wzCtx.Build.useExpo 
                                                                    @ deviceLogs {deviceLogs}
                                                                @ onShowErrorPanel {this._showErrorPanel}
                                                                $if wzCtx.Build.useExpo 
                                                                    @ onShowDeviceLogs {this._showDeviceLogs}
                                                                @ onTogglePanels {this._togglePanels}
                                                                $if wzCtx.Build.useExpo 
                                                                    @ onClearDeviceLogs {onClearDeviceLogs}
                                                                @ onSelectFile {this.props.onSelectFile}
                                                                @ panelType {preferences.panelType}
                                                        else null
                                            { 
                                                iif previewShown
                                                    $if wzCtx.Build.useExpo 
                                                        then
                                                            < DevicePreview 
                                                                @ className {css(styles.preview)}
                                                                @ width {334}
                                                                @ connectedDevices {connectedDevices}
                                                                @ deviceId {deviceId}
                                                                @ experienceURL {experienceURL}
                                                                @ experienceName {experienceName}
                                                                @ name {name}
                                                                @ onChangePlatform {onChangePlatform}
                                                                @ onClickRunOnPhone {this._handleShowDeviceInstructions}
                                                                @ onReloadSnack {onReloadSnack}
                                                                @ onSendCode {onSendCode}
                                                                @ onToggleSendCode {onToggleSendCode}
                                                                @ platform {platform}
                                                                @ platformOptions {platformOptions}
                                                                @ previewRef {previewRef}
                                                                @ previewURL {previewURL}
                                                                @ sdkVersion {sdkVersion}
                                                                @ setDeviceId {this.props.setDeviceId}
                                                                @ sendCodeOnChangeEnabled {sendCodeOnChangeEnabled}
                                                    $else
                                                        then null
                                                    else null
                                        < EditorFooter 
                                            @ annotations {annotations}
                                            $if wzCtx.Build.useExpo 
                                                @ connectedDevices {connectedDevices}
                                            @ fileTreeShown {preferences.fileTreeShown}
                                            @ previewShown {previewShown}
                                            @ panelsShown {preferences.panelsShown}
                                            $if wzCtx.Build.useExpo 
                                                @ editorMode {preferences.editorMode}
                                            @ sendCodeOnChangeEnabled {sendCodeOnChangeEnabled}
                                            $if wzCtx.Build.useExpo 
                                                @ sdkVersion {sdkVersion}
                                                @ isLocalWebPreview {isLocalWebPreview}
                                            @ onSendCode {onSendCode}
                                            $if wzCtx.Build.useExpo 
                                                @ onReloadSnack {onReloadSnack}
                                            @ onToggleTheme {this._toggleTheme}
                                            @ onTogglePanels {this._togglePanels}
                                            @ onToggleFileTree {this._toggleFileTree}
                                            @ onTogglePreview {onTogglePreview}
                                            @ onToggleSendCode {onToggleSendCode}
                                            $if wzCtx.Build.useExpo 
                                                @ onToggleVimMode
                                                    iif this.state.loadedEditor === 'monaco'
                                                        then this._toggleEditorMode
                                                        else undefined
                                                @ onChangeSDKVersion {this.props.onChangeSDKVersion}
                                            @ onShowShortcuts {this._handleShowShortcuts}
                                            $if wzCtx.Build.useExpo 
                                                @ onPrettifyCode {this._prettier}
                                            @ theme {this.props.preferences.theme}
                                            $if wzCtx.Build.usePackiAspects
                                                @ loggedUid {preferences.loggedUid}
                                                @ autoGenSingleDoc {preferences.autoGenSingleDoc}
                                                @ autoExecJob {preferences.autoExecJob}
                                                $if wzCtx.Build.usePackiAspectsGithub
                                                    @ connectGithubRepos {preferences.connectGithubRepos}
                                                @ trustLocalStorage {preferences.trustLocalStorage}
                                        $if wzCtx.Build.useExpo 
                                            < DeviceInstructionsModal 
                                                @ visible {currentModal === 'device-instructions'}
                                                @ onDismiss {this._handleHideModal}
                                                @ onChangeMethod {this._changeConnectionMethod}
                                                @ method {preferences.deviceConnectionMethod}
                                                @ experienceURL {experienceURL}
                                                @ isEmbedded {false}
                                                @ setDeviceId {this.props.setDeviceId}
                                                @ deviceId {deviceId}
                                        $if wzCtx.Build.usePackiAspects
                                            { 
                                                && 
                                                    + loggedUser
                                                    < ModalDialog 
                                                        @ title "Manage your packies"
                                                        @ visible {currentModal === 'packi-manager'}
                                                        @ onDismiss {this._handleHideModal}
                                                        < PackiManagerContainer
                                                            @ onClose {this._handleHideModal}
                                        $if wzCtx.Build.useExpo 
                                            < ModalDialog 
                                                @ className {css(styles.embedModal)}
                                                @ autoSize {false}
                                                @ visible {currentModal === 'embed'}
                                                @ onDismiss {this._handleHideModal}
                                                < EmbedCode 
                                                    @ id {id}
                                                    @ sdkVersion {sdkVersion}
                                                    @ platformOptions {platformOptions}
                                            < ModalDialog 
                                                @ visible {currentModal === 'previous-saves'}
                                                @ title "Previous saves"
                                                @ onDismiss {this._handleHideModal}
                                                < PreviousSaves 
                                                    @ saveHistory {saveHistory}
                                        < ModalDialog 
                                            @ visible {currentModal === 'shortcuts'}
                                            @ onDismiss {this._handleHideModal}
                                            < KeyboardShortcuts 
                                        $if wzCtx.Build.useExpo 
                                            < ImportRepoModal 
                                                @ visible {currentModal === 'import-repo'}
                                                @ onHide {this._handleHideModal}
                                                @ preventRedirectWarning {this._preventRedirectWarning}
                                                @ snackagerURL {snackagerURL}
                                            < ImportProductionModal 
                                                @ visible {currentModal === 'import-production'}
                                                @ onHide {this._handleHideModal}
                                                @ onSubmitMetadata {this.props.onSubmitMetadata}
                                                @ onChangeSDKVersion {this.props.onChangeSDKVersion}
                                                @ updateFiles {this.props.updateFiles}
                                                @ updateDependencies {this.props.updateDependencies}
                                        < Banner 
                                            @ type "success"
                                            @ visible {currentBanner === 'connected'}
                                            + Device connected!
                                        < Banner 
                                            @ type "error"
                                            @ visible {currentBanner === 'disconnected'}
                                            + Device disconnected!
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'autosave-disabled'}
                                            + Automatic saving has been disabled in this ${pack_Name} because you have it open in&lf;                  another tab.
                                        $if wzCtx.Build.useExpo 
                                            < Banner 
                                                @ type "info"
                                                @ visible {currentBanner === 'sdk-upgraded'}
                                                + This Snack was written in an older Expo version that is not longer supported. We&lf;                  have upgraded the Expo version to
                                                + {sdkVersion}
                                                + .
                                                br 
                                                + You might need to do some manual changes to make the Snack work correctly.
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'reconnect'}
                                            + Please close and reopen Expo Go on your phone to see the Expo version change.
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'slow-connection'}
                                            + Slow network detected. Trying to load a basic version of the editor. Some features&lf;                  such as linting and autocomplete may not work.
                                        $if wzCtx.Build.useExpo 
                                            < Banner 
                                                @ type "info"
                                                @ visible {currentBanner === 'embed-unavailable'}
                                                + You need to save the Snack first to get an Embed code!
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'export-unavailable'}
                                            + You need to save the Snack first to export the code!
    export
        const EditorView  
            _ withPreferences
                _ connect
                    => 
                        param state
                            :any 
                        (
                            { 
                                @ viewer state.viewer
                    (
                        $if wzCtx.Build.useExpo 
                            _ withDependencyManager(EditorViewComp)
                        $else
                            @ EditorViewComp
    export-default EditorView
    const styles
        _ StyleSheet.create
            { 
                { editorAreaOuter
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'column'
                    @ minWidth 0
                    @ minHeight 0
                { editorAreaOuterWrapper
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'row'
                    @ minHeight 0
                    @ minWidth 0
                { embedModal
                    @ minWidth 0
                    @ minHeight 0
                    @ maxWidth 'calc(100% - 48px)'
                    @ maxHeight 'calc(100% - 48px)'
                { preview
                    @ backgroundColor c('content')
                    @ borderLeft
                        `lit 
                            + 1px solid&nbsp;
                            _ c('border')
                            + 
                { previewToggle
                    @ appearance 'none'
                    @ position 'absolute'
                    @ right 0
                    @ bottom 0
                    @ margin 32
                    @ padding 12
                    @ height 48
                    @ width 48
                    @ border 0
                    @ borderRadius '50%'
                    @ backgroundColor c('secondary')
                    @ color c('secondary-text')
                    @ outline 0
                    @ transitionDuration '170ms'
                    @ transitionProperty 'box-shadow'
                    @ transitionTimingFunction 'linear'
                    { ':focus-visible'
                        @ outline 'auto'
                    { ':hover'
                        @ boxShadow s('small')
                { previewToggleIcon
                    @ fill 'currentColor'
                    @ verticalAlign -1


$*
module
    import 
        as React
        from 'react'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import 
        @ withStyles
        @ createStyles
        @ Theme
        from '@material-ui/core/styles'
    import 
        @ commonTypes
        from '../../../common'
    import 
        @ appTypes
        @ Segment
        from '../../features/app'
    import 
        @ authTypes
        from '../../features/auth'
    import 
        @ prefTypes
        @ prefColors
        @ withPreferences
        from '../../features/preferences'
    import 
        @ filelistTypes
        @ fileActions
        @ fileUtils
        from '../../features/filelist'
    import 
        @ packiTypes
        @ packiValids
            #
                # , packiDefaults
        from '../../features/packi'
    import 
        @ wizziTypes
        from '../../features/wizzi'
    import FileList from '../filelist/FileList'
    import KeybindingsManager from '../shared/KeybindingsManager'
    import LazyLoad from '../shared/LazyLoad'
    import ModalDialog from '../shared/MuiModalDialog'
    import ProgressIndicator from '../shared/ProgressIndicator'
    import ContentShell from '../Shell/ContentShell'
    import LayoutShell from '../Shell/LayoutShell'
    import EditorShell from '../Shell/EditorShell'
    import AssetViewer from './AssetViewer'
    import EditorPanels from './EditorPanels'
    import EditorToolbar from './EditorToolbar'
    import EditorFooter from './EditorFooter'
    import EditorForm from '../../features/form/EditorForm'
    import NoFileSelected from './NoFileSelected'
    import KeyboardShortcuts
        @ Shortcuts
        from './KeyboardShortcuts'
    import PackiManager from '../../containers/PackiManager'
    import PreviousSaves from './PreviousSaves'
    import GeneratedView from './GeneratedView'
    import GenerationErrors from './GenerationErrors'
    import mockFn from '../../mocks/functions'
    const EDITOR_LOAD_FALLBACK_TIMEOUT = 3000
    :type EditorProps
        :intersect 
            :ref authTypes.AuthProps
            :{ 
                :p classes
                    :any 
                :p currentPacki
                    :optional 
                    :ref packiTypes.Packi
                :p generatedArtifact
                    :optional 
                    :ref wizziTypes.GeneratedArtifact
                :p saveHistory
                    :ref packiTypes.SaveHistory
                :p saveStatus
                    :ref packiTypes.SaveStatus
                :p creatorUsername
                    :optional 
                    :string 
                :p fileEntries
                    :[ 
                        :ref filelistTypes.FileSystemEntry
                :p entry
                    :union 
                        :ref filelistTypes.TextFileEntry
                        :ref filelistTypes.AssetFileEntry
                        :undefined 
                :p params
                    :{ 
                        :p id
                            :optional 
                            :string 
                            # platform?: 'android' | 'ios';
                    # loadingMessage: string | undefined;
                :p jobError
                    :ref wizziTypes.JobError
                    # loadingMessage: string | undefined;
                :p isWizziJobWaiting
                    :boolean 
                :p onSelectPacki
                    :=> 
                        :void 
                        param packiId
                            :string 
                :p onCreatePacki
                    :=> 
                        :void 
                        param packiId
                            :string 
                        param packiKind
                            :string 
                :p onDeletePacki
                    :=> 
                        :void 
                        param packiId
                            :string 
                :p onFileEntriesChange
                    :=> 
                        :ref Promise
                            :param void
                        param entries
                            :[ 
                                :ref filelistTypes.FileSystemEntry
                :p onChangeCode
                    :=> 
                        :void 
                        param code
                            :string 
                :p onEntrySelected
                    :=> 
                        :void 
                        param entry
                            :ref filelistTypes.FileSystemEntry
                :p onExecuteWizziJob
                    :=> 
                        :void 
                :p onSaveCode
                    :=> 
                        :void 
                    #
                        # 
                        # onSubmitMetadata: (
                        # details: {
                        # name: string;
                        # description: string;
                        # },
                        # draft?: boolean
                        # ) => Promise<void>;
                        # uploadFileAsync: (file: File) => Promise<string>;
                        # syncDependenciesAsync: (
                        # modules: {
                        # [name: string]: string | undefined;
                        # },
                        # onError: (name: string, e: Error) => void
                        # ) => Promise<void>;
                        # 
                :p userAgent
                    :string 
                    #
                        # 
                        # onSubmitMetadata: (
                        # details: {
                        # name: string;
                        # description: string;
                        # },
                        # draft?: boolean
                        # ) => Promise<void>;
                        # uploadFileAsync: (file: File) => Promise<string>;
                        # syncDependenciesAsync: (
                        # modules: {
                        # [name: string]: string | undefined;
                        # },
                        # onError: (name: string, e: Error) => void
                        # ) => Promise<void>;
                        # 
    export 
        :type Props
            :intersect 
                :ref prefTypes.PreferencesContextType
                :ref EditorProps
                :{ 
                    :p loggedUser
                        :optional 
                        :ref appTypes.LoggedUser
    :type ModalName
        :union 
            :literal 'auth'
            :literal 'packi-manager'
            :literal 'github-commit'
            :literal 'github-create'
            :literal 'edit-info'
            :literal 'shortcuts'
            :literal 'previous-saves'
    :type BannerName
        :union 
            :literal 'connected'
            :literal 'disconnected'
            :literal 'reconnect'
            :literal 'autosave-disabled'
            :literal 'slow-connection'
    :type SplitViewKind
        :union 
            :literal 'left'
            :literal 'right'
            :literal 'both'
    :type State
        :{ 
            :p currentModal
                :union 
                    :ref ModalName
                    :null 
            :p currentBanner
                :union 
                    :ref BannerName
                    :null 
            :p loadedEditor
                :union 
                    :literal 'monaco'
                    :literal 'simple'
                    :null 
            :p isDownloading
                :boolean 
            :p isMarkdownPreview
                :boolean 
                # lintErrors: Annotation[];
            :p previousEntry
                :union 
                    :ref filelistTypes.TextFileEntry
                    :ref filelistTypes.AssetFileEntry
                    :undefined 
                # lintErrors: Annotation[];
            :p splitViewKind
                :ref SplitViewKind
        # const BANNER_TIMEOUT_SHORT = 1500;
        # const BANNER_TIMEOUT_LONG = 5000;
    class EditorView
        super React.Component
            :param 
                :ref Props
            :param 
                :ref State
        m getDerivedStateFromProps
            static
            param props
                :ref Props
            param state
                :ref State
            if props.entry !== state.previousEntry
                const 
                    { 
                        @ entry
                    = props
                const 
                    { 
                        @ previousEntry
                    = state
                if entry
                    _ props.onEntrySelected(entry)
                let isMarkdownPreview = state.isMarkdownPreview
                if 
                    test
                        && 
                            + entry && (!previousEntry || entry.item.path !== previousEntry.item.path)
                            (
                                && 
                                    + entry.item.type === 'file' && entry.item.path.endsWith('.md') && !entry.item.asset
                                    op! 
                                        @expr 
                                            ( 
                                                + entry
                                                    :as 
                                                        :ref filelistTypes.TextFileEntry
                                            . item
                                            . content
                                # When an empty markdown file is opened, switch to edit mode
                    set isMarkdownPreview = false
                return 
                    { 
                        @ isMarkdownPreview
                        @ previousEntry entry
            return null
        p state
            { 
                @ loadedEditor null
                @ currentModal null
                @ currentBanner null
                @ isDownloading false
                @ isMarkdownPreview true
                @ previousEntry undefined
                @ splitViewKind
                    + 'both'
                        :as 
                            :ref SplitViewKind
        m componentDidMount
        p _handleChangeSplitViewKind
            => 
                param e
                    :ref React.ChangeEvent
                        :param 
                            :ref HTMLSelectElement
                _ this.setState
                    { 
                        @ splitViewKind
                            @expr e.target.value
                                :as 
                                    :ref SplitViewKind
        p _handleDismissEditModal
            => 
                _ Segment.getInstance().logEvent
                    @ 'DISMISSED_AUTH_MODAL'
                    { 
                        @ currentModal this.state.currentModal
                _ this.setState
                    { 
                        @ currentModal null
        p _handleShowTitleDescriptionModal
            => 
                _ this.setState
                    { 
                        @ currentModal 'edit-info'
        p _handleShowPackiManager
            => 
                _ this.setState
                    { 
                        @ currentModal 'packi-manager'
        p _handleShowGithubCommit
            => 
                _ this.setState
                    { 
                        @ currentModal 'github-commit'
        p _handleShowGithubCreate
            => 
                _ this.setState
                    { 
                        @ currentModal 'github-create'
        p _handleShowAuthModal
            => 
                _ this.setState
                    { 
                        @ currentModal 'auth'
        p _handleShowShortcuts
            => 
                _ console.log("_handleShowShortcuts")
                _ this.setState
                    { 
                        @ currentModal 'shortcuts'
        p _handleShowPreviousSaves
            => 
                _ this.setState
                    { 
                        @ currentModal 'previous-saves'
        p _handleHideModal
            => 
                _ this.setState
                    { 
                        @ currentModal null
        p _handleShowModal
            => 
                param name
                    :any 
                _ this.setState
                    { 
                        @ currentModal name
        p _handleSelectPacki
            => 
                param id
                    :string 
                _ this._handleDismissEditModal()
                @expr this.props.onSelectPacki && this.props.onSelectPacki(id)
        p _handleCreatePacki
            => 
                param id
                    :string 
                param kind
                    :string 
                _ this._handleDismissEditModal()
                @expr this.props.onCreatePacki && this.props.onCreatePacki(id, kind)
        p _handleDeletePacki
            => 
                param id
                    :string 
                @expr this.props.onDeletePacki && this.props.onDeletePacki(id)
        p _handleCreateGitRepository
            => 
                param owner
                    :string 
                param name
                    :string 
                param branch
                    :string 
                _ this._handleDismissEditModal()
                    # this.props.onCreateGitRepository && this.props.onCommitGitRepository(owner, name, branch);
        p _handleOpenPath
            => 
                param path
                    :string 
                :return
                    :ref Promise
                        :param void
                _ this.props.onFileEntriesChange(fileActions.openEntry(this.props.fileEntries, path, true))
        p _handleRemoveFile
            => 
                param path
                    :string 
                const entry
                    _ this.props.fileEntries.find
                        => 
                            { 
                                @ item
                            set item.path === path
                if entry && entry.item.type === 'folder'
                    _ this.props.fileEntries.forEach
                        => 
                            { 
                                @ item
                            if fileUtils.isInsideFolder(item.path, path)
                                @expr this._EditorComponent && this._EditorComponent.removePath(item.path)
                else
                    @expr this._EditorComponent && this._EditorComponent.removePath(path)
        p _handleRenameFile
            => 
                param oldPath
                    :string 
                param newPath
                    :string 
                const entry
                    _ this.props.fileEntries.find
                        => 
                            { 
                                @ item
                            set item.path === oldPath
                if entry && entry.item.type === 'folder'
                    _ this.props.fileEntries.forEach
                        => 
                            { 
                                @ item
                            if fileUtils.isInsideFolder(item.path, oldPath)
                                const renamedPath = fileUtils.changeParentPath(item.path, oldPath, newPath)
                                @expr this._EditorComponent && this._EditorComponent.renamePath(item.path, renamedPath)
                else
                    @expr this._EditorComponent && this._EditorComponent.renamePath(oldPath, newPath)
        p _EditorComponent
            :any 
        p _showErrorPanel
            => 
                _ this.props.setPreferences
                    { 
                        @ panelType 'errors'
        p _togglePanels
            => 
                _ this.props.setPreferences
                    { 
                        @ panelsShown !this.props.preferences.panelsShown
        p _toggleFileTree
            => 
                _ this.props.setPreferences
                    { 
                        @ fileTreeShown !this.props.preferences.fileTreeShown
        p _toggleTheme
            => 
                _ this.props.setPreferences
                    { 
                        @ theme
                            iif this.props.preferences.theme === 'light'
                                then 'dark'
                                else 'light'
        p _toggleMarkdownPreview
            => 
                _ this.setState
                    => 
                        param state
                        (
                            { 
                                @ isMarkdownPreview !state.isMarkdownPreview
        m render
            const 
                { 
                    @ currentModal
                        #
                            # , currentBanner
                    @ isDownloading
                        #
                            # , currentBanner
                = this.state
            const 
                { 
                    @ classes
                    @ currentPacki
                    @ entry
                    @ saveHistory
                    @ saveStatus
                    @ loggedUser
                    @ jobError
                        # loadingMessage,
                    @ isWizziJobWaiting
                    @ onLoggedOn
                    @ onLoggedOff
                    @ onExecuteWizziJob
                    @ generatedArtifact
                        # params,

                    @ onSaveCode
                    @ preferences
                        # uploadFileAsync,
                = this.props
                # console.log('EditorView', generatedArtifact);
                # console.log('EditorView.currentPacki', currentPacki);
                # const annotations: Annotation[] = [];
                #
                    # 
                    # if (deviceError) {
                    # annotations.push(convertErrorToAnnotation(deviceError));
                    # }
                    # 
                # const hasPackiId = !!params.id;
                # const metadataName = isIntentionallyNamed(name) ? packiDefaults.DEFAULT_METADATA_NAME : name;
                #
                    # 
                    # const metadataName = name == packiDefaults.DEFAULT_PACKI_NAME ? packiDefaults.DEFAULT_METADATA_NAME : name;
                    # const metadataDescription =
                    # description === packiDefaults.DEFAULT_DESCRIPTION
                    # ? hasPackiId
                    # ? packiDefaults.DEFAULT_METADATA_DESCRIPTION_SAVED
                    # : packiDefaults.DEFAULT_METADATA_DESCRIPTION_EMPTY
                    # : description;
            const 
                { 
                    @ fileEntries
                = this.props
                # console.log('EditorView', generatedArtifact);
                # console.log('EditorView.currentPacki', currentPacki);
                # const annotations: Annotation[] = [];
                #
                    # 
                    # if (deviceError) {
                    # annotations.push(convertErrorToAnnotation(deviceError));
                    # }
                    # 
                # const hasPackiId = !!params.id;
                # const metadataName = isIntentionallyNamed(name) ? packiDefaults.DEFAULT_METADATA_NAME : name;
                #
                    # 
                    # const metadataName = name == packiDefaults.DEFAULT_PACKI_NAME ? packiDefaults.DEFAULT_METADATA_NAME : name;
                    # const metadataDescription =
                    # description === packiDefaults.DEFAULT_DESCRIPTION
                    # ? hasPackiId
                    # ? packiDefaults.DEFAULT_METADATA_DESCRIPTION_SAVED
                    # : packiDefaults.DEFAULT_METADATA_DESCRIPTION_EMPTY
                    # : description;
            if fileEntries.length == 0
                return 
                    h1 
                        + loading ...
            return 
                < ContentShell 
                    { 
                        iif this.state.loadedEditor
                            then null
                            else
                                < ProgressIndicator 
                    { 
                        # 
                            # <PageMetadata name={metadataName} description={metadataDescription} params={params} />
                    < React.Fragment 
                        < KeybindingsManager 
                            @ bindings {Shortcuts}
                            @ onTrigger
                                => 
                                    param type
                                    const commands
                                        :{ 
                                            :index 
                                                :union 
                                                    :paren 
                                                        :=> 
                                                            :void 
                                                    :null 
                                                param key
                                                    :string 
                                        =
                                            { 
                                                @ tree this._toggleFileTree
                                                    #
                                                        # 
                                                        # save:
                                                        # saveStatus === 'published'
                                                        # ? null
                                                        # : this.props.isResolving
                                                        # ? null
                                                        # : onPublishAsync,
                                                @ panels this._togglePanels
                                                @ shortcuts this._handleShowShortcuts
                                                    # format: this._prettier,
                                    const fn = commands[type]
                                    if fn
                                        _ fn()
                        < EditorToolbar 
                            @ creatorUsername {this.props.creatorUsername}
                                # name={name}
                                # description={description}
                            @ loggedUser {loggedUser}
                            @ currentPacki {currentPacki}
                            @ splitViewKind {this.state.splitViewKind}
                            @ saveHistory {saveHistory}
                            @ saveStatus {saveStatus}
                            @ isDownloading {isDownloading}
                                # isResolving={this.props.isResolving}
                            @ isEditModalVisible {currentModal === 'edit-info'}
                                # isResolving={this.props.isResolving}
                            @ isAuthModalVisible {currentModal === 'auth'}
                            @ isWizziJobWaiting {isWizziJobWaiting}
                            @ onChangeSplitViewKind {this._handleChangeSplitViewKind}
                            @ onLoggedOn {onLoggedOn}
                            @ onLoggedOff {onLoggedOff}
                            @ onShowPreviousSaves {this._handleShowPreviousSaves}
                            @ onShowEditModal {this._handleShowTitleDescriptionModal}
                            @ onDismissEditModal {this._handleDismissEditModal}
                                # onSubmitMetadata={this.props.onSubmitMetadata}
                            @ onShowAuthModal {this._handleShowAuthModal}
                                # onSubmitMetadata={this.props.onSubmitMetadata}
                            @ onDismissAuthModal {this._handleHideModal}
                            @ onExecuteWizziJob {onExecuteWizziJob}
                            @ onShowPackiManager {this._handleShowPackiManager}
                            @ onShowGithubCommit {this._handleShowGithubCommit}
                            @ onShowGithubCreate {this._handleShowGithubCreate}
                            @ onSaveCode {onSaveCode}
                                # onDownloadCode={handleDownloadCode}
                                # onPublishAsync={onPublishAsync}
                        div 
                            @ className {css(styles.editorAreaOuterWrapper)}
                            div 
                                @ className {css(styles.editorAreaOuter)}
                                < LayoutShell 
                                    < FileList 
                                        @ entries {fileEntries}
                                        @ visible {true}
                                        @ onEntriesChange {this.props.onFileEntriesChange}
                                        @ onRemoveFile
                                            => 
                                                param path
                                                    :string 
                                                + path
                                        @ onRenameFile
                                            => 
                                                param oldPath
                                                    :string 
                                                param newPath
                                                    :string 
                                                @expr oldPath && newPath
                                        @ uploadFileAsync
                                            => 
                                                param file
                                                    :ref File
                                                _ mockFn.promise
                                                    :param string
                                                    @ file
                                        @ onDownloadCode
                                            => 
                                                _ mockFn.promise
                                                    :param void
                                        @ hasSnackId {false}
                                        @ saveStatus {'changed'}
                                            # sdkVersion: SDKVersion;
                                            # theme={'light'}
                                        @ preventRedirectWarning
                                            => 
                                                + null
                                            # sdkVersion: SDKVersion;
                                            # theme={'light'}
                                    { 
                                        # 
                                            # Don't load it conditionally since we need the _EditorComponent object to be available
                                    { 
                                        && 
                                            + (this.state.splitViewKind == 'both' || this.state.splitViewKind == 'left')
                                            < LazyLoad 
                                                @ load
                                                    => 
                                                        :return
                                                            :ref Promise
                                                                :param 
                                                                    :typeof import('./MonacoEditor')
                                                        let timeout
                                                            :any 
                                                        const MonacoEditorPromise
                                                            _ import
                                                                @ './MonacoEditor'
                                                                    #
                                                                        # webpackPreload: true
                                                                ._ then
                                                                    => 
                                                                        param editor
                                                                        (
                                                                            { 
                                                                                @ editor
                                                                                @ type 'monaco'
                                                        return 
                                                            _ MonacoEditorPromise.then
                                                                => 
                                                                    { 
                                                                        @ editor
                                                                        @ type
                                                                        :any 
                                                                    _ this.setState
                                                                        { 
                                                                            @ loadedEditor type
                                                                    _ clearTimeout(timeout)
                                                                    return editor
                                                                ._ catch
                                                                    => 
                                                                        param err
                                                                        _ console.log(err)
                                                                        _ alert('Failed to load Monaco Editor. See console error.')
                                                { 
                                                    => 
                                                        { 
                                                            @ loaded
                                                            @ data Comp
                                                        set this._EditorComponent = Comp
                                                        if entry && entry.item.type === 'file'
                                                            if entry.item.asset
                                                                return 
                                                                    < AssetViewer 
                                                                        @ entry
                                                                            @expr
                                                                                ( 
                                                                                    + entry
                                                                                        :as 
                                                                                            :any 
                                                                                :as 
                                                                                    :ref filelistTypes.AssetFileEntry
                                                            const 
                                                                { 
                                                                    @ content
                                                                =
                                                                    @expr 
                                                                        ( 
                                                                            + entry
                                                                                :as 
                                                                                    :ref filelistTypes.TextFileEntry
                                                                        . item
                                                                # const isMarkdown = entry.item.path.endsWith('.md');
                                                            if loaded && Comp
                                                                return 
                                                                    < React.Fragment 
                                                                        < Comp 
                                                                            @ dependencies
                                                                                { 
                                                                                    #
                                                                                        # this.props.dependencies
                                                                                # sdkVersion={sdkVersion}
                                                                            @ entries {fileEntries}
                                                                                # sdkVersion={sdkVersion}
                                                                            @ autoFocus {!entry.state.isCreating}
                                                                            @ annotations {[]}
                                                                            @ path {entry.item.path}
                                                                            @ value {content}
                                                                            @ onValueChange {this.props.onChangeCode}
                                                                            @ onOpenPath {this._handleOpenPath}
                                                        else
                                                            return 
                                                                < NoFileSelected 
                                                        return 
                                                            < EditorShell 
                                    { 
                                        iif ((this.state.splitViewKind == 'both' || this.state.splitViewKind == 'right') && generatedArtifact) && generatedArtifact.artifactContent
                                            then
                                                < GeneratedView 
                                                    @ generatedContent {generatedArtifact.artifactContent}
                                                    @ generatedSourcePath {generatedArtifact.sourcePath}
                                                    @ splitViewKind {this.state.splitViewKind}
                                            else
                                                iif generatedArtifact && generatedArtifact.errorLines
                                                    then
                                                        < GenerationErrors 
                                                            @ errorName {generatedArtifact.errorName}
                                                            @ errorLines {generatedArtifact.errorLines}
                                                            @ errorMessage {generatedArtifact.errorMessage}
                                                            @ errorStack {generatedArtifact.errorStack}
                                                    else null
                                    { 
                                        iif jobError
                                            then
                                                < GenerationErrors 
                                                    @ errorName {jobError.errorName}
                                                    @ errorLines {[]}
                                                    @ errorMessage {jobError.errorMessage}
                                                    @ errorStack {jobError.errorStack}
                                            else null
                                { 
                                    iif preferences.panelsShown
                                        then
                                            < EditorPanels 
                                                @ onShowErrorPanel {this._showErrorPanel}
                                                    # annotations={annotations}
                                                @ onTogglePanels {this._togglePanels}
                                                @ panelType {preferences.panelType}
                                        else null
                        < EditorFooter 
                            @ loggedUid {preferences.loggedUid}
                                # loadingMessage={loadingMessage}
                                # annotations={annotations}
                            @ autoGenSingleDoc {preferences.autoGenSingleDoc}
                            @ autoExecJob {preferences.autoExecJob}
                            @ connectGithubRepos {preferences.connectGithubRepos}
                            @ trustLocalStorage {preferences.trustLocalStorage}
                            @ fileTreeShown {preferences.fileTreeShown}
                            @ panelsShown {preferences.panelsShown}
                            @ onToggleTheme {this._toggleTheme}
                            @ onTogglePanels {this._togglePanels}
                            @ onToggleFileTree {this._toggleFileTree}
                            @ onShowShortcuts {this._handleShowShortcuts}
                                # onPrettifyCode={this._prettier}
                            @ theme {this.props.preferences.theme}
                                # onPrettifyCode={this._prettier}
                        { 
                            && 
                                + loggedUser
                                < ModalDialog 
                                    @ title "Manage your packies"
                                    @ visible {currentModal === 'packi-manager'}
                                    @ onDismiss {this._handleHideModal}
                                    < PackiManager 
                                        @ onClose {this._handleHideModal}
                        < ModalDialog 
                            @ visible {currentModal === 'previous-saves'}
                            @ title "Previous saves"
                            @ onDismiss {this._handleHideModal}
                            < PreviousSaves 
                                @ saveHistory {saveHistory}
                        < ModalDialog 
                            @ title "Shortcuts"
                            @ visible {currentModal === 'shortcuts'}
                            @ onDismiss {this._handleHideModal}
                            < KeyboardShortcuts 
                        { 
                            && 
                                + currentPacki && currentPacki.localPackiData
                                < ModalDialog 
                                    @ title "Commit/push git package"
                                    @ visible {currentModal === 'github-commit'}
                                    @ onDismiss {this._handleHideModal}
                                    < EditorForm 
                                        @ title "Commit/push git package"
                                        @ action "Done"
                                        @ visible {true}
                                        @ onDismiss {this._handleHideModal}
                                        @ onSubmit
                                            => 
                                                param values
                                                _ alert(JSON.stringify(values))
                                                    # TODO this._handleCommitGitRepository(values['owner'], values['repoName'], values['branch']);
                                        @ fields
                                            { 
                                                { owner
                                                    @ type 'text'
                                                    @ label 'Owner'
                                                    @ default currentPacki.localPackiData.owner
                                                    @ onValidate packiValids.validatePackiName
                                                { repoName
                                                    @ type 'text'
                                                    @ label 'Repo'
                                                    @ default currentPacki.localPackiData.repoName
                                                    @ onValidate packiValids.validatePackiName
                                                { branch
                                                    @ type 'text'
                                                    @ label 'Branch'
                                                    @ default currentPacki.localPackiData.branch
                                                    @ onValidate packiValids.validatePackiName
                        { 
                            && 
                                + currentPacki && currentPacki.localPackiData
                                < ModalDialog 
                                    @ title "Create git package"
                                    @ visible {currentModal === 'github-create'}
                                    @ onDismiss {this._handleHideModal}
                                    < EditorForm 
                                        @ title "Create git package"
                                        @ action "Confirm"
                                        @ visible {currentModal === 'github-create'}
                                        @ onDismiss {this._handleHideModal}
                                        @ onSubmit
                                            => 
                                                param values
                                                _ alert(JSON.stringify(values))
                                                _ this._handleCreateGitRepository(values['owner'], values['repoName'], values['branch'])
                                        @ fields
                                            { 
                                                { owner
                                                    @ type 'text'
                                                    @ label 'Owner'
                                                    @ default currentPacki.localPackiData.owner
                                                    @ onValidate packiValids.validatePackiName
                                                { repoName
                                                    @ type 'text'
                                                    @ label 'Repo'
                                                    @ default currentPacki.localPackiData.repoName
                                                    @ onValidate packiValids.validatePackiName
                                                { branch
                                                    @ type 'text'
                                                    @ label 'Branch'
                                                    @ default currentPacki.localPackiData.branch
                                                    @ onValidate packiValids.validatePackiName
        # const BANNER_TIMEOUT_SHORT = 1500;
        # const BANNER_TIMEOUT_LONG = 5000;
    const c = prefColors.c
    const styles
        _ StyleSheet.create
            { 
                { editorAreaOuter
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'column'
                    @ minWidth 0
                    @ minHeight 0
                    @ height '100%'
                { editorAreaOuterWrapper
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'row'
                    @ minHeight 0
                    @ minWidth 0
                    @ marginTop '12px'
                    @ marginLeft '72px'
                    @ height '100%'
    const muiStyles
        => 
            param theme
                :ref Theme
            _ createStyles
                { 
                    { drawerPaper
                        @ top 0
                            # 'auto'
    const StyledComp = withStyles(muiStyles)(EditorView)
    export-default withPreferences(StyledComp)
*$