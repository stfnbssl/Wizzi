module
    $
        var ctrl = {
            name: 'Packi',
            path: '/packi'
        }    

    controller( &ctrl )

        $append imports
            import 
                @ StyleSheetServer
                from 'aphrodite'
            import 
                @ Provider
                from 'react-redux'
            import 
                @ StaticRouter
                from 'react-router-dom'
            import fetch from 'node-fetch'
            import 
                as React
                from 'react'
            import ReactDOMServer from 'react-dom/server'
            import 
                @ PreferencesProvider 
                from '../../../client/features/preferences/'
            import 
                @ SavedPacki
                @ QueryParams
                @ RouterData
                @ PackiDefaults
                from '../../../client/features/packi/'
            import ClientRouter 
                from '../../../client/components/Router'
            import ThemeProvider 
                from '../../../client/components/ThemeProvider'
            $if wzCtx.Build.useExpo
                import getSplitTests from './utils/getSplitTests'
            import
                @ __INITIAL_DATA__
                @ __TEST_LOGGED_USER__
                from '../../../client/initialData'
            import createStore from '../../../client/store/createStore'
            import Document from '../pages/Document'
            function Hello
                return
                    div
                        h1 Server rendered
                        h3 Hello world

        _ this.router.get('/:@username/:projectName', this.index)
        _ this.router.get('/:id', this.index)
        _ this.router.get('*', this.index)

        $append handlers
            handler( index )
                const id
                    iif request.params
                        then
                            iif request.params.id
                                then request.params.id
                                else
                                    iif request.params.username && request.params.projectName
                                        then
                                            `lit 
                                                + @
                                                @ request.params.username
                                                + /
                                                _ encodeURIComponent(request.params.projectName)
                                                + 
                                        else undefined
                        else undefined
                log 'packi.index.handler', 'id', id
                $if wzCtx.Build.useExpo
                    const splitTestSettings
                        await 
                            _ getSplitTests(ctx)
                $else
                    const splitTestSettings = __INITIAL_DATA__.splitTestSettings
                let data
                    :ref RouterData
                let queryParams
                    :ref QueryParams
                    = request.query
                const defaults
                    :ref PackiDefaults
                    =
                        { 
                            $$ TODO @ name getPackiName()
                            @ name 'TODO'
                            $if wzCtx.Build.useExpo
                                @ channel createChannel()
                log 'packi.index.handler', 'defaults', defaults
                $if wzCtx.Build.useExpo
                    const expoSession
                        _ request.cookies.get
                            `lit 
                                _ getAuthStorageKey()
                                + .sessionSecret
                if id
                    try 
                        const response
                            await 
                                _ fetch
                                    `lit 
                                        @ process.env.API_SERVER_URL
                                        + /api/v1/packi/
                                        @ encodeURIComponent(id)
                                        + 
                                    { 
                                        { headers
                                            $if wzCtx.Build.useExpo
                                                @ 'Snack-Api-Version' '3.0.0'
                                                ... 
                                                    ( 
                                                        iif expoSession
                                                            then
                                                                { 
                                                                    @ 'expo-session' decodeURIComponent(expoSession)
                                                            else
                                                                { 
                        const text
                            await 
                                _ response.text()
                        const json = JSON.parse(text)
                        if json.errors?.length
                            set data =
                                { 
                                    @ type 'error'
                                    { error
                                        @ message 'Server returned errors when fetching data'
                                    @ defaults
                        else
                            set data =
                                { 
                                    @ type 'success'
                                    @ packi json.packi as SavedPacki
                                    $if wzCtx.Build.useExpo
                                        @ dependencies standardizeDependencies(json.packi.dependencies)
                                            # Convert dependencies from V1 and V2 formats to the latest format
                                    @ defaults
                    catch error
                        set data =
                            { 
                                @ type 'error'
                                { error
                                    @ message error.message
                                @ defaults
                    log 'packi.index.handler', 'data', data
                else
                    if request.body
                        set queryParams =
                            { 
                                @ ...request.body
                                @ ...queryParams
                    set data =
                        { 
                            @ type 'success'
                            @ defaults
                    log 'packi.index.handler', 'data', data
                const store
                    _ createStore
                        { 
                            { app
                                @ loggedUser __TEST_LOGGED_USER__.loggedUser
                            { packi
                                @ loading false
                            { wizzi
                                @ loading false
                                @ jobError undefined
                                @ generatedArtifact undefined
                                { jobGeneratedArtifacts
                                { timedServices
                            @ splitTestSettings
                            @ viewer null
                const context
                    :{ 
                        :p url
                            :optional 
                            :string 
                    =
                        { 
                const cookies
                    { 
                        @ get
                            => 
                                param key
                                    :string 
                                const result = request.cookies.get(key)
                                if result
                                    return decodeURIComponent(result)
                                return result
                $if wzCtx.Build.useExpo
                    const isEmbedded = request.url.replace(/^\//, '').split('/')[0].split('?')[0] === 'embedded'
                const userAgent = request.headers['user-agent']
                const index
                    op+ 
                        + '<!DOCTYPE html>'
                        _ ReactDOMServer.renderToStaticMarkup
                            < Document
                                @ id {id}
                                $if wzCtx.Build.useExpo
                                    @ isEmbedded {isEmbedded}
                                    @ isAuthenticated {!!expoSession}
                                    @ splitTestSettings {splitTestSettings}
                                @ data {data}
                                @ queryParams {queryParams}
                                @ content
                                    _ StyleSheetServer.renderStatic
                                        => 
                                            return 
                                                _ ReactDOMServer.renderToString
                                                    < React.Fragment
                                                        < Provider 
                                                            @ store {store}
                                                            < PreferencesProvider 
                                                                @ cookies {cookies}
                                                                @ queryParams {queryParams}
                                                                < ThemeProvider 
                                                                    < StaticRouter 
                                                                        @ location {request.url}
                                                                        @ context {context}
                                                                        < ClientRouter 
                                                                            @ data {data}
                                                                            @ queryParams {queryParams}
                                                                            @ userAgent {userAgent}
                _ sendHtml
                    @ response
                    @ index