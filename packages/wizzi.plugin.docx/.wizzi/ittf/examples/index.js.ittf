module
    kind es6
    $
        var md = {
            name: 'sample',
        };
    
    v08/examples/plugin(&md)
        $append imports
            var wizziTools = require('wizzi-tools')

        $override requireWizzi
            var wizzi = require('../../../wizzi/dist/index')

        $append plugins
            [ items
                $$ @ './index.js'
                @ './wizzi.plugin.docx/dist/index.js'
                @ './wizzi-core/dist/index.js'
            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'
                    @ '..'
                    @ '..'
        _ executeGenerateModules
            [
                @ 'first'
            f_cb_no_throw( result )
                if err
                    log 'sample.examples.executeGenerateModules.err', err
                    log 'sample.examples.executeGenerateModules.err.toString()', err.toString()
                    if err.inner
                        log 'sample.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                else
                    log 'sample.examples.executeGenerateModules.result', result
        function executeGenerateModules
            param modules
            param callback

            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback
                    var context
                        _ file.readJSON
                            _ path.join
                                @ __dirname
                                @ 'ittf'
                                @ module + '.sample.json'
                    _ context.items.sort(sortItems)
                    # log 'context', context
                    _ transformContext
                        @ context
                        f_cb( context )
                            # log 'context', context
                            var ittfDocumentUri
                                _ path.join
                                    @ __dirname
                                    @ 'ittf'
                                    @ module + '.sample.ittf'
                            var outputPath
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ module + '.sample.js'
                            var outputPathJson
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ module + '.sample.json'
                            var outputPathDebugTxt
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ module + '.sample.debug.txt'
                            _ loadMTreeDebugInfo
                                @ ittfDocumentUri
                                {
                                    @ beba context
                                f_cb( debugInfo )
                                    log 'debugInfo', debugInfo
                                    _ file.write
                                        @ outputPathDebugTxt
                                        @ debugInfo.mTreeBuildUpScript
                                    _ loadModelAndGenerateArtifact
                                        @ ittfDocumentUri
                                        {
                                            @ beba context
                                        @ 'sample/document'
                                        f_cb( artifactText )
                                            _ file.write
                                                @ outputPath
                                                @ artifactText
                                            _ file.write
                                                @ outputPathJson
                                                _ stringify
                                                    @ context
                                                    @ null
                                                    @ 4
                                            r_cb( artifactText )
                @ callback
            
        function transformContext
            param beba
            param callback
            
            _ async.mapSeries
                @ beba.items
                =>
                    param item
                    param callback
                    _ wizziTools.htmlwizzifier.getWizziIttf
                        @ item.Testo
                        {
                        f_cb_throw( ittf )
                            # log 'transformBeba', ittf
                            _ loadModelAndGenerateArtifactFromText
                                @ ittf
                                {
                                @ 'ittf/tojson'
                                a_cb( artifactText )
                                    # log 'transformBeba to json', artifactText
                                    log 'transformBeba.item.NWS_FK_TNW_ID', item.NWS_FK_TNW_ID
                                    set item.TestoJson = JSON.parse(artifactText)
                                    r_cb( artifactText )
                f_cb()
                    r_cb(beba)

        function sortItems
            param a
            param b
            var num_a = a.NWS_FK_TNW_ID
            var num_b = b.NWS_FK_TNW_ID
            log "sortItems", num_a, num_b
            if num_a > num_b
                return -1
            elif num_b > num_a
                return 1
            else
                return 0

