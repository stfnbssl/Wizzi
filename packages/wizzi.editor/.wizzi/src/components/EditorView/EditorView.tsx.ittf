module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import debounce from 'lodash/debounce'
    import 
        as React
        from 'react'
    import 
        @ connect
        from 'react-redux'
    import 
        @ SDKVersion
        @ PackiFiles
        from '../../features/packi'
    $if wzCtx.Build.usePackiAspects        
        import 
            @ GeneratedArtifact
            @ JobError
            from '../../features/wizzi'
        import
            @ LoggedUser
            from '../../features/app'
    import 
        @ Viewer
        from '../../features/account'
    import 
        @ Annotation
        from '../../features/annotations'
    $if wzCtx.Build.useExpo 
        import Analytics from '../utils/Analytics'
    import 
        @ isScript
        @ isJson
        @ isTest
        from '../../features/file/index'
    $if wzCtx.Build.useExpo 
        import lintFile from '../../features/lint/index'
        import prettierCode from '../../features/prettier/index'
        import AssetViewer from './AssetViewer'
        import 
            @ withDependencyManager
            from './DependencyManager'
    import 
        @ EditorProps
        from '../Editor/EditorProps'
    import EditorFooter from './EditorFooter'
    import EditorPanels from './EditorPanels'
    import EditorToolbar from './EditorToolbar'
    import 
        @ EditorViewProps
            as BaseEditorViewProps
        from './EditorViewProps'
    import FileList from '../FileList/FileList'
    $if wzCtx.Build.useExpo 
        import ImportProductionModal from './Import/ImportProductionModal'
        import ImportRepoModal from './Import/ImportRepoModal'
    import KeyboardShortcuts
        @ Shortcuts
        from './KeyboardShortcuts'
    import NoFileSelected from './NoFileSelected'
    import PageMetadata from '../PageMetadata'
    
    :import-type
        @ PanelType
        from '../../features/preferences/index'
    
    import
        @ withPreferences
        @ PreferencesContextType
        from '../../features/preferences/index'
    
    $if wzCtx.Build.useExpo 
        import PreviousSaves from './PreviousSaves'
    
    import PublishManager
        @ PublishModals
        from '../Publish/PublishManager'
    
    # from shell
    import 
        @ ContentShell 
        from '../shell/ContentShell'
    import 
        @ EditorShell 
        from '../shell/EditorShell'
    import 
        @ LayoutShell 
        from '../shell/LayoutShell'
    
    import 
        @ c
        @ s
        from '../ThemeProvider'
    
    # from widgets
    import Banner from '../widgets/Banner'
    import KeybindingsManager from '../widgets/KeybindingsManager'
    import LazyLoad from '../widgets/LazyLoad'
    import 
        @ ModalDialog 
        from '../widgets/ModalDialog'
    import 
        @ ProgressIndicator 
        from '../widgets/ProgressIndicator'
    $if wzCtx.Build.usePackiAspects
        +
        import PackiManagerContainer
            from '../Packi/PackiManagerContainer'
        import GeneratedView from './GeneratedView'
        import GenerationErrors from './GenerationErrors'
    +
    const EDITOR_LOAD_FALLBACK_TIMEOUT = 3000
    +
    export 
        :type EditorViewProps
            :intersect 
                :ref PreferencesContextType
                :ref BaseEditorViewProps
                :{ 
                    :p viewer
                        :optional 
                        :ref Viewer
                :{ 
                    :p loggedUser
                        :optional 
                        :ref LoggedUser


    :type ModalName
        :union 
            $if wzCtx.Build.useOk
                :ref PublishModals
            $if wzCtx.Build.usePackiAspects 
                :literal 'auth'
                :literal 'packi-manager'
                :literal 'github-commit'
                :literal 'github-create'
            :literal 'edit-info'
            :literal 'shortcuts'
            :literal 'previous-saves'
            :literal 'import-repo'
            :literal 'import-production'
    :type BannerName
        :union 
            :literal 'connected'
            :literal 'disconnected'
            :literal 'reconnect'
            :literal 'autosave-disabled'
            $if wzCtx.Build.useExpo 
                :literal 'sdk-upgraded'
            :literal 'export-unavailable'
            :literal 'slow-connection'
    $if wzCtx.Build.usePackiAspects
        :type SplitViewKind
            :union 
                :literal 'left'
                :literal 'right'
                :literal 'both'
    :type State
        :{ 
            :p currentModal
                :union 
                    :ref ModalName
                    :null 
            :p currentBanner
                :union 
                    :ref BannerName
                    :null 
            :p loadedEditor
                :union 
                    :literal 'monaco'
                    :literal 'simple'
                    :null 
            :p isMarkdownPreview
                :boolean 
            :p shouldPreventRedirectWarning
                :boolean 
            $if wzCtx.Build.usePackiAspects
                :p isDownloading
                    :boolean 
                :p splitViewKind
                    :ref SplitViewKind
    const BANNER_TIMEOUT_SHORT = 1500
    const BANNER_TIMEOUT_LONG = 5000
    class EditorViewComp
        super React.Component
            :param 
                :ref EditorViewProps
            :param 
                :ref State
        p state
            :ref State
            { 
                @ currentModal null
                @ currentBanner null
                @ loadedEditor null
                @ isMarkdownPreview true
                @ shouldPreventRedirectWarning false
                $if wzCtx.Build.usePackiAspects
                    @ isDownloading false
                    @ splitViewKind
                        + 'both'
                            :as 
                                :ref SplitViewKind
        +
        m getDerivedStateFromProps
            static
            param props
                :ref EditorViewProps
            param state
                :ref State
            const 
                { 
                    @ selectedFile
                    @ files
                = props
            let newState
                :any 
                = null
                # When an empty markdown file is opened, switch to edit mode
            if state.isMarkdownPreview && selectedFile.endsWith('.md') && !files[selectedFile]?.contents
                set newState =
                    || 
                        + newState
                        { 
                set newState.isMarkdownPreview = false
            return newState
        m componentDidMount
            _ window.addEventListener('beforeunload', this._handleUnload)
            $if wzCtx.Build.useExpo 
                if this.props.wasUpgraded
                    _ this._showBanner('sdk-upgraded', BANNER_TIMEOUT_LONG)
        +
        m componentDidUpdate
            param prevProps
                :ref EditorViewProps
            if prevProps.autosaveEnabled !== this.props.autosaveEnabled && !this.props.autosaveEnabled
                _ this._showBanner('autosave-disabled', BANNER_TIMEOUT_LONG)
        +
        m componentWillUnmount
            _ window.removeEventListener('beforeunload', this._handleUnload)
        +
        => _handleUnload
            param e
                :any 
            const isUnsaved = this.props.saveStatus === 'edited' || this.props.saveStatus === 'publishing' || this.props.saveStatus === 'saving-draft'
            if !isUnsaved || this.state.shouldPreventRedirectWarning
                _ this._allowRedirectWarning()
                return 
            const message = 'You have unsaved changes. Are you sure you want to leave this page?'
            set e.returnValue = message
            return message
        => _showBanner
            param name
                :ref BannerName
            param duration
                :number 
            _ this.setState
                { 
                    @ currentBanner name
            _ setTimeout
                => 
                    _ this.setState
                        => 
                            param state
                            ( 
                                iif state.currentBanner === name
                                    then
                                        { 
                                            @ currentBanner null
                                    else state
                        # @ts-ignore
                @ duration
        $if wzCtx.Build.usePackiAspects
            +
            p _handleChangeSplitViewKind
                => 
                    param e
                        :any
                    _ this.setState
                        { 
                            @ splitViewKind
                                @expr e.target.value
                                    :as 
                                        :ref SplitViewKind
        +
        => _handleDismissEditModal
            $if wzCtx.Build.useExpo 
                _ Analytics.getInstance().logEvent
                    @ 'DISMISSED_AUTH_MODAL'
                    { 
                        @ currentModal this.state.currentModal
            _ this.setState
                { 
                    @ currentModal null
        => _handleShowTitleDescriptionModal
            _ this.setState
                { 
                    @ currentModal 'edit-info'
        $if wzCtx.Build.usePackiAspects
            p _handleShowPackiManager
                => 
                    _ this.setState
                        { 
                            @ currentModal 'packi-manager'
        $if wzCtx.Build.usePackiAspectsGithub
            p _handleShowGithubCommit
                => 
                    _ this.setState
                        { 
                            @ currentModal 'github-commit'
            p _handleShowGithubCreate
                => 
                    _ this.setState
                        { 
                            @ currentModal 'github-create'
        p _handleShowAuthModal
            => 
                _ this.setState
                    { 
                        @ currentModal 'auth'
        
        
        => _handleShowShortcuts
            _ this.setState
                { 
                    @ currentModal 'shortcuts'
        $if wzCtx.Build.useExpo 
            => _handleShowPreviousSaves
                _ this.setState
                    { 
                        @ currentModal 'previous-saves'
        => _handleShowImportRepoModal
            _ this.setState
                { 
                    @ currentModal 'import-repo'
        => _handleShowImportProductionModal
            _ this.setState
                { 
                    @ currentModal 'import-production'
        => _handleHideModal
            _ this.setState
                { 
                    @ currentModal null
        => _handleShowModal
            param name
                :any 
            _ this.setState
                { 
                    @ currentModal name
        => _handleRemoveFile
            param path
                :string 
            _ this._EditorComponent?.removePath?.(path)
        => _handleRenameFile
            param oldPath
                :string 
            param newPath
                :string 
            _ this._EditorComponent?.renamePath?.(oldPath, newPath)
        p _EditorComponent
            :any 
        => _showErrorPanel
            _ this.props.setPreferences
                { 
                    @ panelType 'errors'
        => _togglePanels
            param panelType
                :ref PanelType
                :optional 
            _ this.props.setPreferences
                { 
                    @ panelsShown !this.props.preferences.panelsShown
                    @ panelType
                        iif panelType && !this.props.preferences.panelsShown
                            then panelType
                            else this.props.preferences.panelType
        => _toggleFileTree
            _ this.props.setPreferences
                { 
                    @ fileTreeShown !this.props.preferences.fileTreeShown
        => _toggleTheme
            _ this.props.setPreferences
                { 
                    @ theme
                        iif this.props.preferences.theme === 'light'
                            then 'dark'
                            else 'light'
        => _toggleMarkdownPreview
            _ this.setState
                => 
                    param state
                    (
                        { 
                            @ isMarkdownPreview !state.isMarkdownPreview
        => _preventRedirectWarning
            _ this.setState
                { 
                    @ shouldPreventRedirectWarning true
        => _allowRedirectWarning
            _ this.setState
                { 
                    @ shouldPreventRedirectWarning false
        m render
            const 
                { 
                    @ currentModal
                    @ currentBanner
                    $if wzCtx.Build.usePackiAspects
                        @ isDownloading
                = this.state
            const 
                { 
                    @ id
                    @ createdAt
                    @ saveHistory
                    @ saveStatus
                    @ viewer
                    @ packierURL
                    @ files
                    @ selectedFile
                    @ dependencies
                    $if wzCtx.Build.useExpo 
                        @ isResolving
                    @ sendCodeOnChangeEnabled
                    @ sdkVersion
                    $if wzCtx.Build.useExpo 
                        @ isLocalWebPreview
                    @ userAgent
                    @ onSendCode
                    $if wzCtx.Build.useExpo 
                        @ onReloadPacki
                    @ onToggleSendCode
                    @ onTogglePreview
                    @ uploadFileAsync
                    @ preferences
                    @ name
                    @ description
                    @ previewRef
                    @ previewURL
                    @ previewShown
                    $if wzCtx.Build.usePackiAspects
                        @ loggedUser
                        @ onLoggedOn
                        @ onLoggedOff
                        @ currentPacki
                        @ onExecuteWizziJob
                        @ generatedArtifact
                        @ jobError
                        @ isWizziJobWaiting
                        @ onSaveCode
                = this.props
            const annotations = this.props.annotations
            const testPreviewURL
                `lit
                    @ process.env.API_SERVER_URL
                    + /api/v1/packi/render/
                    @ encodeURIComponent('guest/test')
                    + /
                    @ encodeURIComponent(selectedFile)
            return 
                < ContentShell 
                    { 
                        iif this.state.loadedEditor
                            then null
                            else
                                < ProgressIndicator 
                    < PageMetadata 
                        @ name {name}
                        @ description {description}
                        @ id {id}
                    < PublishManager 
                        @ id {id}
                        @ sdkVersion {sdkVersion}
                        @ name {name}
                        @ description {description}
                        @ onSubmitMetadata {this.props.onSubmitMetadata}
                        @ onPublishAsync {this.props.onPublishAsync}
                        @ onShowModal {this._handleShowModal}
                        @ onHideModal {this._handleHideModal}
                        @ currentModal {currentModal}
                        { 
                            => 
                                { 
                                    @ onPublishAsync
                                return 
                                    < React.Fragment
                                        < KeybindingsManager 
                                            @ bindings {Shortcuts}
                                            @ onTrigger
                                                => 
                                                    param type
                                                    const commands
                                                        :{ 
                                                            :index 
                                                                :union 
                                                                    :paren 
                                                                        :=> 
                                                                            :void 
                                                                    :null 
                                                                param key
                                                                    :string 
                                                        =
                                                            { 
                                                                @ save
                                                                    iif saveStatus === 'published'
                                                                        then null
                                                                        $if wzCtx.Build.useExpo 
                                                                            else
                                                                                iif this.props.isResolving
                                                                                    then null
                                                                                    else onPublishAsync
                                                                        $else
                                                                            else onPublishAsync
                                                                @ tree this._toggleFileTree
                                                                @ panels this._togglePanels
                                                                @ shortcuts this._handleShowShortcuts
                                                                @ update onSendCode
                                                    const fn = commands[type]
                                                    if fn
                                                        _ fn()
                                        < EditorToolbar 
                                            @ name {name}
                                            @ description {description}
                                            @ createdAt {createdAt}
                                            @ saveHistory {saveHistory}
                                            @ saveStatus {saveStatus}
                                            @ viewer {viewer}
                                            $if wzCtx.Build.useExpo 
                                                @ isResolving {isResolving}
                                            @ isEditModalVisible {currentModal === 'edit-info'}
                                            $if wzCtx.Build.usePackiAspects
                                                @ loggedUser {loggedUser}
                                                @ isWizziJobWaiting {isWizziJobWaiting}
                                                @ onChangeSplitViewKind {this._handleChangeSplitViewKind}
                                                $$
                                                @ creatorUsername {this.props.creatorUsername}
                                                    # name={name}
                                                    # description={description}
                                                @ currentPacki {currentPacki}
                                                @ splitViewKind {this.state.splitViewKind}
                                                $$ @ saveHistory {saveHistory}
                                                $$ @ saveStatus {saveStatus}
                                                @ isDownloading {isDownloading}
                                                @ isAuthModalVisible {currentModal === 'auth'}
                                                $$ @ onShowPreviousSaves {this._handleShowPreviousSaves}
                                                @ onLoggedOn {onLoggedOn}
                                                @ onLoggedOff {onLoggedOff}
                                                @ onShowEditModal {this._handleShowTitleDescriptionModal}
                                                @ onDismissEditModal {this._handleDismissEditModal}
                                                $if wzCtx.Build.usePackiAspectsAuth
                                                    @ onShowAuthModal {this._handleShowAuthModal}
                                                    @ onDismissAuthModal {this._handleHideModal}
                                                @ onExecuteWizziJob {onExecuteWizziJob}
                                                @ onShowPackiManager {this._handleShowPackiManager}
                                                $if wzCtx.Build.usePackiAspectGithub
                                                    @ onShowGithubCommit {this._handleShowGithubCommit}
                                                    @ onShowGithubCreate {this._handleShowGithubCreate}
                                                @ onSaveCode {onSaveCode}
                                            $if wzCtx.Build.useExpo 
                                                @ onShowPreviousSaves {this._handleShowPreviousSaves}
                                            @ onSubmitMetadata {this.props.onSubmitMetadata}
                                            @ onDownloadCode {this.props.onDownloadAsync}
                                            @ onPublishAsync {onPublishAsync}
                                        div 
                                            @ className {css(styles.editorAreaOuterWrapper)}
                                            div 
                                                @ className {css(styles.editorAreaOuter)}
                                                < LayoutShell 
                                                    < FileList 
                                                        @ annotations {annotations}
                                                        @ visible {preferences.fileTreeShown}
                                                        @ files {files}
                                                        @ selectedFile {selectedFile}
                                                        @ updateFiles {this.props.updateFiles}
                                                        @ onSelectFile {this.props.onSelectFile}
                                                        @ onRemoveFile {this._handleRemoveFile}
                                                        @ onRenameFile {this._handleRenameFile}
                                                        @ uploadFileAsync {uploadFileAsync}
                                                        @ onDownloadCode {this.props.onDownloadAsync}
                                                        @ onImportRepo {this._handleShowImportRepoModal}
                                                        @ onImportProduction {this._handleShowImportProductionModal}
                                                        $if wzCtx.Build.useExpo 
                                                            @ hasPackiId {!!id}
                                                        @ saveStatus {saveStatus}
                                                        @ sdkVersion {sdkVersion}
                                                    { 
                                                        && 
                                                            + (this.state.splitViewKind == 'both' || this.state.splitViewKind == 'left')
                                                            < LazyLoad 
                                                                @ load
                                                                    async=> 
                                                                        :return
                                                                            :ref Promise
                                                                                :param 
                                                                                    :{ 
                                                                                        :p default
                                                                                            :ref React.ComponentType
                                                                                                :param 
                                                                                                    :ref EditorProps
                                                                        $if wzCtx.Build.useMonacoEditor
                                                                            let timeout
                                                                                :any 
                                                                            const MonacoEditorPromise
                                                                                _ import
                                                                                    @ '../Editor/MonacoEditor'
                                                                                        #
                                                                                            # webpackPreload: true
                                                                                    ._ then
                                                                                        => 
                                                                                            param editor
                                                                                            (
                                                                                                { 
                                                                                                    @ editor
                                                                                                    @ type 'monaco'
                                                                                # Fallback to simple editor if monaco editor takes too long to load
                                                                            const SimpleEditorPromise
                                                                                new Promise
                                                                                    => 
                                                                                        param resolve
                                                                                        param reject
                                                                                        set timeout =
                                                                                            _ setTimeout
                                                                                                => 
                                                                                                    _ this._showBanner('slow-connection', BANNER_TIMEOUT_LONG)
                                                                                                    _ import
                                                                                                        @ '../Editor/SimpleEditor'
                                                                                                        ._ then
                                                                                                            @ resolve
                                                                                                            @ reject
                                                                                                @ EDITOR_LOAD_FALLBACK_TIMEOUT
                                                                                    ._ then
                                                                                        => 
                                                                                            param editor
                                                                                            (
                                                                                                { 
                                                                                                    @ editor
                                                                                                    @ type 'simple'
                                                                                # Fallback to simple editor if monaco editor takes too long to load
                                                                            return 
                                                                                _ Promise.race
                                                                                    [ 
                                                                                        _ MonacoEditorPromise.catch
                                                                                            => 
                                                                                                + SimpleEditorPromise
                                                                                        @ SimpleEditorPromise
                                                                                    ._ then
                                                                                        => 
                                                                                            { 
                                                                                                @ editor
                                                                                                @ type
                                                                                                :any 
                                                                                            _ this.setState
                                                                                                { 
                                                                                                    @ loadedEditor type
                                                                                            _ clearTimeout(timeout)
                                                                                            return editor
                                                                        $else
                                                                            const editor
                                                                                await 
                                                                                    _ import
                                                                                        @ '../Editor/SimpleEditor'
                                                                                # Monaco doesn't work great on mobile`
                                                                                # Use simple editor for better experience
                                                                            _ this.setState
                                                                                { 
                                                                                    @ loadedEditor 'simple'
                                                                            return editor
                                                                { 
                                                                    => 
                                                                        { 
                                                                            @ loaded
                                                                            @ data Comp
                                                                        set this._EditorComponent = Comp
                                                                        const file = files[selectedFile]
                                                                        if file
                                                                            $if wzCtx.Build.useExpo 
                                                                                if file.type === 'ASSET'
                                                                                    return 
                                                                                        < AssetViewer 
                                                                                            @ selectedFile {selectedFile}
                                                                                            @ files {files}
                                                                            const 
                                                                                { 
                                                                                    @ contents
                                                                                = file
                                                                            const isMarkdown = selectedFile.endsWith('.md')
                                                                            if isMarkdown && this.state.isMarkdownPreview
                                                                                return 
                                                                                    < React.Fragment
                                                                                        < LazyLoad 
                                                                                            @ load
                                                                                                => 
                                                                                                    _ import
                                                                                                        @ '../Markdown/MarkdownPreview'
                                                                                            { 
                                                                                                => 
                                                                                                    { 
                                                                                                        @ loaded mdLoaded
                                                                                                        @ data MarkdownPreview
                                                                                                    if mdLoaded && MarkdownPreview
                                                                                                        return 
                                                                                                            < MarkdownPreview 
                                                                                                                @ source {contents as string}
                                                                                                    return 
                                                                                                        < EditorShell 
                                                                                        button 
                                                                                            @ className {css(styles.previewToggle)}
                                                                                            @ onClick {this._toggleMarkdownPreview}
                                                                                            svg 
                                                                                                @ width "12px"
                                                                                                @ height "12px"
                                                                                                @ viewBox "0 0 18 18"
                                                                                                @ className {css(styles.previewToggleIcon)}
                                                                                                g 
                                                                                                    @ transform "translate(-147.000000, -99.000000)"
                                                                                                    g 
                                                                                                        @ transform "translate(144.000000, 96.000000)"
                                                                                                        path 
                                                                                                            @ d "M3,17.25 L3,21 L6.75,21 L17.81,9.94 L14.06,6.19 L3,17.25 L3,17.25 Z M20.71,7.04 C21.1,6.65 21.1,6.02 20.71,5.63 L18.37,3.29 C17.98,2.9 17.35,2.9 16.96,3.29 L15.13,5.12 L18.88,8.87 L20.71,7.04 L20.71,7.04 Z"
                                                                            if loaded && Comp
                                                                                return 
                                                                                    $$ < React.Fragment
                                                                                    div
                                                                                        @ className {css(styles.editorComponentOuter)}
                                                                                        < Comp 
                                                                                            @ className {css(styles.editorComponent)}
                                                                                            @ dependencies {dependencies}
                                                                                            @ sdkVersion {sdkVersion}
                                                                                            @ selectedFile {selectedFile}
                                                                                            @ files {files}
                                                                                            @ autoFocus {!/Untitled file.*\.(js|tsx?)$/.test(selectedFile)}
                                                                                            @ annotations {annotations}
                                                                                            @ updateFiles {this.props.updateFiles}
                                                                                            @ onSelectFile {this.props.onSelectFile}
                                                                                            @ lineNumbers undefined
                                                                                        { 
                                                                                            iif isMarkdown
                                                                                                then
                                                                                                    button 
                                                                                                        @ className {css(styles.previewToggle)}
                                                                                                        @ onClick {this._toggleMarkdownPreview}
                                                                                                        svg 
                                                                                                            @ width "16px"
                                                                                                            @ height "12px"
                                                                                                            @ viewBox "0 0 22 16"
                                                                                                            @ className {css(styles.previewToggleIcon)}
                                                                                                            g 
                                                                                                                @ transform "translate(-145.000000, -1156.000000)"
                                                                                                                g 
                                                                                                                    @ transform "translate(144.000000, 1152.000000)"
                                                                                                                    path 
                                                                                                                        @ d "M12,4.5 C7,4.5 2.73,7.61 1,12 C2.73,16.39 7,19.5 12,19.5 C17,19.5 21.27,16.39 23,12 C21.27,7.61 17,4.5 12,4.5 L12,4.5 Z M12,17 C9.24,17 7,14.76 7,12 C7,9.24 9.24,7 12,7 C14.76,7 17,9.24 17,12 C17,14.76 14.76,17 12,17 L12,17 Z M12,9 C10.34,9 9,10.34 9,12 C9,13.66 10.34,15 12,15 C13.66,15 15,13.66 15,12 C15,10.34 13.66,9 12,9 L12,9 Z"
                                                                                                else null
                                                                        else
                                                                            return 
                                                                                < NoFileSelected 
                                                                        return 
                                                                            < EditorShell 
                                                    $if wzCtx.Build.usePackiAspects
                                                        { 
                                                            iif ((this.state.splitViewKind == 'both' || this.state.splitViewKind == 'right') && generatedArtifact) && generatedArtifact.artifactContent
                                                                then
                                                                    < GeneratedView 
                                                                        @ generatedContent {generatedArtifact.artifactContent}
                                                                        @ generatedSourcePath {generatedArtifact.sourcePath}
                                                                        @ generatedPreviewURL {testPreviewURL}
                                                                        @ splitViewKind {this.state.splitViewKind}
                                                                else
                                                                    iif generatedArtifact && generatedArtifact.errorLines
                                                                        then
                                                                            < GenerationErrors 
                                                                                @ errorName {generatedArtifact.errorName}
                                                                                @ errorLines {generatedArtifact.errorLines}
                                                                                @ errorMessage {generatedArtifact.errorMessage}
                                                                                @ errorStack {generatedArtifact.errorStack}
                                                                        else null
                                                        { 
                                                            iif jobError
                                                                then
                                                                    < GenerationErrors 
                                                                        @ errorName {jobError.errorName}
                                                                        @ errorLines {[]}
                                                                        @ errorMessage {jobError.errorMessage}
                                                                        @ errorStack {jobError.errorStack}
                                                                else null

                                                { 
                                                    iif preferences.panelsShown
                                                        then
                                                            < EditorPanels 
                                                                @ annotations {annotations}
                                                                @ onShowErrorPanel {this._showErrorPanel}
                                                                @ onTogglePanels {this._togglePanels}
                                                                @ onSelectFile {this.props.onSelectFile}
                                                                @ panelType {preferences.panelType}
                                                        else null
                                        < EditorFooter 
                                            @ annotations {annotations}
                                            @ fileTreeShown {preferences.fileTreeShown}
                                            @ previewShown {previewShown}
                                            @ panelsShown {preferences.panelsShown}
                                            @ sendCodeOnChangeEnabled {sendCodeOnChangeEnabled}
                                            @ sdkVersion {sdkVersion}
                                            $if wzCtx.Build.useExpo 
                                                @ isLocalWebPreview {isLocalWebPreview}
                                            @ onSendCode {onSendCode}
                                            $if wzCtx.Build.useExpo 
                                                @ onReloadPacki {onReloadPacki}
                                            @ onToggleTheme {this._toggleTheme}
                                            @ onTogglePanels {this._togglePanels}
                                            @ onToggleFileTree {this._toggleFileTree}
                                            @ onTogglePreview {onTogglePreview}
                                            @ onToggleSendCode {onToggleSendCode}
                                            @ onChangeSDKVersion {this.props.onChangeSDKVersion}
                                            @ onShowShortcuts {this._handleShowShortcuts}
                                            @ theme {this.props.preferences.theme}
                                            $if wzCtx.Build.usePackiAspects
                                                @ loggedUid {preferences.loggedUid}
                                                @ autoGenSingleDoc {preferences.autoGenSingleDoc}
                                                @ autoExecJob {preferences.autoExecJob}
                                                $if wzCtx.Build.usePackiAspectsGithub
                                                    @ connectGithubRepos {preferences.connectGithubRepos}
                                                @ trustLocalStorage {preferences.trustLocalStorage}
                                        $if wzCtx.Build.usePackiAspects
                                            { 
                                                && 
                                                    + loggedUser
                                                    < ModalDialog 
                                                        @ title "Manage your packies"
                                                        @ visible {currentModal === 'packi-manager'}
                                                        @ onDismiss {this._handleHideModal}
                                                        < PackiManagerContainer
                                                            @ onClose {this._handleHideModal}
                                        $if wzCtx.Build.useExpo 
                                            < ModalDialog 
                                                @ visible {currentModal === 'previous-saves'}
                                                @ title "Previous saves"
                                                @ onDismiss {this._handleHideModal}
                                                < PreviousSaves 
                                                    @ saveHistory {saveHistory}
                                        < ModalDialog 
                                            @ visible {currentModal === 'shortcuts'}
                                            @ onDismiss {this._handleHideModal}
                                            < KeyboardShortcuts 
                                        $if wzCtx.Build.useExpo 
                                            < ImportRepoModal 
                                                @ visible {currentModal === 'import-repo'}
                                                @ onHide {this._handleHideModal}
                                                @ preventRedirectWarning {this._preventRedirectWarning}
                                                @ packierURL {packierURL}
                                            < ImportProductionModal 
                                                @ visible {currentModal === 'import-production'}
                                                @ onHide {this._handleHideModal}
                                                @ onSubmitMetadata {this.props.onSubmitMetadata}
                                                @ onChangeSDKVersion {this.props.onChangeSDKVersion}
                                                @ updateFiles {this.props.updateFiles}
                                                @ updateDependencies {this.props.updateDependencies}
                                        < Banner 
                                            @ type "success"
                                            @ visible {currentBanner === 'connected'}
                                            + Device connected!
                                        < Banner 
                                            @ type "error"
                                            @ visible {currentBanner === 'disconnected'}
                                            + Device disconnected!
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'autosave-disabled'}
                                            + Automatic saving has been disabled in this Packi because you have it open in&lf;                  another tab.
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'sdk-upgraded'}
                                            + This Packi was written in an older Wizzi version that is not longer supported. We&lf;                  have upgraded the Wizzi version to
                                            + {sdkVersion}
                                            + .
                                            br 
                                            + You might need to do some manual changes to make the Packi work correctly.
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'slow-connection'}
                                            + Slow network detected. Trying to load a basic version of the editor. Some features&lf;                  such as linting and autocomplete may not work.
                                        < Banner 
                                            @ type "info"
                                            @ visible {currentBanner === 'export-unavailable'}
                                            + You need to save the Packi first to export the code!
    export
        const EditorView  
            _ withPreferences
                _ connect
                    => 
                        param state
                            :any 
                        (
                            { 
                                @ viewer state.viewer
                                @ loggedUser state.loggedUser
                    (
                        $if wzCtx.Build.useExpo 
                            _ withDependencyManager(EditorViewComp)
                        $else
                            @ EditorViewComp
    export-default EditorView
    const styles
        _ StyleSheet.create
            { 
                { editorAreaOuter
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'column'
                    @ minWidth 0
                    @ minHeight 0
                { editorAreaOuterWrapper
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'row'
                    @ minHeight 0
                    @ minWidth 0
                { embedModal
                    @ minWidth 0
                    @ minHeight 0
                    @ maxWidth 'calc(100% - 48px)'
                    @ maxHeight 'calc(100% - 48px)'
                { preview
                    @ backgroundColor c('content')
                    @ borderLeft
                        `lit 
                            + 1px solid&nbsp;
                            _ c('border')
                            + 
                { previewToggle
                    @ appearance 'none'
                    @ position 'absolute'
                    @ right 0
                    @ bottom 0
                    @ margin 32
                    @ padding 12
                    @ height 48
                    @ width 48
                    @ border 0
                    @ borderRadius '50%'
                    @ backgroundColor c('secondary')
                    @ color c('secondary-text')
                    @ outline 0
                    @ transitionDuration '170ms'
                    @ transitionProperty 'box-shadow'
                    @ transitionTimingFunction 'linear'
                    { ':focus-visible'
                        @ outline 'auto'
                    { ':hover'
                        @ boxShadow s('small')
                { previewToggleIcon
                    @ fill 'currentColor'
                    @ verticalAlign -1
                { editorComponentOuter
                    @ border '0.3em solid rgb(122, 102, 82)'
                    @ borderRadius '0.5em'
                    @ height '100%'
                    @ width '100%'                   
                { editorComponent
                    @ height '100%'
                    @ width '100%'