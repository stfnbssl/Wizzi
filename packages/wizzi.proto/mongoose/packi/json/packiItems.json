[
  {
    "owner": "stfnbssl",
    "name": "css.reset",
    "mainIttf": "index.css.ittf",
    "wizziSchema": "css",
    "packiFiles": {
      "index.css.ittf": {
        "type": "CODE",
        "contents": "css\r\n    < body\r\n        background-color #009900\r\n        color #990099\r\n    menu()"
      },
      "t/menu.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n    . menu-item\r\n        color #0000dd\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"css\"\n            path \"stfnbssl/css\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/artifacts.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'Artifacts'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n    \r\n        $include ./introduction\r\n        $include ./implementation\r\n        $include ./gencontext\r\n        $include ./sample\r\n        $include ./core\r\n        $include ./jsonexport\r\n        $include ./xmlexport\r\n        $include ./ittfdocument\r\n\r\n"
      },
      "t/core.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Internal artifacts'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The wizzi-core plugin exports some useful artifacts.\r\n\t\t\t+ We already have seen the artifacts for the psedo models\r\n\t\t\tul\r\n\t\t\t\tli Json\r\n\t\t\t\tli Xml\r\n\t\t\t\tli Text\r\n\r\n\t\tp There are also these others core artifacts\r\n\t\t\tul\r\n\t\t\t\tli json/export\r\n\t\t\t\tli xml/export\r\n\t\t\t\tli ittf/document\r\n\r\n"
      },
      "t/gencontext.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The genContext object'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\th4 The interface of the gencontext object\r\n        ittf-panel\r\n            ittf\r\n                class genContext\r\n                    #\r\n                        # Set line indentation to a given value\r\n                    m forceIndent\r\n                        param value\r\n                    #\r\n                        # Increase line indentation\r\n                    m indent\r\n                        param value\r\n                    #\r\n                        # Decrease line indentation\r\n                    m deindent\r\n                        param value\r\n                    #\r\n                        # Add a named value to the interpolation context\r\n                    m a\r\n                        param name\r\n                        param value\r\n                    #\r\n                        # Add a named value from the interpolation context\r\n                    m g\r\n                        param name\r\n                    #\r\n                        # Remove a named value from the interpolation context\r\n                    m r\r\n                        param name\r\n                    #\r\n                        # Write a text with interpolation and line feed\r\n                    m w\r\n                        param text\r\n                    #\r\n                        # Write a text with interpolation without line feed\r\n                    m write\r\n                        param text\r\n                    #\r\n                        # throw a NodeError exception\r\n                    m error\r\n                        param message\r\n                        param node\r\n                    #\r\n                        # throw an ArtifactGenerationError exception\r\n                    m artifactGenerationError\r\n                        param message\r\n                        param location\r\n                        param node"
      },
      "t/implementation.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Implementation'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\r\n\t\tp An artifact generator produces a buffer of text characters.\r\n            \\b The production is driven by models contained in the\r\n\t\t\t\\b parameters passed to the generator.\r\n\r\n\t\tp An artifact generator receives three parameters:\r\n\t\tittf-panel\r\n            ittf\r\n                func gen\r\n                    { model\r\n                        | api-ref wizzi-plugin.wizziModel\r\n                        | POJO\r\n                    { ctx\r\n                        api-ref wizzi.artifact.genContext\r\n                    callback\r\n\t\tul\r\n\t\t\tli A model can be a Wizzi Model or a POJO, \r\n\t\t\t\t\\b and represent the main context of the artifact generation.\r\n\t\t\tli An instance of the wizzi.artifact.genContext class that contains\r\n\t\t\t\tul\r\n\t\t\t\t\tli An in-memory buffer where the generated text is written\r\n\t\t\t\t\t\t\\b sequentially using write and write line methods.\r\n\t\t\t\t\tli A data context that may contain zero or many secondary\r\n\t\t\t\t\t\t\\b context models, Wizzi Models or POJO.\r\n\t\t\t\t\tli Some helper functions for text indentation, interpolation\r\n\t\t\t\t\t\t\\b and error management.\r\n\t\t\tli A callback function that a succesfull generation must call\r\n\t\t\t\t\\b passing, as a second parameter, an instance of the \r\n\t\t\t\t\\b wizzi.artifact.genContext with the text buffer containing\r\n\t\t\t\t\\b the generated artifact\r\n\r\n\t\tp Artifact generations are write based, using the write statements\r\n\t\t\t\\b of the wizzi.artifact.genContext, or template based.\r\n\r\n\t\th3 Code generation by term rewriting\r\n\t\t\r\n\t\tp The mTree loader, implemented by the wizzi-mtree.loader.loadMTree API, is\r\n\t\t\t\\b a powerfull model composer and transformer. \r\n\t\t\t\\b Model transformations can be \r\n\t\t\t\\b chained: an output mTree can become the input context for the next\r\n\t\t\t\\b mTree loading. A 'wfjob' model can orchestrate any number of cascading\r\n\t\t\t\\b transformations.\r\n\t\t\t\\b The models passed to the artifact generator are the final\r\n\t\t\t\\b models, ready for generating the textual artifact.\r\n\t\t\r\n\t\tp A template based generation, that uses the mTree loader,\r\n\t\t\t\\b can be, indeed, more a code generation by term rewriting\r\n\t\t\t\\b than a textual code generation. When mTrees are loaded into Wizzi Models,\r\n\t\t\t\\b that can apply types and validations, and can programmatically modify the model,\r\n\t\t\t\\b we have a tool for efficiently enabling any extension of the target\r\n\t\t\t\\b language, easily implementing partial classes or any other modular\r\n\t\t\t\\b aspect or rewrite rule.\r\n\r\n\t\th3 Language schemas and language artifact generators\r\n\t\tp Focusing on the generation of \r\n\t\t\t\\b the textual content of an artifact, we must treat of a class\r\n\t\t\t\\b of Wizzi Model types that is specific for the production\r\n\t\t\t\\b of code targeting the synthax of a programming languages (PL).\r\n\r\n\t\tp A language schema defines a tree structure\r\n\t\t\t\\b that an associated language artifact generator can transform\r\n\t\t\t\\b in a targeting PL code. It can be viewd as a profile of a PL Grammar that \r\n\t\t\t\\b can be implemented partially,\r\n\t\t\t\\b with some of its symbols stereotyped. The schema developer should try \r\n\t\t\t\\b to find the optimal balance between ease of use and completeness and\r\n\t\t\t\\b define the proper approximation of the schema in respect to the PL grammar.\r\n\r\n\t\tp Must be said that language schema is a concept. A language schema is\r\n\t\t\t\\b like any other wizzi schema and a language artifact is\r\n\t\t\t\\b like any other artifact generator. The production of specific tools for\r\n\t\t\t\\b creating language schemas and artifacts could be \r\n\t\t\t\\b undertaken in the future.\r\n\r\n\t\tp The wizzi factory, that is generated by the wizzi factory,\r\n\t\t\t\\b uses some language schemas for its generations:\r\n\t\tul\r\n\t\t\tli The `js` schema in the wizzi-js plugin.\r\n\t\t\tli The `html`, `css` and `md` schemas in the wizzi-html plugin.\r\n\r\n\t\th3 Template based artifact generation\r\n\r\n\t\tp Language schema Wizzi models are template\r\n\t\t\t\\b formats for Wizzi factory template based artifact generations.\r\n\r\n        ittf-panel\r\n            title `js` ittf document\r\n            ittf\r\n                module\r\n                    kind jsfile\r\n                    class Horse\r\n                        super Animal\r\n                        ctor\r\n                            param name\r\n                            base name\r\n                        m say\r\n                            log 'Hiiii i am ', this.name\r\n                        m create\r\n                            static\r\n                            param name\r\n                            return\r\n                                new Horse\r\n                                    @ name\r\n\r\n\t\tp Almost every ittf node maps to a node type of the javascripts AST. And \r\n\t\t\t\\b ittf nodes can be template node commands and can contain expressions.\r\n\r\n\t\th3 Example of template based implementation of\r\n\t\t\t\\b the wizzi-plugin.artifactGenerator API\r\n\t\t\r\n        p In this dummy example, a 'js' ittf document template,\r\n\t\t\t\\b named 'datalayer/adapters.js.ittf'\r\n\t\t\t\\b is transformed in the javascript textual code of a fictitious datalayer\r\n\t\t\t\\b adapter component.\r\n\t\t\r\n        p This example artifact generator makes use internaly of a 'js' language\r\n\t\t\t\\b artifact generator, named 'js/module'. The Wizzi model that it receives as \r\n\t\t\t\\b first parameter, has been loaded in previous steps, and becomes \r\n\t\t\t\\b the mTreeBuilUpContext object for loading the mTree of the `js` ITTF document template. \r\n\t\t\t\\b It must be a Wizzi Model of type 'rdbms' otherwise an error\r\n\t\t\t\\b is returned in the callback.\r\n\t\t\r\n        p The `js` source ITTF document is loaded, and transformed in a textual artifact, calling\r\n\t\t\t\\b the 'loadModelAndGenerateArtifact' method of the \r\n\t\t\t\\b wizzi.WizziFactory class, exposed in the property 'wizziFactory'\r\n\t\t\t\\b of the 'ctx' parameter (an instance of the wizzi.artifact.genContext class).\r\n\t\t\r\n        ittf-panel\r\n            ittf\r\n                module\r\n                    kind jsfile\r\n                    var path = require('path')\r\n                    var md = module.exports = {}\r\n                    var myname = 'artifact rdbms.adapters.main';\r\n                    set md.gen\r\n                        function\r\n                            { model\r\n                            { ctx\r\n                            callback\r\n                            # check the model is a Wizzi Model of type 'rdbms'\r\n                            if model.wzElement !== 'rdbms'\r\n                                return\r\n                                    callback\r\n                                        _ctx.error\r\n                                            @ myname + \" error: the model paramater should be an 'rdbms' Wizzi Model\"\r\n                                            @ model\r\n                            # build the artifact template path, it is a js ittf document in a sub folder\r\n                            var ittfTemplatePath\r\n                                _ path.join\r\n                                    @ __dirname\r\n                                    @ 'ittf'\r\n                                    @ 'datalayer'\r\n                                    @ 'adapters.js.ittf'\r\n                            # call the wizzifactory method for loading a language Wizzi Model and\r\n                            # generate a language artifact from it. Pass the input model in the\r\n                            # mTreeBuildUpContext property of the request object argument.\r\n                            # The 'js' schema of the template model is detected by its filename.\r\n                            _ ctx.wizziFactory.loadModelAndGenerateArtifact\r\n                                @ ittfTemplatePath\r\n                                {\r\n                                    @ mTreeBuildUpContext model\r\n                                @ 'js/module'\r\n                                function\r\n                                    param err\r\n                                    param artifactText\r\n                                    if err\r\n                                        # invoke the callback on error, passing back the loadModelAndGenerateArtifact error\r\n                                        return\r\n                                            _ callback\r\n                                                err\r\n                                    # write the artifactText into the genContext buffer\r\n                                    _ ctx.write(artifactText)\r\n                                    # invoke the callback on success, passing back the genContext\r\n                                    _ callback(null, ctx)\r\n\t\t\r\n\r\n\r\n"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Artifact generators'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Artifact generators are contained in Wizzi plugins and are exposed to\r\n\t\t\t\\b the Wizzi factory implementing the wizzi-plugin.factoryPlugin API.\r\n\r\n\t\tp The wizzi-plugin.factoryPlugin.getArtifactGenerator(artifactKey) method\r\n\t\t\t\\b returns a wizzi-plugin.artifactGenerator interface for generating\r\n\t\t\t\\b the requested `artifactName`.\r\n\r\n\t\th4 wizzi-plugin.artifactGenerator API\r\n\t\tittf-panel\r\n            ittf\r\n                {\r\n                    func gen\r\n                        { model\r\n                            | api-ref wizzi-plugin.wizziModel\r\n                            | POJO\r\n                        { ctx\r\n                            api-ref wizzi.artifact.genContext\r\n                        callback\r\n\r\n\t\tp Plugins authors are free to implement this interface with their\r\n\t\t\t\\b preferred tools.\r\n\r\n\t\tp In this documentation section we describe solutions that the wizzi \r\n\t\t\t\\b factory has taken for its own artifact generators.\r\n\r\n\t\th4 Wizzi factory standard location for artifact generators\r\n\t\tp Artifact generators should have a standard location in the\r\n\t\t\t\\b plugin package.\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    {package-name}\r\n                        package.json\r\n                        ...\r\n                        lib\r\n                            artifacts\r\n                                {wfschema-name}\r\n                                    {artifact-name}\r\n                                        gen\r\n                                            main.js\r\n\t\t\r\n\t\tp The file 'main.js' is the module that exposes \r\n\t\t\t\\b the wizzi-plugin.artifactGenerator interface for the\r\n\t\t\t\\b artifact of key: {wfschema-name}/{artifact-name}.\r\n\t\t\t\r\n\t\tp This artifact key must be unique in the plugins configuration\r\n\t\t\t\\b of the wizzi.WizziFactory instance that is executing the generation.\r\n\t\t\r\n\t\th4 Example of 'generator' attribute in a 'wfjob'\r\n\t\tp The {wfschema-name}/{artifact-name} artifact key\r\n\t\t\t\\b is the value to be declared in the `generator` attribute of the \r\n\t\t\t\\b `artifact` element of a 'wfjob' ITTF document.\r\n\t\tittf-panel\r\n            title Use of an artifact generator in a Wizzi job\r\n            ittf\r\n                wfjob {job-name}\r\n                    ...\r\n                    line {line-name}\r\n                        artifact {artifact-generation-description}\r\n                            ...\r\n                            generator {wfschema-name}/{artifact-name}\r\n                            ..."
      },
      "t/ittfdocument.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: '\"ittf/document\" builtin artifact'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The 'ittf/document' builtin artifact exports the ittf\r\n\t\t\t\\b representation of a loaded mTree.\r\n\t\t\t\\b This allow the buildup of ittf documents\r\n\t\t\t\\b using the mTree loader for\r\n\t\t\t\\b merging sources and contexts.\r\n\r\n\t\tittf-panel\r\n            title Sample wizzi job using the 'ittf/document' generator.\r\n            ittf\r\n                wfjob\r\n                    model styles\r\n                        src styles.json.ittf\r\n                        schema json\r\n                    model layout\r\n                        src layout.json.ittf\r\n                        schema json\r\n                    model optionsforms\r\n                        src options.form.ittf\r\n                        schema form\r\n                    line ui\r\n                        artifact ittf document of model options-page.html.ittf\r\n                            src options-page.html.ittf\r\n                            schema ittf\r\n                            generator ittf/document\r\n                            extension ittf\r\n                            model-ref styles\r\n                            model-ref layout\r\n                            model-ref optionsforms\r\n\r\n\r\n\r\n"
      },
      "t/jsonexport.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: '\"json/export\" builtin artifact'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\t\t\r\n        p The json/export builtin artifact can be used in a Wizzi job,\r\n\t\t\t+ to save the JSON representation of\r\n\t\t\t+ a Wizzi model, when its Wizzi schema \r\n\t\t\t+ declares the `export-to json` element.\r\n\r\n\t\tittf-panel\r\n            title Sample wfjob artifact element using the json/export artifact.\r\n            ittf\r\n                wfjob\r\n                    ...\r\n                    artifact json export of model sample.form.ittf\r\n                        src sample.form.ittf\r\n                        schema form\r\n                        generator json/export\r\n                        extension json\r\n\r\n\r\n"
      },
      "t/sample.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Sample artifact generator'\r\n        };\r\n    \r\n    html/docs/section(&sect)\r\n\r\n\t\th4 Code write artifact generator sample\r\n\t\tittf-panel\r\n            ittf\r\n                module\r\n                    kind jsfile\r\n                    var md = module.exports = {}\r\n                    var myname = 'artifact rdbms.sqltables.main';\r\n                    set md.gen\r\n                        function\r\n                            param model\r\n                            param ctx\r\n                            param callback\r\n                            if model.wzElement !== 'rdbms'\r\n                                return\r\n                                    callback\r\n                                        _ctx.error\r\n                                            @ myname + \" error: the model paramater should be an 'rdbms' Wizzi Model\"\r\n                                            @ model\r\n                            ${'$'}foreach table in model.tables\r\n                                _ ctx.a('TABLE', table.wzName)\r\n                                _ ctx.w('declare table TABLE')\r\n                                ...\r\n                            _ callback(null, ctx)\r\n\r\n"
      },
      "t/xmlexport.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: '\"xml/export\" builtin artifact'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The xml/export builtin artifact can be used in a Wizzi job,\r\n\t\t\t+ to save the xml representation of\r\n\t\t\t+ a Wizzi Model when its Wizzi schema \r\n\t\t\t+ declares the `export-to xml` element.\r\n\r\n\t\tittf-panel\r\n            title Sample wfjob artifact element using the xml/export artifact.\r\n            ittf\r\n                wfjob\r\n                    ...\r\n                    artifact xml export of model sample.form.ittf\r\n                        src sample.form.ittf\r\n                        schema form\r\n                        generator xml/export\r\n                        extension xml"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/index.css",
    "mainIttf": "cheatsheet.css.ittf",
    "wizziSchema": "css",
    "packiFiles": {
      "cheatsheet.css.ittf": {
        "type": "CODE",
        "contents": "css\r\n\r\n\t$include css/options-init\r\n\r\n\t$\r\n\t\topt.sidebar_1 = true;\r\n\t\topt.sb_1_min_w = 60;\r\n\t\topt.logo_w = 70;\r\n\t\topt.logo_h = 30;\t\r\n\r\n    $include css/options-analize\r\n    $include css/cheatsheets/content/options\r\n\r\n    $include css/_layouts/page-layout\r\n    $include css/prettyprint\r\n    \r\n    $include css/home/header/index\r\n    $include css/home/content/index\r\n    $include css/home/footer/index\r\n\r\n    $include css/cheatsheets/content/index\r\n\r\n\r\n    < a.anchor\r\n        display block\r\n        position relative\r\n        top -150px\r\n        visibility hidden\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"css\"\n            path \"stfnbssl/css\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/index.html",
    "mainIttf": "cheatsheet.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "cheatsheet.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $include html/options-init\r\n\t$\r\n        // _.log('cs', cs);\r\n        opt.mainCss = '/~-/docs/cheatsheets/index.css?context=mpage;home.model';\r\n        opt.mainJs = null;\r\n\t\topt.logo_w = 70;\r\n\t\topt.logo_h = 30;\r\n\t\topt.sidebar_1 = true;\r\n\t\topt.sb_1_min_w = 80;\r\n\t\topt.title = 'Schema <b>' + cs.schema.toUpperCase() + '</b> cheat sheet';\r\n        opt.schema = cs.schema;\r\n        opt.SCHEMA = cs.schema.toUpperCase();\r\n\t\topt.usePrism = false;\r\n        opt.useHighlight = true;\r\n\t\tif (opt.usePrism) {\r\n            if (cs.schema === 'js') {\r\n                opt.language = 'language-javascript';\r\n            } else {\r\n                opt.language = 'language-' + cs.schema;\r\n            }\r\n        } else {\r\n            opt.language = cs.schema;\r\n        }\r\n\r\n    html/_layouts/page-layout(&opt)\r\n\r\n        $include html/home/header/index\r\n        $include html/cheatsheets/content/index\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/css.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema css\r\n\t$include base\r\n\t$include svg_include"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element selector\r\n\ttag . | # | <\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Css element selector\r\n\t\tittf\r\n\t\t\tcss\r\n\t\t\t\t< body\r\n\t\t\t\t\tbackground-color #dedede\r\n\t\t\t\t\tcolor 000\r\n\r\n    item\r\n\t\ttitle Css class selector\r\n\t\tittf\r\n\t\t\tcss\r\n\t\t\t\t. page\r\n\t\t\t\t\tbackground-color #dedede\r\n\t\t\t\t\tcolor 000\r\n\r\n\titem\r\n\t\ttitle Css id selector\r\n\t\tittf\r\n\t\t\tcss\r\n\t\t\t\t# page\r\n\t\t\t\t\tbackground-color #dedede\r\n\t\t\t\t\tcolor 000\r\n"
      },
      "t/svg_include.ittf.ittf": {
        "type": "CODE",
        "contents": "element include svg\r\n\ttag background-image + svg\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle script tag with inclusion of a svg model\r\n\t\tittf\r\n\t\t\tcss\r\n\t\t\t\t< body\r\n\t\t\t\t\tbackground-image\r\n\t\t\t\t\t\tsvg\r\n\t\t\t\t\t\t\twidth 100%\r\n\t\t\t\t\t\t\theight 100%\r\n\t\t\t\t\t\t\tview-box 0 0 1600 900\r\n\t\t\t\t\t\t\tpath\r\n\t\t\t\t\t\t\t\tfill #A0E2DB\r\n\t\t\t\t\t\t\t\td M0 504 0 899 1600 899 1600 120z\r\n\t\t\t\t\t\t\tpath\r\n\t\t\t\t\t\t\t\tfill #CBF2F3\r\n\t\t\t\t\t\t\t\td M1600 567 1600 899 0 899 0 165z\r\n\t\t\t\t\t\t\tpath\r\n\t\t\t\t\t\t\t\tfill #719D71\r\n\t\t\t\t\t\t\t\td M0 680 0 899 1600 899 1600 300z\r\n\t\t\t\t\t\t\tpath\r\n\t\t\t\t\t\t\t\tfill # 37EB67E\r\n\t\t\t\t\t\t\t\td M1600 719 1600 899 0 899 0 353z\r\n\t\t\t\t\t\t\tpath\r\n\t\t\t\t\t\t\t\tfill #004D66\r\n\t\t\t\t\t\t\t\td M0 788 0 899 1600 899 1600 625z\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/graphql.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema graphql\r\n\t$include base\r\n"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    element Misc\r\n        tag\r\n        ast\r\n        category\r\n\r\n        item\r\n            title Simple types\r\n            ittf\r\n                enum\r\n                    @ NORTH\r\n                    @ EAST\r\n                    @ SOUTH\r\n                    @ WEST\r\n\r\n                input Point2D\r\n                    {\r\n                        float x\r\n                        float y\r\n        \r\n        item\r\n            title Create\r\n            ittf\r\n                type Mutation\r\n                    m createOption\r\n                        string name\r\n                        string type\r\n                        string format\r\n                        string value\r\n                        type Option\r\n                        {\r\n                            . id\r\n\r\n                type Mutation\r\n                    m createUser\r\n                        type User\r\n                        string email\r\n                            % required\r\n                        string firstName\r\n                        string lastName\r\n\r\n        item\r\n            title Query\r\n            ittf\r\n                type Query\r\n                    [ users\r\n                        item-type User\r\n                            %required\r\n                        %required\r\n\r\n                type Query\r\n                    [ users\r\n                        ref User\r\n\r\n                query getUserById\r\n                    int id\r\n                    { User\r\n                        @ id $id\r\n                            = 4\r\n                        . email\r\n                        . authToken\r\n                        . profilePic\r\n                            as smallPic\r\n                            @ size 64\r\n                        . profilePic\r\n                            as bigPic\r\n                            @ size 1024\r\n\r\n        item\r\n            title Types\r\n            ittf\r\n\r\n                scalar Time\r\n                scalar Url\r\n                \r\n                type User\r\n                    ID id\r\n                    string authToken\r\n                    string firstName\r\n                    string lastName\r\n                    string email\r\n                    string mobile\r\n                    boolean isOwner\r\n                    ref picture\r\n                        int size\r\n                        type Url\r\n                    ref company\r\n                        type Company\r\n                    string oldField\r\n                        %deprecated\r\n\r\n                interface NamedEntity\r\n                    string name\r\n                    \r\n                interface ValuedEntity\r\n                    int value\r\n\r\n                type Person\r\n                    & NamedEntity\r\n                    string name\r\n                    int age\r\n\r\n                type Business\r\n                    & NamedEntity\r\n                    & ValuedEntity\r\n                    string name\r\n                    int value\r\n                    int employeeCount\r\n\r\n                type SomeType\r\n                    string field\r\n                        int arg \r\n                            % example\r\n                                @ 5\r\n                        % example\r\n                            @ 5\r\n\r\n\r\n        $*\r\n        union SearchResult\r\n            | Photo\r\n            | Person\r\n        *$\r\n        \r\n\r\n        item\r\n            title Directives\r\n            ittf \r\n                directive @example\r\n                    int value\r\n                    on FIELD_DEFINITION\r\n                    on ARGUMENT_DEFINITION\r\n\r\n\r\n        item\r\n            title Fragments\r\n            ittf\r\n                query withFragments\r\n                    { user\r\n                        @ id 4\r\n                        { friends\r\n                            @ first 10\r\n                            ... friendFields\r\n                        { mutualFriends\r\n                            @ first 10\r\n                            ... friendFields\r\n\r\n                fragment friendFields\r\n                    on User\r\n                    {\r\n                        . id\r\n                        . name\r\n                        . profilePic\r\n                            @ size 50\r\n\r\n                query inlineFragmentTyping\r\n                    { profiles\r\n                        @ handles\r\n                            [\r\n                                @ \"zuck\"\r\n                                @ \"cocacola\"\r\n                        . handle\r\n                        ...on User\r\n                            { friends\r\n                                . count\r\n                        ...on Page\r\n                            { likers\r\n                                . count"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/html.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema html\r\n\t$include base\r\n\t$include css_include\r\n\t$include js_include\r\n\t$include json_include\r\n\t$include svg_include"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element htmlElement\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Html document structure\r\n\t\tittf\r\n\t\t\thtml\r\n\t\t\t\thead\r\n\t\t\t\t\t@title\r\n\t\t\t\tbody\r\n\t\t\t\t\theader\r\n\t\t\t\t\tsection\r\n\t\t\t\t\tfooter"
      },
      "t/css_include.ittf.ittf": {
        "type": "CODE",
        "contents": "element include css\r\n\ttag @style + css\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle style tag with inclusion of a css wizzi model\r\n\t\tittf\r\n\t\t\thtml\r\n\t\t\t\thead\r\n\t\t\t\t\t@style\r\n\t\t\t\t\t\tcss\r\n\t\t\t\t\t\t\t< body\r\n\t\t\t\t\t\t\t\tfont-family arial, verdana, sans-serif\r\n\t\t\t\t\t\t\t\tfont-size 13px\r\n\t\t\t\t\t\t\t< h1, h2, h3\r\n\t\t\t\t\t\t\t\tmargin 0\r\n\t\t\t\t\t\t\t. wrapper\r\n\t\t\t\t\t\t\t\tmargin 1rem 0.5rem\r\n\r\n"
      },
      "t/json_include.ittf.ittf": {
        "type": "CODE",
        "contents": "element include json\r\n\ttag json + {\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle json tag (not standard) with inclusion of a json model\r\n\t\tittf\r\n\t\t\thtml\r\n\t\t\t\tbody\r\n\t\t\t\t\tjson profile\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname 'stefi'\r\n\t\t\t\t\t\t\tjob 'wizzi'\r\n\r\n\t\t\t\t\tscript\r\n\t\t\t\t\t\tmodule\r\n\t\t\t\t\t\t\tvar p\r\n\t\t\t\t\t\t\t\t_ JSON.parse\r\n\t\t\t\t\t\t\t\t\t@ document.querySelector('#profile').text\r\n\t\t\t\t\t\t\tlog 'profile.name', p.name\r\n\t\t\t\t\t\t\tlog 'profile.job', p.job"
      },
      "t/js_include.ittf.ittf": {
        "type": "CODE",
        "contents": "element include js\r\n\ttag script + module\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle script tag with inclusion of a js wizzi model\r\n\t\tittf\r\n\t\t\thtml\r\n\t\t\t\tbody\r\n\t\t\t\t\tscript\r\n\t\t\t\t\t\tmodule\r\n\t\t\t\t\t\t\tfunction sayHello\r\n\t\t\t\t\t\t\t\tlog 'Hello'\r\n\t\t\t\t\t\t\t_ sayHello\r\n"
      },
      "t/svg_include.ittf.ittf": {
        "type": "CODE",
        "contents": "element include svg\r\n\ttag img + svg\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle script tag with inclusion of a json model\r\n\t\tittf\r\n\t\t\thtml\r\n\t\t\t\thead\r\n\t\t\t\tbody\r\n\t\t\t\t\tdiv\r\n\t\t\t\t\t\ta\r\n                            href https://github.com/stfnbssl/wizzi\r\n\t\t\t\t\t\t\tsvg\r\n\t\t\t\t\t\t\t\trect\r\n\t\t\t\t\t\t\t\t\tx 10\r\n\t\t\t\t\t\t\t\t\ty 10\r\n\t\t\t\t\t\t\t\t\twidth 200\r\n\t\t\t\t\t\t\t\t\theight 100"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/ittf.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\t$\r\n\t\tvar d = '$';\r\n\t\tvar cont = '\\\\';\r\n\t\tvar contb = '\\\\b';\r\n\t\tvar contn = '\\\\n';\r\n\r\n\tschema ittf\r\n\r\n\t$include indented-tree\r\n\t$include jswizzi\r\n\t$include statements\r\n\t$include functions\r\n\t$include ecma_builtins\r\n\t$include jswizzi_builtins\r\n\t$include magics\r\n\r\n\r\n\r\n"
      },
      "t/ecma_builtins.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement Ecma builtin objects\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem\r\n\t\t\ttitle Ecma builtin functions\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode parseInt('43.5') = ${d}{ parseInt(43.5) }\r\n\t\t\t\t\tnode parseFloat('43.5') = ${d}{ parseFloat(43.5) }\r\n\t\t\t\t\tnode isFinite(Infinity) = ${d}{ isFinite(Infinity) }\r\n\t\t\t\t\tnode isFinite(NaN) = ${d}{ isFinite(NaN) }\r\n\t\t\t\t\tnode isFinite(null) = ${d}{ isFinite(null) }\r\n\t\t\t\t\tnode isFinite(0) = ${d}{ isFinite(0) }\r\n\t\t\t\t\tnode Number.isFinite(null) = ${d}{ Number.isFinite(null) }\r\n\t\t\t\t\tnode Number.isFinite(0) = ${d}{ Number.isFinite(0) }\r\n\t\t\t\t\tnode isNaN(NaN) = ${d}{ isNaN(NaN) }\r\n\t\t\t\t\tnode isNaN(undefined) = ${d}{ isNaN(undefined) }\r\n\t\t\t\t\tnode isNaN({}) = ${d}{ isNaN({})}\r\n\t\t\t\t\tnode isNaN(true) = ${d}{ isNaN(true) }\r\n\t\t\t\t\tnode isNaN(null) = ${d}{ isNaN(null) }\r\n\t\t\t\t\tnode isNaN(37) = ${d}{ isNaN(37) }\r\n\t\t\t\t\tnode isNaN('37') = ${d}{ isNaN('37') }\r\n\t\t\t\t\tnode isNaN('37.37') = ${d}{ isNaN('37.37') }\r\n\t\t\t\t\tnode isNaN('123ABC') = ${d}{ isNaN('123ABC') }\r\n\t\t\t\t\tnode parseInt('123ABC') = ${d}{ parseInt('123ABC') }\r\n\t\t\t\t\tnode Number('123ABC') = ${d}{ Number('123ABC') }\r\n\t\t\t\t\tnode isNaN('') = ${d}{ isNaN('') }\r\n\t\t\t\t\tnode Number('') = ${d}{ Number('') }\r\n\t\t\t\t\tnode isNaN(' ') = ${d}{ isNaN(' ') }\r\n\t\t\t\t\tnode Number(' ') = ${d}{ Number(' ') }\r\n\t\t\t\t\tnode isNaN(new Date()) = ${d}{ isNaN(new Date()) }\r\n\t\t\t\t\tnode isNaN(new Date().toString()) = ${d}{ isNaN(new Date().toString()) }\r\n\t\t\t\t\tnode isNaN('blabla') = ${d}{ isNaN('blabla') } \r\n\t\t\t\t\tnode Number('blabla') = ${d}{ Number('blabla') } \r\n\t\t\t\t\tnode parseFloat(3.14) = ${d}{ parseFloat(3.14) }\r\n\t\t\t\t\tnode parseFloat('3.14') = ${d}{ parseFloat('3.14') }\r\n\t\t\t\t\tnode parseFloat('314e-2') = ${d}{ parseFloat('314e-2') }\r\n\t\t\t\t\tnode parseFloat('0.0314E+2') = ${d}{ parseFloat('0.0314E+2') }\r\n\t\t\t\t\tnode parseFloat('3.14more non-digit characters') = ${d}{parseFloat('3.14more non-digit characters') }\r\n\t\t\t\t\tnode parseInt(' 0xF', 16) = ${d}{ parseInt(' 0xF', 16) }\r\n\t\t\t\t\tnode parseInt(' F', 16) = ${d}{ parseInt(' F', 16) }\r\n\t\t\t\t\tnode parseInt('17', 8) = ${d}{ parseInt('17', 8) }\r\n\t\t\t\t\t$$ not allowed in strict mode : parseInt(021, 8) = parseInt(021, 8) }\r\n\t\t\t\t\tnode parseInt('015', 10) = ${d}{ parseInt('015', 10) }\r\n\t\t\t\t\tnode parseInt(15.99, 10) = ${d}{ parseInt(15.99, 10) }\r\n\t\t\t\t\tnode parseInt('15,123', 10) = ${d}{ parseInt('15,123', 10) }\r\n\t\t\t\t\tnode parseInt('FXX123', 16) = ${d}{ parseInt('FXX123', 16) }\r\n\t\t\t\t\tnode parseInt('1111', 2) = ${d}{ parseInt('1111', 2) }\r\n\t\t\t\t\tnode parseInt('15 * 3', 10) = ${d}{ parseInt('15 * 3', 10) }\r\n\t\t\t\t\tnode parseInt('15e2', 10) = ${d}{ parseInt('15e2', 10) }\r\n\t\t\t\t\tnode parseInt('15px', 10) = ${d}{ parseInt('15px', 10) }\r\n\t\t\t\t\tnode parseInt('12', 13) = ${d}{ parseInt('12', 13) }\r\n\t\t\t\t\tnode set1 // Reserved Characters', set1 }\r\n\t\t\t\t\tnode set2 // Unescaped Characters', set2 }\r\n\t\t\t\t\tnode set3 // Number Sign', set3 }\r\n\t\t\t\t\tnode set4 // Alphanumeric Characters + Space', set4 }\r\n\t\t\t\t\tnode reserved chars : encodeURI(\";,/?:@&=+$\") = ${d}{ encodeURI(\";,/?:@&=+$\") }\r\n\t\t\t\t\tnode unescaped chars : encodeURI(\"-_.!~*'()\") = ${d}{ encodeURI(\"-_.!~*'()\") }\r\n\t\t\t\t\tnode number sign: encodeURI(\"#\") = ${d}{ encodeURI(\"#\") }\r\n\t\t\t\t\tnode alphanumeric chars + space : encodeURI(\"ABC abc 123\") = ${d}{ encodeURI(\"ABC abc 123\") }\r\n\r\n\t\t\t\t\tnode encodeURIComponent(\";,/?:@&=+$\") = ${d}{ encodeURIComponent(\";,/?:@&=+$\") }\r\n\t\t\t\t\tnode encodeURIComponent(\"-_.!~*'()\") = ${d}{ encodeURIComponent(\"-_.!~*'()\") }\r\n\t\t\t\t\tnode encodeURIComponent(\"#\") = ${d}{ encodeURIComponent(\"#\") }\r\n\t\t\t\t\tnode encodeURIComponent(\"ABC abc 123\") = ${d}{ encodeURIComponent(\"ABC abc 123\") }\r\n\r\n\t\titem \r\n\t\t\ttitle Ecma builtin String functions\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode ${d}{'a'.toUpperCase()}\r\n\t\t\t\t\tnode ${d}{'A'.toLowerCase()}\r\n\t\t\t\t\tnode ${d}{'a' + '  b  ' + 'c'}\r\n\t\t\t\t\tnode ${d}{'a' + '  b  '.trim() + 'c'}\r\n\t\t\t\t\tnode ${d}{'a,b,c,d'.split(',').join('-')}\r\n\t\t\r\n\t\titem \r\n\t\t\ttitle Operations on String objects passed as parameters\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}params commandParam|alpha;beta;gamma\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar commands = [];\r\n\t\t\t\t\t\tvar actions = commandParam.split(';')\r\n\t\t\t\t\t\tfor (var i=0; i<actions.length; i++) {\r\n\t\t\t\t\t\t\tvar tokens = actions[i].trim().split(' ');\r\n\t\t\t\t\t\t\tvar command = { name: tokens[0] };\r\n\t\t\t\t\t\t\tcommands.push (command);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode Commands: ${d}{ _.inspect(commands) }\r\n\r\n\t\titem\r\n\t\t\ttitle Ecma builtin Date object\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"></a>\r\n\t\t\t\t\tnode today: new Date() = ${d}{ new Date() }\r\n\t\t\t\t\tnode new Date('December 17, 1995 03:24:00') = ${d}{ new Date('December 17, 1995 03:24:00') }\r\n\t\t\t\t\tnode new Date('1995-12-17T03:24:00') = ${d}{ new Date('1995-12-17T03:24:00') }\r\n\t\t\t\t\tnode new Date(1995, 11, 17) = ${d}{ new Date(1995, 11, 17) }\r\n\t\t\t\t\tnode new Date(1995, 11, 17, 3, 24, 0) = ${d}{ new Date(1995, 11, 17, 3, 24, 0) }\r\n\r\n\t\titem\r\n\t\t\ttitle Ecma builtin Number object\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode Number.MAX_VALUE  = ${d}{ Number.MAX_VALUE }\r\n\t\t\t\t\tnode Number.MIN_VALUE = ${d}{ Number.MIN_VALUE }\r\n\t\t\t\t\tnode Number.POSITIVE_INFINITY = ${d}{ Number.POSITIVE_INFINITY }\r\n\t\t\t\t\tnode Number.NEGATIVE_INFINITY = ${d}{ Number.NEGATIVE_INFINITY }\r\n\t\t\t\t\tnode Number.NaN = ${d}{ Number.NaN }\r\n\t\t\t\t\tnode Number('123') = ${d}{ Number('123') }\r\n\t\t\t\t\tnode Number('12.3') = ${d}{ Number('12.3') }\r\n\t\t\t\t\tnode Number('') = ${d}{ Number('') }\r\n\t\t\t\t\tnode Number('0x11') = ${d}{ Number('0x11') }\r\n\t\t\t\t\tnode Number('0b11') = ${d}{ Number('0b11') }\r\n\t\t\t\t\tnode Number('0o11') = ${d}{ Number('0o11') }\r\n\t\t\t\t\tnode Number('foo') = ${d}{ Number('foo') }\r\n\t\t\t\t\tnode Number('100a') = ${d}{ Number('100a') }\r\n\r\n\t\titem\r\n\t\t\ttitle Ecma builtin RegExp object\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"></a>\r\n\t\t\t\t\tnode new RegExp('\\\\w+') = ${d}{ new RegExp('\\\\w+') }\r\n\t\t\t\t\tnode 'John Smith'.replace(new RegExp('(\\\\w+)\\\\s(\\\\w+)'), '$2, $1') = \r\n\t\t\t\t\t\t${contb} ${d}{ 'John Smith'.replace(new RegExp('(\\\\w+)\\\\s(\\\\w+)'), '$2, $1') } \r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar str = 'John Smith';\r\n\t\t\t\t\t\tvar reValue = '(\\\\w+)\\\\s(\\\\w+)';\r\n\t\t\t\t\t\tvar re = new RegExp(reValue);\r\n\t\t\t\t\tnode str.replace(re, '$2, $1') = ${d}{ str.replace(re, '$2, $1') } \r\n\r\n\t\titem\r\n\t\t\ttitle Ecma builtin Array object\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"></a>\r\n\t\t\t\t\tnode new Array(4) = ${d}{ new Array(4) }\r\n\t\t\t\t\tnode new Array(4).join('0') = ${d}{ new Array(4).join('0') }\r\n\r\n\t\titem\r\n\t\t\ttitle Ecma builtin Object object\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"></a>\r\n\t\t\t\t\tnode new Object(true) = ${d}{ new Object(true).toString() }"
      },
      "t/functions.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement jsWizzi functions\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem\r\n\t\t\ttitle Functions in scripts\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tfunction sayHello(name) {\r\n\t\t\t\t\t\t\treturn 'Hii I am ' + name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t${d}${d}TODO var sh = sayHello;\r\n\r\n\t\t\t\t\tp If Varenne could have talked he would have said: ${d}{ sayHello('Varenne') }.\r\n\t\t\t\t\t${d}${d}TODO p If Ribot could have talked he would have said: ${d}{ sh('Ribot') }.\r\n\r\n\t\titem\r\n\t\t\ttitle Functions in markup\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}function sayHello\r\n\t\t\t\t\t\t${d}param name\r\n\t\t\t\t\t\tnode Hii I am ${d}{ name }\r\n\r\n\t\t\t\t\t${d} var name = 'Ribot'\r\n\t\t\t\t\t${d}_ sayHello\r\n\t\t\t\t\t\t${d}@ name\r\n\r\n\r\n\t\titem\r\n\t\t\ttitle Functions in scripts + markup !!! powerful\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tfunction buildNode(parent, childCount, deep) {\r\n\t\t\t\t\t\t\tparent.childs = [];\r\n\t\t\t\t\t\t\tif (deep > 3) { return; }\r\n\t\t\t\t\t\t\tparent.childs = [];\r\n\t\t\t\t\t\t\tfor (var i = 0; i < childCount; i++) {\r\n\t\t\t\t\t\t\t\tvar child = { id: parent.id + '-' + i};\r\n\t\t\t\t\t\t\t\tbuildNode (child, childCount, deep + 1);\r\n\t\t\t\t\t\t\t\tparent.childs.push (child);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar tree = { id: 0 };\r\n\t\t\t\t\t\tbuildNode (tree, 2, 0);\r\n\r\n\t\t\t\t\tnode\r\n\t\t\t\t\tnode Let us inspect the 'tree' variable we built.\r\n\t\t\t\t\tnode\r\n\t\t\t\t\tnode ${d}{ _.inspect(tree) }\r\n\r\n\t\t\t\t\tnode\r\n\t\t\t\t\tnode beautiful tree buildup without depth limits\r\n\t\t\t\t\tnode\r\n\t\r\n\t\t\t\t\t${d}function nodeView\r\n\t\t\t\t\t\t${d}param parent\r\n\t\t\t\t\t\tdiv node${d}{parent.id}\r\n\t\t\t\t\t\t\t${d}foreach nodeChild in parent.childs\r\n\t\t\t\t\t\t\t\t${d}_ nodeView\r\n\t\t\t\t\t\t\t\t\t${d}@ nodeChild\r\n\r\n\t\t\t\t\t${d}_ nodeView\r\n\t\t\t\t\t\t${d}@ tree\r\n"
      },
      "t/indented-tree.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement The indented tree\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem\r\n\t\t\ttitle Ittf nodes\r\n\t\t\tittf\r\n\t\t\t\tnode-name node-value\r\n\t\t\t\t\tname the value is separated from the name by a space or tab\r\n\t\t\t\t\tname-is-a-word value is a string until end of line\r\n\t\t\t\t\tname the value can span many lines\r\n\t\t\t\t\t\t${cont} , and continue without separation\r\n\t\t\t\t\tname ... or continue\r\n\t\t\t\t\t\t${contb} with a blank separator\r\n\t\t\t\t\tname ... or continue\r\n\t\t\t\t\t\t${contn} with a line feed separator\r\n\r\n\t\titem\r\n\t\t\ttitle Ittf indented tree\r\n\t\t\tittf\r\n\t\t\t\troot a document must have one and only one root node\r\n\t\t\t\t\t${d}${d} the indentation shapes the tree\r\n\t\t\t\t\tnode child 1\r\n\t\t\t\t\tnode child 2\r\n\t\t\t\t\t\tnode child 2.a\r\n\t\t\t\t\t\t\tnode child 2.a.1\r\n\t\t\t\t\t\tnode child 2.b\r\n\r\n\t\titem\r\n\t\t\ttitle Ittf node values\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tname ${'   '} values always are trimmed\r\n\t\t\t\t\tname ${contb}  you must use the blank escape   ${contb}\r\n\t\t\t\t\tname to insert start or end spaces\r\n\r\n\t\titem\r\n\t\t\ttitle Escapes\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tname except the blank escape, as first or last character,\r\n\t\t\t\t\t\t${contb} the escape char is ignored\r\n\t\t\t\t\tname \\n, \\t, \\b, and so on, are inserted unescaped in the value string\r\n\t\t\t\t\tname how do you insert a \\b sequence at start or end line?\r\n\t\t\t\t\t${d}asis name \\b*|^^ the $asis command at rescue ${contb}\r\n\r\n\t\titem\r\n\t\t\ttitle Comments\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}${d} this node is commented out entirely until end of line\r\n\t\t\t\t\tand ${d}${d}this part too\r\n\t\t\t\t\tnode value\r\n\t\t\t\t\t${d}*\r\n\t\t\t\t\tthis is a multiline\r\n\t\t\t\t\tcomment\r\n\t\t\t\t\t*${d}\r\n\t\t\t\t\tnode value\r\n\t\t\t\t\tthis too ${d}*is\r\n\t\t\t\t\ta multiline comment\r\n\t\t\t\t\t*${d}\r\n\r\n\r\n\t\titem\r\n\t\t\ttitle Comment tricks\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode how do you insert a \"${d}${d}\" or \"${d}*\" in a value?\r\n\t\t\t\t\tnode you must use jsWizzi (see later) variables\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar dd = '$' + '$';\r\n\t\t\t\t\t\tvar da = '$' + '*';\r\n\t\t\t\t\t\tvar ad = '*' + '$';\r\n\t\t\t\t\tnode And you can insert ${d}{dd} and ${d}{da} and ${d}{ad}\r\n"
      },
      "t/jswizzi.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement jsWizzi\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem\r\n\t\t\ttitle jsWizzi variable declaration and interpolation\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar name = 'stefi';\r\n\t\t\t\t\t\tvar options = {\r\n\t\t\t\t\t\t\ttitle: 'Chapter 1'\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\tnode title is ${d}{options.title}\r\n\t\t\t\t\tnode name is ${d}{name}\r\n\r\n\t\titem \r\n\t\t\ttitle More variable declarations\r\n\t\t\tittf\r\n\t\t\t\thtml\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar name = 'Ribot';\r\n\t\t\t\t\t\tvar runDowns = 16, runWon = 16;\r\n\t\t\t\t\t\tvar placements = [1, 1, 1, 1, 1];\r\n\t\t\t\t\t\tvar pedigree = {\r\n\t\t\t\t\t\t\tmother: 'Romanella',\r\n\t\t\t\t\t\t\tfather: 'Tenerani',\r\n\t\t\t\t\t\t\tpaternalGrandfather: 'Bellini',\r\n\t\t\t\t\t\t\tmaternalGrandfather: 'El greco'\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tp ${d}{name} was undefeated. Won ${d}{runWon} out of ${d}{runDowns} races.\r\n\t\t\t\t\tp His father was ${d}{pedigree.father} and his mother ${d}{pedigree.mother}.\r\n\t\t\t\t\tp His placements are boring: ${d}{placements}, ...\r\n\r\n\t\titem \r\n\t\t\ttitle Inpute parameters with default values\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}params name|stefi, age:integer|61, inlove:boolean|true\r\n\t\t\t\t\tnode ${d}{name}, age ${d}{age}, ${d}{inlove ? 'is' : 'is not'} in love.\r\n\r\n\t\titem\r\n\t\t\ttitle Unary expressions\r\n\t\t\tittf\r\n\t\t\t\tany\r\n\t\t\t\t\tany +2 =  ${d}{ +2 }\r\n\t\t\t\t\tany -2 = ${d}{ -2 }\r\n\t\t\t\t\tany !(2 == 2) = ${d}{ !(2 == 2) }\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar a = 0;\r\n\t\t\t\t\tany a = = ${d}{ a }\r\n\t\t\t\t\tany ++a = ${d}{ ++a }\r\n\t\t\t\t\tany ++a = ${d}{ ++a }\r\n\t\t\t\t\tany --a = ${d}{ --a }\r\n\t\t\t\t\tany typeof 3 = ${d}{ typeof 3 }\r\n\t\t\t\t\tany typeof '3' = ${d}{ typeof '3' }\r\n\t\t\t\t\tany typeof xyz = ${d}{ typeof xyz }\r\n\r\n\t\titem\r\n\t\t\ttitle Expressions\r\n\t\t\tittf\r\n\t\t\t\tany\r\n\t\t\t\t\tany 2 + 2 = ${d}{ 2 + 2 }\r\n\t\t\t\t\tany 5 - 2 = ${d}{ 5 - 2 }\r\n\t\t\t\t\tany 3 * 3 = ${d}{ 3 * 3 }\r\n\t\t\t\t\tany 6 / 2 = ${d}{ 6 / 2 }\r\n\t\t\t\t\tany 5 % 2 = ${d}{ 5 % 2 }\r\n\t\t\t\t\tany 5 == 2 = ${d}{ 5 == 2 }\r\n\t\t\t\t\tany 5 != 2 = ${d}{ 5 != 2 }\r\n\t\t\t\t\tany 5 > 2 = ${d}{ 5 > 2 }\r\n\t\t\t\t\tany 5 >= 5 = ${d}{ 5 >= 5 }\r\n\t\t\t\t\tany 5 < 2 = ${d}{ 5 < 2 }\r\n\t\t\t\t\tany 5 <= 5 = ${d}{ 5 <= 5 }\r\n\t\t\t\t\tany \"a\" in { a: 1} = ${d}{ \"a\" in { a: 1} }\r\n\t\t\t\t\tany typeof 5 === 'string' = ${d}{ typeof 5 === 'string' }\r\n\t\t\t\t\tany String(5) = ${d}{ String(5) }\r\n\t\t\t\t\tany Number('5.5') = ${d}{ Number('5.5') }\r\n\t\t\t\t\tany Date(2013,6,12) = ${d}{ Date(2013,6,12) }\r\n\t\t\t\t\tany 5 << 5 = ${d}{ 5 << 5 }\r\n\t\t\t\t\tany 5 >> 5 = ${d}{ 5 >> 5 }\r\n\t\t\t\t\tany 5 >>> 5 = ${d}{ 5 >>> 5 }\r\n\t\t\t\t\tany 5 | 5 = ${d}{ 5 | 5 }\r\n\t\t\t\t\tany 5 & 5 = ${d}{ 5 & 5 }\r\n\t\t\t\t\tany 5 ^ 5 = ${d}{ 5 ^ 5 }\r\n\r\n\r\n\t\titem \r\n\t\t\ttitle Conditional operator\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode (3 == 3 ? 1 : 0) = ${d}{ 3 == 3 ? 1 : 0 }\r\n\t\t\t\t\tnode (true ? 5 : 2) = ${d}{ true ? 5 : 2 }\r\n\r\n\r\n\t\titem \r\n\t\t\ttitle Assignments\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d} var a = 0;\r\n\t\t\t\t\tnode var a = 0; a += 2; -> ${d}{ a += 2 }\r\n\t\t\t\t\t${d} var a = 0;\r\n\t\t\t\t\tnode var a = 0; a -= 2; -> ${d}{ a -= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a *= 2; -> ${d}{ a *= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a /= 2; -> ${d}{ a /= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a %= 2; -> ${d}{ a %= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a <<= 2; -> ${d}{ a <<= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a >>= 2; -> ${d}{ a >>= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a >>>= 2; -> ${d}{ a >>>= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a &= 2; -> ${d}{ a &= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a |= 2; -> ${d}{ a |= 2 }\r\n\t\t\t\t\t${d} var a = 3;\r\n\t\t\t\t\tnode var a = 3; a ^= 2; -> ${d}{ a ^= 2 }\r\n\r\n\r\n\r\n"
      },
      "t/jswizzi_builtins.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement jsWizzi builtin objects\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem\r\n\t\t\ttitle 'inflect' builtin functions\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode 'item'.pluralize = ${d}{ 'item'.pluralize }\r\n\t\t\t\t\tnode 'friend'.pluralize = ${d}{ 'friend'.pluralize }\r\n\t\t\t\t\tnode 'lady'.pluralize = ${d}{ 'lady'.pluralize }\r\n\t\t\t\t\tnode 'way'.pluralize.toUpperCase() = ${d}{ 'way'.pluralize.toUpperCase() }\r\n\t\t\t\t\tnode 'people'.singularize = ${d}{ 'people'.singularize }\r\n\t\t\t\t\tnode 'octopi'.singularize = ${d}{ 'octopi'.singularize }\r\n\t\t\t\t\tnode 'Hats'.singularize.toUpperCase() = ${d}{ 'Hats'.singularize.toUpperCase() }\r\n\t\t\t\t\tnode 'message_properties'.camelize = ${d}{ 'message_properties'.camelize }\r\n\t\t\t\t\tnode 'message_properties'.camelize = ${d}{ 'message_properties'.camelize }\r\n\t\t\t\t\tnode 'message_properties'.dasherize = ${d}{ 'message_properties'.dasherize }\r\n\t\t\t\t\tnode 'Message Properties'.dasherize = ${d}{ 'Message Properties'.dasherize }\r\n\t\t\t\t\tnode 'message_properties'.titleize = ${d}{ 'message_properties'.titleize }\r\n\t\t\t\t\tnode 'message properties to keep'.titleize = ${d}{ 'message properties to keep'.titleize }\r\n\t\t\t\t\tnode 'Message.Bus.Properties'.demodulize = ${d}{ 'Message.Bus.Properties'.demodulize }\r\n\t\t\t\t\tnode 'MessageBusProperty'.tableize = ${d}{ 'MessageBusProperty'.tableize }\r\n\t\t\t\t\tnode 'message_bus_properties'.classify = ${d}{ 'message_bus_properties'.classify }\r\n\t\t\t\t\tnode 'MessageBusProperty'.foreign_key = ${d}{ 'MessageBusProperty'.foreign_key }\r\n\t\t\t\t\tnode '1'.ordinalize = ${d}{ '1'.ordinalize }\r\n\t\t\t\t\tnode '2'.ordinalize = ${d}{ '2'.ordinalize }\r\n\t\t\t\t\tnode '3'.ordinalize = ${d}{ '3'.ordinalize }\r\n\t\t\t\t\tnode '4'.ordinalize = ${d}{ '4'.ordinalize }\r\n\r\n\t\titem\r\n\t\t\ttitle 'jsWizzi _' builtin functions\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\tnode inflect : 'message-properties'.camelize = ${d}{ 'message-properties'.camelize }\r\n\t\t\t\t\tnode jsWizzi _ : _.dashToCamelCase('message-properties') = ${d}{ _.dashToCamelCase('message-properties') }\r\n\t\t\t\t\tnode inflect : 'message_properties'.camelize = ${d}{ 'message_properties'.camelize }\r\n\t\t\t\t\tnode jsWizzi _ : _.camelize('message_properties') = ${d}{ _.camelize('message_properties') }\r\n\t\t\t\t\t${d} var text = 'alfa\\\\t \" \" \\\\n'\r\n\t\t\t\t\tnode \"_.escape( text )\" = \"${d}{ _.escape( text ) }\"\r\n\t\t\t\t\tnode _.isString( '3' ) = ${d}{ _.isString( '3' ) }\r\n\t\t\t\t\tnode _.isString( 3 ) = ${d}{ _.isString( 3 ) }\r\n\t\t\t\t\tnode _.isEmpty( '' ) = ${d}{ _.isEmpty( '' ) }\r\n\t\t\t\t\tnode _.isEmpty( 'a ' ) = ${d}{ _.isEmpty( 'a ' ) }\r\n\t\t\t\t\tnode _.isNotEmpty( 'a ' ) = ${d}{ _.isNotEmpty( 'a ' ) }\r\n\t\t\t\t\tnode _.isNotEmpty( '' ) = ${d}{ _.isNotEmpty( '' ) }\r\n\t\t\t\t\tnode _.isObject( {} ) = ${d}{ _.isObject( {} ) }\r\n\t\t\t\t\tnode _.isObject( 3 ) = ${d}{ _.isObject( 3 ) }\r\n\t\t\t\t\tnode _.isArray( [] ) = ${d}{ _.isArray( [] ) }\r\n\t\t\t\t\tnode _.isArray( {} ) = ${d}{ _.isArray( {} ) }\r\n\t\t\t\t\tnode _.isNumber( 3 ) = ${d}{ _.isNumber( 3 ) }\r\n\t\t\t\t\tnode _.isNumber( '' ) = ${d}{ _.isNumber( '' ) }\r\n\t\t\t\t\tnode _.isDate( new Date() ) = ${d}{ _.isDate( new Date() ) }\r\n\t\t\t\t\tnode _.isDate( [] ) = ${d}{ _.isDate( [] ) }\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar options = {\r\n\t\t\t\t\t\t\ttitle: 'Chapter 1'\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\tnode _.replace( '1353739', '3', '0' ) = ${d}{ _.replace( '1353739', '3', '0' ) }\r\n\t\t\t\t\tnode _.inspect( options ) = ${d}{ _.inspect( options ) }\r\n\r\n"
      },
      "t/magics.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement Ittf magic tricks\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem \r\n\t\t\ttitle Embedding statements in interpolated expressions\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar commands = [ { name: 'alpha' }, { name: 'beta' }, { name: 'gamma' } ];\r\n\t\t\t\t\tnode We perform an interpolation of a multistatement jsWizzi expression.\r\n\t\t\t\t\tnode We intersperse command names with dashes.\r\n\t\t\t\t\t${d}foreach command in commands\r\n\t\t\t\t\t\tnode  ${d}{ command.name.toUpperCase()[0] + ' - ' + command.name }\r\n\t\t\t\t\t\tnode  This is quite crazy. But it works! -> ${d}{\r\n\t\t\t\t\t\t\t${contb} var len = command.name.length, output = '';\r\n\t\t\t\t\t\t\t${contb} for (var i=0; i<len; i++) {\r\n\t\t\t\t\t\t\t${contb}   output += command.name[i];\r\n\t\t\t\t\t\t\t${contb}   if (i < len -1) { output += ' - '};\r\n\t\t\t\t\t\t\t${contb} }\r\n\t\t\t\t\t\t\t${contb} return output;\r\n\t\t\t\t\t\t\t${contb} }\r\n\t\t\t\t\tnode  That is why mTree stays for \"magical tree\".\r\n\t\t\t\t\tnode  See in wizzi-mtree/loader/ittfinterpolate.js how this works.\r\n"
      },
      "t/statements.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement jsWizzi statements\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\r\n\t\titem\r\n\t\t\ttitle Conditions in scripts\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar name = 'Derby', winner = null;\r\n\t\t\t\t\t\tif (name == 'Ascot') {\r\n\t\t\t\t\t\t\twinner = 'Ribot';\r\n\t\t\t\t\t\t} else if (name == 'Arc de triomphe') {\r\n\t\t\t\t\t\t\twinner = 'Varenne';\r\n\t\t\t\t\t\t} else if (name == 'Derby') {\r\n\t\t\t\t\t\t\twinner = 'Ribot';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\twinner = 'Varenne';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode If the race was ${d}{name} the winner was ${d}{winner}.\r\n\r\n\t\titem\r\n\t\t\ttitle Conditions in markup\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar name = 'Derby';\r\n\t\t\t\t\t${d}if name == 'Ascot'\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Ribot\r\n\t\t\t\t\t${d}elif name == 'Arc de triomphe'\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Varenne\r\n\t\t\t\t\t${d}elif name == 'Derby'\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Ribot\r\n\t\t\t\t\t${d}else\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Varenne\r\n\r\n\t\titem\r\n\t\t\ttitle For loop in scripts\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar sletters = 'a,b,c,d,e,f,g,h';\r\n\t\t\t\t\t\tvar aletters = sletters.split(',');\r\n\t\t\t\t\t\tvar letter, label='';\r\n\t\t\t\t\t\tfor (var i=0; i<aletters.length; i++) {\r\n\t\t\t\t\t\t\tletter = aletters[i];\r\n\t\t\t\t\t\t\tlabel += i % 2 == 0 ? letter : letter.toUpperCase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode The resulting label has the even letters upper cased: ${d}{label}.\r\n\r\n\t\titem\r\n\t\t\ttitle For loop in markup\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar sletters = 'a,b,c,d,e,f,g,h';\r\n\t\t\t\t\t\tvar aletters = sletters.split(',');\r\n\t\t\t\t\tnode The resulting tree has the even node values upper cased:\r\n\t\t\t\t\t\t${d}foreach letter in aletters\r\n\t\t\t\t\t\t\tnode ${d}{letter_index} ${d}{letter_index % 2 == 0 ? letter : letter.toUpperCase() }\r\n\r\n\t\titem\r\n\t\t\ttitle While loop in scripts\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar x = 1, odds = '1';\r\n\t\t\t\t\t\twhile ( x < 10 ) {\r\n\t\t\t\t\t\t\tx += 2;\r\n\t\t\t\t\t\t\todds += ', ' + x \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode First odd numbers: ${d}{odds}.\r\n\r\n\t\titem\r\n\t\t\ttitle While loop in markup\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d} var x = 1, odds = '1'\r\n\t\t\t\t\t${d}while x < 10\r\n\t\t\t\t\t\t${d} x += 2\r\n\t\t\t\t\t\tnode ${d}{ odds += ', ' + x } \r\n\t\t\t\t\t\t"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/js.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema js\r\n\t$include function\r\n\t$include call\r\n\t$include loops\r\n\t$include arrays\r\n\t$include reactnode"
      },
      "t/arrays.ittf.ittf": {
        "type": "CODE",
        "contents": "element array\r\n\ttag _\r\n\tast \r\n\tcategory arrays\r\n\t\r\n\titem\r\n\t\ttitle array concat single line statement\r\n\t\tittf\r\n\t\t\tconcat myarray 0, 1, 2, [3, 4]\r\n\r\n\titem\r\n\t\ttitle array concat multi line statement\r\n\t\tittf\r\n\t\t\tconcat myarray\r\n\t\t\t\t@ 0\r\n\t\t\t\t@ 1\r\n\t\t\t\t@ 2\r\n\t\t\t\t[\r\n\t\t\t\t\t@ 3\r\n\t\t\t\t\t@ 4\r\n\r\n\titem\r\n\t\ttitle array concat mixed line statement\r\n\t\tittf\r\n\t\t\tconcat myarray 0, 1\r\n\t\t\t\t@ 2\r\n\t\t\t\t[\r\n\t\t\t\t\t@ 3\r\n\t\t\t\t\t@ 4\r\n\r\n\titem\r\n\t\ttitle array forEach statement with default thisArg\r\n\t\tittf\r\n\t\t\teach item in myarray\r\n\t\t\t\tset item.a = item.b / 2\r\n\r\n\titem\r\n\t\ttitle array forEach statement with explicit thisArg\r\n\t\tittf\r\n\t\t\teach item in myarray myinstance\r\n\t\t\t\tset item.a = item.b / 2\r\n\t\r\n\titem\r\n\t\ttitle array filter statement with default thisArg\r\n\t\tittf\r\n\t\t\tfilter item in myarray\r\n\t\t\t\treturn item.a == 10\r\n\r\n\titem\r\n\t\ttitle array filter statement with explicit thisArg\r\n\t\tittf\r\n\t\t\tfilter item in myarray myinstance\r\n\t\t\t\treturn item.a == this.maxAge\r\n\r\n\titem\r\n\t\ttitle array find statement with default thisArg\r\n\t\tittf\r\n\t\t\tfind item in myarray\r\n\t\t\t\treturn item.a == 10\r\n\r\n\titem\r\n\t\ttitle array find statement with explicit thisArg\r\n\t\tittf\r\n\t\t\tfind item in myarray myinstance\r\n\t\t\t\treturn item.a == this.maxAge\r\n\r\n\titem\r\n\t\ttitle array reduce statement\r\n\t\tittf\r\n\t\t\treduce item in myarray 0\r\n\t\t\t\treturn acc + item.a"
      },
      "t/call.ittf.ittf": {
        "type": "CODE",
        "contents": "element call\r\n\ttag _\r\n\tast CallExpression\r\n\tcategory call-statements\r\n\t\r\n\titem\r\n\t\ttitle Call with no parameters\r\n\t\tittf\r\n\t\t\t_ execute\r\n\r\n\titem\r\n\t\ttitle Call with string and number parameters\r\n\t\tittf\r\n\t\t\t_ display\r\n\t\t\t\t@ 'name'\r\n\t\t\t\t@ 3\r\n\t\r\n\titem\r\n\t\ttitle Call with string and call parameters\r\n\t\tittf\r\n\t\t\t_ showUserName\r\n\t\t\t\t@ userId\r\n\t\t\t\t_ getName\r\n\t\t\t\t\t@ userId\r\n\r\n\titem\r\n\t\ttitle Call with string and object parameters\r\n\t\tittf\r\n\t\t\t_ showUserProfile\r\n\t\t\t\t@ userId\r\n\t\t\t\t{\r\n\t\t\t\t\t@ showEmail\r\n\t\t\t\t\t\t_ isEmailVisible\r\n\t\t\t\t\t\t\t@ userId\r\n\t\t\t\t\t[ sections\r\n\t\t\t\t\t\t@ 'about-me'\r\n\t\t\t\t\t\t@ 'projects'"
      },
      "t/function.ittf.ittf": {
        "type": "CODE",
        "contents": "element function\r\n\ttag function, =>, m\r\n\tast FunctionDeclaration, FunctionExpression\r\n\tcategory function-statements\r\n\t\r\n\titem\r\n\t\ttitle Function with no params\r\n\t\tittf\r\n\t\t\tfunction sayHello\r\n\t\t\t\tlog 'Hello'\r\n\r\n\titem\r\n\t\ttitle Function with unchecked params\r\n\t\tittf\r\n\t\t\tfunction sayHello\r\n\t\t\t\tparam name\r\n\t\t\t\tlog 'Hello ' + name\r\n\t\r\n\titem\r\n\t\ttitle Function with checked params\r\n\t\tittf\r\n\t\t\tfunction sayHello\r\n\t\t\t\tstring name\r\n\t\t\t\tlog 'Hello ' + name\r\n\r\n\titem\r\n\t\ttitle Function with checked params and callback\r\n\t\tittf\r\n\t\t\tfunction sayHello\r\n\t\t\t\tstring name\r\n\t\t\t\tcallback\r\n\t\t\t\tlog 'Hello ' + name\r\n\r\n\titem\r\n\t\ttitle Function with checked params and callback\r\n\t\tittf\r\n\t\t\tfunction sayHello\r\n\t\t\t\tstring name\r\n\t\t\t\tany greetings\r\n\t\t\t\tcallback\r\n\t\t\t\tlog 'Hello ' + name\r\n\r\n"
      },
      "t/loops.ittf.ittf": {
        "type": "CODE",
        "contents": "element loops\r\n\ttag _\r\n\tast \r\n\tcategory arrays\r\n\t\r\n\titem\r\n\t\ttitle foreach loop\r\n\t\tittf\r\n\t\t\tforeach item in myarray\r\n\t\t\t\tset item.a = item.b / 2\r\n\r\n\titem\r\n\t\ttitle while loop\r\n\t\tittf\r\n\t\t\twhile item.parent\r\n\t\t\t\tset item = item.parent"
      },
      "t/react.ittf.ittf": {
        "type": "CODE",
        "contents": "element react\r\n\ttag _\r\n\tast \r\n\tcategory react\r\n\t\r\n\titem\r\n\t\ttitle class\r\n\t\tittf\r\n\t\t\treact MyComponent\r\n\t\t\t\trender\r\n\t\t\t\t\treturn\r\n\t\t\t\t\t\th1 Hello world\r\n\r\n\titem\r\n\t\ttitle var\r\n\t\tittf\r\n\t\t\tvar Hello\r\n\t\t\t\tdiv\r\n\t\t\t\t\tp sicut amet nequi abisse\r\n\r\n\titem\r\n\t\ttitle var svg\r\n\t\tittf\r\n\t\t\tvar Hello\r\n\t\t\t\tdiv\r\n\t\t\t\t\tsvg\r\n\t\t\t\t\t\trect\r\n\t\t\t\t\t\t\tstroke-dashoffset 10\r\n\r\n\titem\r\n\t\ttitle class\r\n\t\tittf\r\n\t\t\treact MyComponent\r\n\t\t\t\trender\r\n\t\t\t\t\treturn\r\n\t\t\t\t\t\tdiv\r\n                            @ onClick \r\n                                =>\r\n                                    _ this.handleClose()\r\n                            h1 Hello world\r\n\r\n\titem\r\n\t\ttitle var\r\n\t\tittf\r\n\t\t\tvar Hello\r\n\t\t\t\tdiv\r\n\t\t\t\t\tp sicut amet nequi abisse\r\n\r\n\titem\r\n\t\ttitle full component\r\n\t\tittf\r\n\t\t\treact MyComponent\r\n                state\r\n                    @ open false\r\n                did-mount\r\n                    _ window.addEventListener('scroll', this.handlePaperScroll)\r\n                will-unmount\r\n                    _ window.removeEventListener('scroll', this.handlePaperScroll)\r\n                render\r\n                    prop jsonData\r\n                    const \r\n                        { \r\n                            @ open\r\n                        = this.state\r\n\r\n\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/json.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema json\r\n\telement\r\n\t\ttag vtt\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem \r\n\t\t\ttitle Json object\r\n\t\t\tittf\r\n\t\t\t\t{\r\n\t\t\t\t\tname 'stefi'\r\n\t\t\t\t\tjob 'wizzi'\r\n\t\t\t\t\t[ friends\r\n\t\t\t\t\t\t'arthur'\r\n\t\t\t\t\t\t'marius'\r\n\t\t\t\t\t\t'george'\r\n\r\n\t\titem\r\n\t\t\ttitle Json Array\r\n\t\t\tittf\r\n\t\t\t\t[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid 1\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid 2\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/jswizzi.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\t$\r\n\t\tvar d = '$';\r\n\t\tvar cont = '\\\\';\r\n\t\tvar contb = '\\\\b';\r\n\t\tvar contn = '\\\\n';\r\n\r\n\tschema ittf\r\n\r\n\t$include statements"
      },
      "t/statements.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement jsWizzi statements\r\n\t\ttag\r\n\t\tast \r\n\t\tcategory\r\n\r\n\t\titem\r\n\t\t\ttitle Conditions in scripts\r\n\t\t\trender script\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar name = 'Derby', winner = null;\r\n\t\t\t\t\t\tif (name == 'Ascot') {\r\n\t\t\t\t\t\t\twinner = 'Ribot';\r\n\t\t\t\t\t\t} else if (name == 'Arc de triomphe') {\r\n\t\t\t\t\t\t\twinner = 'Varenne';\r\n\t\t\t\t\t\t} else if (name == 'Derby') {\r\n\t\t\t\t\t\t\twinner = 'Ribot';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\twinner = 'Varenne';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode If the race was ${d}{name} the winner was ${d}{winner}.\r\n\r\n\t\titem\r\n\t\t\ttitle Conditions in markup\r\n\t\t\trender script\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar name = 'Derby';\r\n\t\t\t\t\t${d}if name == 'Ascot'\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Ribot\r\n\t\t\t\t\t${d}elif name == 'Arc de triomphe'\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Varenne\r\n\t\t\t\t\t${d}elif name == 'Derby'\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Ribot\r\n\t\t\t\t\t${d}else\r\n\t\t\t\t\t\tnode If the race was ${d}{name} the winner was Varenne\r\n\r\n\t\titem\r\n\t\t\ttitle For loop in scripts\r\n\t\t\trender script\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar sletters = 'a,b,c,d,e,f,g,h';\r\n\t\t\t\t\t\tvar aletters = sletters.split(',');\r\n\t\t\t\t\t\tvar letter, label='';\r\n\t\t\t\t\t\tfor (var i=0; i<aletters.length; i++) {\r\n\t\t\t\t\t\t\tletter = aletters[i];\r\n\t\t\t\t\t\t\tlabel += i % 2 == 0 ? letter : letter.toUpperCase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode The resulting label has the even letters upper cased: ${d}{label}.\r\n\r\n\t\titem\r\n\t\t\ttitle For loop in markup\r\n\t\t\trender script\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar sletters = 'a,b,c,d,e,f,g,h';\r\n\t\t\t\t\t\tvar aletters = sletters.split(',');\r\n\t\t\t\t\tnode The resulting tree has the even node values upper cased:\r\n\t\t\t\t\t\t${d}foreach letter in aletters\r\n\t\t\t\t\t\t\tnode ${d}{letter_index} ${d}{letter_index % 2 == 0 ? letter : letter.toUpperCase() }\r\n\r\n\t\titem\r\n\t\t\ttitle While loop in scripts\r\n\t\t\trender script\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d}\r\n\t\t\t\t\t\tvar x = 1, odds = '1';\r\n\t\t\t\t\t\twhile ( x < 10 ) {\r\n\t\t\t\t\t\t\tx += 2;\r\n\t\t\t\t\t\t\todds += ', ' + x \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tnode First odd numbers: ${d}{odds}.\r\n\r\n\t\titem\r\n\t\t\ttitle While loop in markup\r\n\t\t\trender script\r\n\t\t\tittf\r\n\t\t\t\troot\r\n\t\t\t\t\t${d} var x = 1, odds = '1'\r\n\t\t\t\t\t${d}while x < 10\r\n\t\t\t\t\t\t${d} x += 2\r\n\t\t\t\t\t\tnode ${d}{ odds += ', ' + x } \r\n\t\t\t\t\t\t"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/md.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema md\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\telement headings\r\n\t\ttag \r\n\t\tast \r\n\t\tcategory \r\n\t\r\n\t\titem\r\n\t\t\ttitle Headings\r\n\t\t\tittf\r\n\t\t\t\th1 Heading 1\r\n\t\t\t\th2 Heading 2\r\n\t\t\t\th3 Heading 2\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/scss.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema scss\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element xml base\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle\r\n\t\tittf\r\n\t\t\tscss\r\n\t\t\t\t@import 'base'\r\n\t\t\t\t. container\r\n\t\t\t\t\t@extend .flex-column-center\r\n\t\t\t\t\t@ align-items center\r\n\t\t\t\t\t@ justify-content flex-start\r\n\t\t\t\t\t@ height 100%\r\n\t\t\t\t\t@ width 100%\r\n\t\t\t\t\t@ font-weight 400\r\n\t\t\t\t\t@ padding-top 1.5rem\r\n\t\t\t\t. panel\r\n\t\t\t\t\t@extend .flex-column-center\r\n\t\t\t\t\t@ justify-content center\r\n\t\t\t\t\t@ padding 1.25rem\r\n\t\t\t\t\t@ width 35%\r\n\t\t\t\t\t@include mobile\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t@ width 75%\r\n\t\t\t\t\t@ min-width 250px\r\n\t\t\t\t\t@ min-height 270px\r\n\t\t\t\t. or\r\n\t\t\t\t\t@ margin-top 1rem\r\n\t\t\t\t\t@ margin-bottom .5rem\r\n\t\t\t\t\t@ font-size 1.3rem\r\n\t\t\t\t. signup\r\n\t\t\t\t\t@extend .flex-column-center\r\n\t\t\t\t\t@ justify-content center\r\n\t\t\t\t\t@ margin-top 2rem\r\n\t\t\t\t\t& Link\r\n\t\t\t\t\t\t@ color $linkBlue;\r\n\t\t\t\t\t\t@ font-size 1.2rem\r\n\t\t\t\t\t\t& \r\n\t\t\t\t\t\t\t: hover\r\n\t\t\t\t\t\t\t@ color $materialBlue;\r\n\t\t\t\t\t& Label\r\n\t\t\t\t\t\t@ font-size 1.3rem\r\n\t\t\t\t\t\t@ font-size 1rem\r\n\t\t\t\t\t\t@ font-weight bold\r\n\t\t\t\t\t\t@ color $mediumGray\r\n\t\t\t\t\t\t@ font-weight 400\r\n\t\t\t\t. providers\r\n\t\t\t\t\t@ margin-top 1rem\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/svg.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema svg\r\n\t$include base\r\n\t$include shapes\r\n\t$include paths\r\n"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element svg base\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle \r\n\t\tittf\r\n\t\t\tsvg\r\n"
      },
      "t/paths.ittf.ittf": {
        "type": "CODE",
        "contents": "element shapes\r\n\ttag rect | circle\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle rect shape\r\n\t\tittf\r\n\t\t\tsvg\r\n\t\t\t\trect\r\n\r\n\titem\r\n\t\ttitle circle shape\r\n\t\tittf\r\n\t\t\tsvg\r\n\t\t\t\tcircle\r\n"
      },
      "t/shapes.ittf.ittf": {
        "type": "CODE",
        "contents": "element shapes\r\n\ttag rect | circle\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle rect shape\r\n\t\tittf\r\n\t\t\tsvg\r\n\t\t\t\trect\r\n\r\n\titem\r\n\t\ttitle circle shape\r\n\t\tittf\r\n\t\t\tsvg\r\n\t\t\t\tcircle\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/text.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema text\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element text base\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle License example\r\n\t\tittf\r\n\t\t\ttext\r\n                ${'$'}params copy|2021\r\n\t\t\t\t\r\n                MIT License\r\n\r\n                Copyright (c) ${'$'}{copy}\r\n\r\n                Permission is hereby granted, free of charge, to any person obtaining a copy\r\n                ....\r\n\r\n\titem\r\n\t\ttitle Special tags\r\n\t\tittf\r\n            text\r\n                Text content is by line.\r\n                    Indentation is respected\r\n                You can insert a blank line with the br tag\r\n                br\r\n                If you want write a br string at start of line you must escape it\r\n                \\br\r\n                The following is a span tag\r\n                span hello span\r\n                The following is an escaped span tag\r\n                \\span hello span\r\n                The following is a bspan tag\r\n                bspan hello bspan\r\n                The following is an escaped bspan tag\r\n                \\bspan hello span\r\n                The following is an indented span tag\r\n                    span hello span\r\n                The following is an indented escaped span tag\r\n                    \\span hello span\r\n                The following is an indented bspan tag\r\n                    bspan hello bspan\r\n                The following is an indented escaped bspan tag\r\n                    \\bspan hello span"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/ts.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema ts\r\n\t$include modules\r\n\t$include var\r\n\t$include functions\r\n\t$include classes\r\n\t$include interfaces\r\n\t$include generics\r\n\t$include advanced"
      },
      "t/advanced.ittf.ittf": {
        "type": "CODE",
        "contents": "element advanced\r\n\ttag\r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Intersection Types\r\n\t\texpected\r\n\t\t\t+ function extend<T, U>(first: T, second: U): T & U {\r\n\t\t\t\t+ let result = {} as T & U;\r\n\t\t\t\t+ for (let id in first) {\r\n\t\t\t\t\t+ (result as any)[id] = (first as any)[id];\r\n\t\t\t\t+ }\r\n\t\t\t\t+ for (let id in second) {\r\n\t\t\t\t\t+ if (!result.hasOwnProperty(id)) {\r\n\t\t\t\t\t\t+ (result as any)[id] = (second as any)[id];\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t\t+ return result;\r\n\t\t\t+ }\r\n\t\t\t+ class Person {\r\n\t\t\t\t+ constructor(public name: string) {}\r\n\t\t\t+ }\r\n\t\t\t+ interface Loggable {\r\n\t\t\t\t+ log(): void;\r\n\t\t\t+ }\r\n\t\t\t+ class ConsoleLogger implements Loggable {\r\n\t\t\t\t+ log() {\r\n\t\t\t\t\t+ // ...\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ var jim = extend(new Person(\"Jim\"), new ConsoleLogger());\r\n\t\t\t+ var n = jim.name;\r\n\t\t\t+ jim.log();\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction extend\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< U\r\n\t\t\t\t\tparam first\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam second\r\n\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:intersect \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\tlet result\r\n\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t:intersect \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t\t{ {}\r\n\t\t\t\t\tfor let id in first\r\n\t\t\t\t\t\tset =\r\n\t\t\t\t\t\t\t@expr \r\n\t\t\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t\t\t@id result\r\n\t\t\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t\t\t.[ id\r\n\t\t\t\t\t\t\t@expr \r\n\t\t\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t\t\t@id first\r\n\t\t\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t\t\t.[ id\r\n\t\t\t\t\tfor let id in second\r\n\t\t\t\t\t\tif !result.hasOwnProperty(id)\r\n\t\t\t\t\t\t\tset =\r\n\t\t\t\t\t\t\t\t@expr \r\n\t\t\t\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t\t\t\t@id result\r\n\t\t\t\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t\t\t\t.[ id\r\n\t\t\t\t\t\t\t\t@expr \r\n\t\t\t\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t\t\t\t@id second\r\n\t\t\t\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t\t\t\t.[ id\r\n\t\t\t\t\treturn result\r\n\t\t\t\tclass Person\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam name\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t:interface Loggable\r\n\t\t\t\t\t:m log\r\n\t\t\t\t\t\t:void \r\n\t\t\t\tclass ConsoleLogger\r\n\t\t\t\t\t:extends Loggable\r\n\t\t\t\t\tm log\r\n\t\t\t\tvar jim = extend(new Person(\"Jim\"), new ConsoleLogger())\r\n\t\t\t\tvar n = jim.name\r\n\t\t\t\t_ jim.log\r\n\r\n\titem\r\n\t\ttitle Union Types - fail at run time\r\n\t\texpected\r\n\t\t\t+ function padLeft(value: string, padding: any) {\r\n\t\t\t\t+ if (typeof padding === \"number\") {\r\n\t\t\t\t\t+ return Array(padding + 1).join(\" \") + value;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ if (typeof padding === \"string\") {\r\n\t\t\t\t\t+ return padding + value;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ throw new Error(`Expected string or number, got '${padding}'.`);\r\n\t\t\t+ }\r\n\t\t\t+ padLeft(\"Hello world\", 4); // returns \"    Hello world\"\r\n\t\t\t+ let indentedString = padLeft(\"Hello world\", true); // passes at compile time, fails at runtime.\r\n\t\t\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction padLeft\r\n\t\t\t\t\tparam value\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tparam padding\r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\tif typeof padding === \"number\"\r\n\t\t\t\t\t\treturn Array(padding + 1).join(\" \") + value\r\n\t\t\t\t\tif typeof padding === \"string\"\r\n\t\t\t\t\t\treturn padding + value\r\n\t\t\t\t\tthrow \r\n\t\t\t\t\t\tnew Error\r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ Expected string or number, got '\r\n\t\t\t\t\t\t\t\t@ padding\r\n\t\t\t\t\t\t\t\t+ '.\r\n\t\t\t\t_ padLeft(\"Hello world\", 4)\r\n\t\t\t\tlet indentedString = padLeft(\"Hello world\", true)\r\n\titem\r\n\t\ttitle Union Types - succeds at run time\r\n\t\texpected\r\n\t\t\t+ function padLeft(value: string, padding: string | number) {\r\n\t\t\t\t+ // ...\r\n\t\t\t+ }\r\n\t\t\t+ let indentedString = padLeft(\"Hello world\", true); // errors during compilation\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction padLeft\r\n\t\t\t\t\tparam value\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tparam padding\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\tlet indentedString = padLeft(\"Hello world\", true)\r\n\t\t\t\t\r\n\titem\r\n\t\ttitle Union Types - common members\r\n\t\texpected\r\n\t\t\t+ // If we have a value that has a union type, we can only access members that are common to all types in the union.\r\n\t\t\t+ interface Bird {\r\n\t\t\t\t+ fly();\r\n\t\t\t\t+ layEggs();\r\n\t\t\t+ }\r\n\t\t\t+ interface Fish {\r\n\t\t\t\t+ swim();\r\n\t\t\t\t+ layEggs();\r\n\t\t\t+ }\r\n\t\t\t+ function getSmallPet(): Fish | Bird {\r\n\t\t\t\t+ // ...\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Bird\r\n\t\t\t\t\t:m fly\r\n\t\t\t\t\t:m layEggs\r\n\t\t\t\t:interface Fish\r\n\t\t\t\t\t:m swim\r\n\t\t\t\t\t:m layEggs\r\n\t\t\t\tfunction getSmallPet\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:ref Fish\r\n\t\t\t\t\t\t\t:ref Bird\r\n\t\t\t\tlet pet = getSmallPet()\r\n\t\t\t\t_ pet.layEggs\r\n\t\t\t\t_ pet.swim\r\n\r\n\titem\r\n\t\ttitle Type Guards and Differentiating Types\r\n\t\texpected\r\n\t\t\t+ let pet = getSmallPet();\r\n\t\t\t+ if ((pet as Fish).swim) {\r\n\t\t\t\t+ (pet as Fish).swim();\r\n\t\t\t+ } else {\r\n\t\t\t\t+ (pet as Bird).fly();\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tlet pet = getSmallPet()\r\n\t\t\t\tif \r\n\t\t\t\t\ttest\r\n\t\t\t\t\t\t@expr \r\n\t\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t\t@id pet\r\n\t\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t\t:ref Fish\r\n\t\t\t\t\t\t\t. swim\r\n\t\t\t\t\t_ \r\n\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t@id pet\r\n\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t:ref Fish\r\n\t\t\t\t\t\t._ swim\r\n\t\t\t\telse\r\n\t\t\t\t\t_ \r\n\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t@id pet\r\n\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t:ref Bird\r\n\t\t\t\t\t\t._ fly\r\n    \r\n\titem\r\n\t\ttitle User - Defined Type Guards\r\n\t\texpected\r\n\t\t\t+ function isFish(pet: Fish | Bird): pet is Fish {\r\n\t\t\t\t+ return (pet as Fish).swim !== undefined;\r\n\t\t\t+ }\r\n\t\t\t+ function isNumber(x: any): x is number {\r\n\t\t\t\t+ return typeof x === \"number\";\r\n\t\t\t+ }\r\n\t\t\t+ function isString(x: any): x is string {\r\n\t\t\t\t+ return typeof x === \"string\";\r\n\t\t\t+ }\r\n\t\t\t+ function padLeft(value: string, padding: string | number) {\r\n\t\t\t\t+ if (isNumber(padding)) {\r\n\t\t\t\t\t+ return Array(padding + 1).join(\" \") + value;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ if (isString(padding)) {\r\n\t\t\t\t\t+ return padding + value;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ throw new Error(`Expected string or number, got '${padding}'.`);\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction isFish\r\n\t\t\t\t\tparam pet\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:ref Fish\r\n\t\t\t\t\t\t\t:ref Bird\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:predicate pet\r\n\t\t\t\t\t\t\t:ref Fish\r\n\t\t\t\t\treturn \r\n\t\t\t\t\t\t!== \r\n\t\t\t\t\t\t\t@expr \r\n\t\t\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t\t\t@id pet\r\n\t\t\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t\t\t:ref Fish\r\n\t\t\t\t\t\t\t\t. swim\r\n\t\t\t\t\t\t\t+ undefined\r\n\t\t\t\tfunction isNumber\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:predicate x\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\treturn typeof x === \"number\"\r\n\t\t\t\tfunction isString\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:predicate x\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\treturn typeof x === \"string\"\r\n\t\t\t\tfunction padLeft\r\n\t\t\t\t\tparam value\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tparam padding\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tif isNumber(padding)\r\n\t\t\t\t\t\treturn Array(padding + 1).join(\" \") + value\r\n\t\t\t\t\tif isString(padding)\r\n\t\t\t\t\t\treturn padding + value\r\n\t\t\t\t\tthrow \r\n\t\t\t\t\t\tnew Error\r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ Expected string or number, got '\r\n\t\t\t\t\t\t\t\t@ padding\r\n\t\t\t\t\t\t\t\t+ '.\r\n\r\n\titem\r\n\t\ttitle Instanceof type guards\r\n\t\texpected\r\n\t\t\t+ interface Padder {\r\n\t\t\t\t+ getPaddingString(): string\r\n\t\t\t+ }\r\n\t\t\t+ class SpaceRepeatingPadder implements Padder {\r\n\t\t\t\t+ constructor(private numSpaces: number) {}\r\n\t\t\t\t+ getPaddingString() {\r\n\t\t\t\t\t+ return Array(this.numSpaces + 1).join(\" \");\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ class StringPadder implements Padder {\r\n\t\t\t\t+ constructor(private value: string) { }\r\n\t\t\t\t+ getPaddingString() {\r\n\t\t\t\t\t+ return this.value;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ function getRandomPadder() {\r\n\t\t\t\t+ return Math.random() < 0.5 ?\r\n\t\t\t\t\t+ new SpaceRepeatingPadder(4) :\r\n\t\t\t\t\t+ new StringPadder(\"  \");\r\n\t\t\t+ }\r\n\t\t\t+ // Type is 'SpaceRepeatingPadder | StringPadder'\r\n\t\t\t+ let padder: Padder = getRandomPadder();\r\n\t\t\t+ if (padder instanceof SpaceRepeatingPadder) {\r\n\t\t\t\t+ var x = padder; // type narrowed to 'SpaceRepeatingPadder'\r\n\t\t\t+ }\r\n\t\t\t+ if (padder instanceof StringPadder) {\r\n\t\t\t\t+ var x = padder; // type narrowed to 'StringPadder'\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Padder\r\n\t\t\t\t\t:m getPaddingString\r\n\t\t\t\t\t\t:string \r\n\t\t\t\tclass SpaceRepeatingPadder\r\n\t\t\t\t\t:extends Padder\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam numSpaces\r\n\t\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tm getPaddingString\r\n\t\t\t\t\t\treturn Array(this.numSpaces + 1).join(\" \")\r\n\t\t\t\tclass StringPadder\r\n\t\t\t\t\t:extends Padder\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam value\r\n\t\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\tm getPaddingString\r\n\t\t\t\t\t\treturn this.value\r\n\t\t\t\tfunction getRandomPadder\r\n\t\t\t\t\treturn \r\n\t\t\t\t\t\tiif Math.random() < 0.5\r\n\t\t\t\t\t\t\tthen new SpaceRepeatingPadder(4)\r\n\t\t\t\t\t\t\telse new StringPadder(\"  \")\r\n\t\t\t\t# Type is 'SpaceRepeatingPadder | StringPadder'\r\n\t\t\t\tlet padder\r\n\t\t\t\t\t:ref Padder\r\n\t\t\t\t\t_ getRandomPadder\r\n\t\t\t\tif padder instanceof SpaceRepeatingPadder\r\n\t\t\t\t\tvar x = padder\r\n\t\t\t\t\t# type narrowed to 'SpaceRepeatingPadder'\r\n\t\t\t\tif padder instanceof StringPadder\r\n\t\t\t\t\tvar x = padder\r\n\t\t\t\t\t# type narrowed to 'StringPadder'\r\n\r\n\titem\r\n\t\ttitle Nullable types\r\n\t\texpected\r\n\t\t\t+ let s = \"foo\";\r\n\t\t\t+ s = null; // error, 'null' is not assignable to 'string'\r\n\t\t\t+ let sn: string | null = \"bar\";\r\n\t\t\t+ sn = null; // ok\r\n\t\t\t+ sn = undefined; // error, 'undefined' is not assignable to 'string | null'\r\n\t\t\t+ // Note that TypeScript treats null and undefined differently in order to match JavaScript semantics. \r\n\t\t\t+ // string | null is a different type than string | undefined and string | undefined | null.\r\n\t\t\t+ /*\r\n\t\t\t\t+ Optional parameters and properties\r\n\t\t\t\t+ With --strictNullChecks, an optional parameter automatically adds | undefined:\r\n\t\t\t+ */\r\n\t\t\t+ function f(x: number, y?: number) {\r\n\t\t\t\t+ return x + (y || 0);\r\n\t\t\t+ }\r\n\t\t\t+ f(1, 2);\r\n\t\t\t+ f(1);\r\n\t\t\t+ f(1, undefined);\r\n\t\t\t+ f(1, null); // error, 'null' is not assignable to 'number | undefined'\r\n\t\t\t+ // The same is true for optional properties:\r\n\t\t\t+ class C {\r\n\t\t\t\t+ a: number;\r\n\t\t\t\t+ b?: number;\r\n\t\t\t+ }\r\n\t\t\t+ let c = new C();\r\n\t\t\t+ c.a = 12;\r\n\t\t\t+ c.a = undefined; // error, 'undefined' is not assignable to 'number'\r\n\t\t\t+ c.b = 13;\r\n\t\t\t+ c.b = undefined; // ok\r\n\t\t\t+ c.b = null; // error, 'null' is not assignable to 'number | undefined'\r\n\t\t\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tlet s = \"foo\"\r\n\t\t\t\tset s = null\r\n\t\t\t\tlet sn\r\n\t\t\t\t\t:union \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:null \r\n\t\t\t\t\t:= \"bar\"\r\n\t\t\t\tset sn = null\r\n\t\t\t\tset sn = undefined\r\n\t\t\t\tfunction f\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tparam \r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\treturn x + y || 0\r\n\t\t\t\t_ f(1, 2)\r\n\t\t\t\t_ f(1)\r\n\t\t\t\t_ f(1, undefined)\r\n\t\t\t\t_ f(1, null)\r\n\t\t\t\tclass C\r\n\t\t\t\t\tp a\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tp b\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tlet c = new C()\r\n\t\t\t\tset c.a = 12\r\n\t\t\t\tset c.a = undefined\r\n\t\t\t\tset c.b = 13\r\n\t\t\t\tset c.b = undefined\r\n\t\t\t\tset c.b = null\r\n\r\n\titem\r\n\t\ttitle Type guards and type assertions\r\n\t\texpected\r\n\t\t\t+ function f(sn: string | null): string {\r\n\t\t\t\t+ if (sn == null) {\r\n\t\t\t\t\t+ return \"default\";\r\n\t\t\t\t+ } else {\r\n\t\t\t\t\t+ return sn;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ // The null elimination is pretty obvious here, but you can use terser operators too:\r\n\t\t\t+ function f(sn: string | null): string {\r\n\t\t\t\t+ return sn || \"default\";\r\n\t\t\t+ }\r\n\t\t\t+ // In cases where the compiler can’t eliminate null or undefined, \r\n\t\t\t+ // you can use the type assertion operator to manually remove them. \r\n\t\t\t+ // The syntax is postfix !: identifier! removes null and undefined from the type of identifier:\r\n\t\t\t+ function broken(name: string | null): string {\r\n\t\t\t\t+ function postfix(epithet: string) {\r\n\t\t\t\t\t+ return name.charAt(0) + '.  the ' + epithet; // error, 'name' is possibly null\r\n\t\t\t\t+ }\r\n\t\t\t\t+ name = name || \"Bob\";\r\n\t\t\t\t+ return postfix(\"great\");\r\n\t\t\t+ }\r\n\t\t\t+ function fixed(name: string | null): string {\r\n\t\t\t\t+ function postfix(epithet: string) {\r\n\t\t\t\t\t+ return name!.charAt(0) + '.  the ' + epithet; // ok\r\n\t\t\t\t+ }\r\n\t\t\t\t+ name = name || \"Bob\";\r\n\t\t\t\t+ return postfix(\"great\");\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction f\r\n\t\t\t\t\tparam sn\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tif sn == null\r\n\t\t\t\t\t\treturn \"default\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn sn\r\n\t\t\t\tfunction f\r\n\t\t\t\t\tparam sn\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\treturn sn || \"default\"\r\n\t\t\t\tfunction broken\r\n\t\t\t\t\tparam name\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tfunction postfix\r\n\t\t\t\t\t\tparam epithet\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\treturn name.charAt(0) + '.  the ' + epithet\r\n\t\t\t\t\tset name = name || \"Bob\"\r\n\t\t\t\t\treturn postfix(\"great\")\r\n\t\t\t\tfunction fixed\r\n\t\t\t\t\tparam name\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tfunction postfix\r\n\t\t\t\t\t\tparam epithet\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\top+ \r\n\t\t\t\t\t\t\t\top+ \r\n\t\t\t\t\t\t\t\t\t_ \r\n\t\t\t\t\t\t\t\t\t\t._ charAt\r\n\t\t\t\t\t\t\t\t\t\t\t@ 0\r\n\t\t\t\t\t\t\t\t\t+ '.  the '\r\n\t\t\t\t\t\t\t\t+ epithet\r\n\t\t\t\t\tset name = name || \"Bob\"\r\n\t\t\t\t\treturn postfix(\"great\")\r\n\r\n\titem\r\n\t\ttitle Type Aliases\r\n\t\texpected\r\n\t\t\t+ type Name = string;\r\n\t\t\t+ type NameResolver = () => string;\r\n\t\t\t+ type NameOrResolver = Name | NameResolver;\r\n\t\t\t+ function getName(n: NameOrResolver): Name {\r\n\t\t\t\t+ if (typeof n === \"string\") {\r\n\t\t\t\t\t+ return n;\r\n\t\t\t\t+ } else {\r\n\t\t\t\t\t+ return n();\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ // Aliasing doesn’t actually create a new type - it creates a new name to refer to that type. \r\n\t\t\t+ // Aliasing a primitive is not terribly useful, though it can be used as a form of documentation.\r\n\t\t\t+ // Just like interfaces, type aliases can also be generic - we can just add type parameters and use them on the right side of the alias declaration:\r\n\t\t\t+ type Container<T> = { value: T };\r\n\t\t\t+ // We can also have a type alias refer to itself in a property:\r\n\t\t\t+ type Tree<T> = {\r\n\t\t\t\t+ value: T;\r\n\t\t\t\t+ left: Tree<T>;\r\n\t\t\t\t+ right: Tree<T>;\r\n\t\t\t+ }\r\n\t\t\t+ // Together with intersection types, we can make some pretty mind-bending types:\r\n\t\t\t+ type LinkedList<T> = T & { next: LinkedList<T> };\r\n\t\t\t+ interface Person {\r\n\t\t\t\t+ name: string;\r\n\t\t\t+ }\r\n\t\t\t+ var people: LinkedList<Person>;\r\n\t\t\t+ var s = people.name;\r\n\t\t\t+ var s = people.next.name;\r\n\t\t\t+ var s = people.next.next.name;\r\n\t\t\t+ var s = people.next.next.next.name;\r\n\t\t\t+ // However, it’s not possible for a type alias to appear anywhere else on the right side of the declaration:\r\n\t\t\t+ type Yikes = Array<Yikes>; // error\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type Name\r\n\t\t\t\t\t:string \r\n\t\t\t\t:type NameResolver\r\n\t\t\t\t\t:=> \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t:type NameOrResolver\r\n\t\t\t\t\t:union \r\n\t\t\t\t\t\t:ref Name\r\n\t\t\t\t\t\t:ref NameResolver\r\n\t\t\t\tfunction getName\r\n\t\t\t\t\tparam n\r\n\t\t\t\t\t\t:ref NameOrResolver\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref Name\r\n\t\t\t\t\tif typeof n === \"string\"\r\n\t\t\t\t\t\treturn n\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn n()\r\n\t\t\t\t:type Container\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:p value\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type Tree\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:p value\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:p left\r\n\t\t\t\t\t\t\t:ref Tree\r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:p right\r\n\t\t\t\t\t\t\t:ref Tree\r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type LinkedList\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:intersect \r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t:p next\r\n\t\t\t\t\t\t\t\t:ref LinkedList\r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:interface Person\r\n\t\t\t\t\t:p name\r\n\t\t\t\t\t\t:string \r\n\t\t\t\tvar people\r\n\t\t\t\t\t:ref LinkedList\r\n\t\t\t\t\t\t:ref Person\r\n\t\t\t\tvar s = people.name\r\n\t\t\t\tvar s = people.next.name\r\n\t\t\t\tvar s = people.next.next.name\r\n\t\t\t\tvar s = people.next.next.next.name\r\n\t\t\t\t:type Yikes\r\n\t\t\t\t\t:ref Array\r\n\t\t\t\t\t\t:ref Yikes\r\n\r\n\titem\r\n\t\ttitle Interfaces vs.Type Aliases\r\n\t\texpected\r\n\t\t\t+\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type Alias\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:p num\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t:interface Interface\r\n\t\t\t\t\t:p num\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:function aliased\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:ref Alias\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref Alias\r\n\t\t\t\t:function interfaced\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:ref Interface\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref Interface\r\n\t\r\n\titem\r\n\t\ttitle String Literal Types\r\n\t\texpected\r\n\t\t\t+ type Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\";\r\n\t\t\t+ class UIElement {\r\n\t\t\t\t+ animate(dx: number, dy: number, easing: Easing) {\r\n\t\t\t\t\t+ if (easing === \"ease-in\") {\r\n\t\t\t\t\t+ } else if (easing === \"ease-out\") {\r\n\t\t\t\t\t+ } else if (easing === \"ease-in-out\") {\r\n\t\t\t\t\t+ } else {\r\n\t\t\t\t\t\t+ // error! should not pass null or undefined.\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let button = new UIElement();\r\n\t\t\t+ button.animate(0, 0, \"ease-in\");\r\n\t\t\t+ button.animate(0, 0, \"uneasy\"); // error: \"uneasy\" is not allowed here\r\n\t\t\t+ // You can pass any of the three allowed strings, but any other string will give the error\r\n\t\t\t+ // Argument of type '\"uneasy\"' is not assignable to parameter of type '\"ease-in\" | \"ease-out\" | \"ease-in-out\"'\r\n\t\t\t+ // String literal types can be used in the same way to distinguish overloads:\r\n\t\t\t+ function createElement(tagName: \"img\"): HTMLImageElement;\r\n\t\t\t+ function createElement(tagName: \"input\"): HTMLInputElement;\r\n\t\t\t+ // ... more overloads ...\r\n\t\t\t+ function createElement(tagName: string): Element {\r\n\t\t\t\t+ // ... code goes here ...\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type Easing\r\n\t\t\t\t\t:union \r\n\t\t\t\t\t\t:literal \"ease-in\"\r\n\t\t\t\t\t\t:literal \"ease-out\"\r\n\t\t\t\t\t\t:literal \"ease-in-out\"\r\n\t\t\t\tclass UIElement\r\n\t\t\t\t\tm animate\r\n\t\t\t\t\t\tparam dx\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam dy\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam easing\r\n\t\t\t\t\t\t\t:ref Easing\r\n\t\t\t\t\t\tif easing === \"ease-in\"\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tif easing === \"ease-out\"\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tif easing === \"ease-in-out\"\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\tlet button = new UIElement()\r\n\t\t\t\t_ button.animate(0, 0, \"ease-in\")\r\n\t\t\t\t_ button.animate(0, 0, \"uneasy\")\r\n\t\t\t\t:function createElement\r\n\t\t\t\t\tparam tagName\r\n\t\t\t\t\t\t:literal \"img\"\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref HTMLImageElement\r\n\t\t\t\t:function createElement\r\n\t\t\t\t\tparam tagName\r\n\t\t\t\t\t\t:literal \"input\"\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref HTMLInputElement\r\n\t\t\t\tfunction createElement\r\n\t\t\t\t\tparam tagName\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref Element\r\n\r\n\titem\r\n\t\ttitle Numeric Literal Types\r\n\t\texpected\r\n\t\t\t+ function rollDie(): 1 | 2 | 3 | 4 | 5 | 6 {\r\n\t\t\t+ }\r\n\t\t\t+ // These are seldom written explicitly, they can be useful when narrowing can catch bugs:\r\n\t\t\t+ function foo(x: number) {\r\n\t\t\t\t+ if (x !== 1 || x !== 2) {\r\n\t\t\t\t\t+ // Operator '!==' cannot be applied to types '1' and '2'.\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ // In other words, x must be 1 when it gets compared to 2, meaning that the above check is making an invalid comparison.\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction rollDie\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:literal 1\r\n\t\t\t\t\t\t\t:literal 2\r\n\t\t\t\t\t\t\t:literal 3\r\n\t\t\t\t\t\t\t:literal 4\r\n\t\t\t\t\t\t\t:literal 5\r\n\t\t\t\t\t\t\t:literal 6\r\n\t\t\t\tfunction foo\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tif x !== 1 || x !== 2\r\n\r\n\titem\r\n\t\ttitle Enum Member Types\r\n\t\texpected\r\n\t\t\t+ interface Square {\r\n\t\t\t\t+ kind: \"square\";\r\n\t\t\t\t+ size: number;\r\n\t\t\t+ }\r\n\t\t\t+ interface Rectangle {\r\n\t\t\t\t+ kind: \"rectangle\";\r\n\t\t\t\t+ width: number;\r\n\t\t\t\t+ height: number;\r\n\t\t\t+ }\r\n\t\t\t+ interface Circle {\r\n\t\t\t\t+ kind: \"circle\";\r\n\t\t\t\t+ radius: number;\r\n\t\t\t+ }\r\n\t\t\t+ // First we declare the interfaces we will union. Each interface has a kind property with \r\n\t\t\t+ // a different string literal type.The kind property is called the discriminant or tag.The other properties are specific to each interface.Notice that the interfaces are currently unrelated.Let’s put them into a union:\r\n\t\t\t+ type Shape = Square | Rectangle | Circle;\r\n\t\t\t+ // Now let’s use the discriminated union:\r\n\t\t\t+ function area(s: Shape) {\r\n\t\t\t\t+ switch (s.kind) {\r\n\t\t\t\t\t+ case \"square\": return s.size * s.size;\r\n\t\t\t\t\t+ case \"rectangle\": return s.height * s.width;\r\n\t\t\t\t\t+ case \"circle\": return Math.PI * s.radius ** 2;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Square\r\n\t\t\t\t\t:p kind\r\n\t\t\t\t\t\t:literal \"square\"\r\n\t\t\t\t\t:p size\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:interface Rectangle\r\n\t\t\t\t\t:p kind\r\n\t\t\t\t\t\t:literal \"rectangle\"\r\n\t\t\t\t\t:p width\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:p height\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:interface Circle\r\n\t\t\t\t\t:p kind\r\n\t\t\t\t\t\t:literal \"circle\"\r\n\t\t\t\t\t:p radius\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:type Shape\r\n\t\t\t\t\t:union \r\n\t\t\t\t\t\t:ref Square\r\n\t\t\t\t\t\t:ref Rectangle\r\n\t\t\t\t\t\t:ref Circle\r\n\t\t\t\tfunction area\r\n\t\t\t\t\tparam s\r\n\t\t\t\t\t\t:ref Shape\r\n\t\t\t\t\tswitch s.kind\r\n\t\t\t\t\t\tcase \"square\"\r\n\t\t\t\t\t\t\treturn s.size * s.size\r\n\t\t\t\t\t\tcase \"rectangle\"\r\n\t\t\t\t\t\t\treturn s.height * s.width\r\n\t\t\t\t\t\tcase \"circle\"\r\n\t\t\t\t\t\t\treturn Math.PI * s.radius ** 2\r\n\r\n\titem\r\n\t\ttitle Exhaustiveness checking\r\n\t\texpected\r\n\t\t\t+ type Shape = Square | Rectangle | Circle | Triangle;\r\n\t\t\t+ function area(s: Shape) {\r\n\t\t\t\t+ switch (s.kind) {\r\n\t\t\t\t\t+ case \"square\": return s.size * s.size;\r\n\t\t\t\t\t+ case \"rectangle\": return s.height * s.width;\r\n\t\t\t\t\t+ case \"circle\": return Math.PI * s.radius ** 2;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ // should error here - we didn't handle case \"triangle\"\r\n\t\t\t+ }\r\n\t\t\t+ // There are two ways to do this. The first is to turn on --strictNullChecks and specify a return type:\r\n\t\t\t+ function area(s: Shape): number { // error: returns number | undefined\r\n\t\t\t\t+ switch (s.kind) {\r\n\t\t\t\t\t+ case \"square\": return s.size * s.size;\r\n\t\t\t\t\t+ case \"rectangle\": return s.height * s.width;\r\n\t\t\t\t\t+ case \"circle\": return Math.PI * s.radius ** 2;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ // Because the switch is no longer exhaustive, TypeScript is aware that the function could sometimes \r\n\t\t\t+ // return undefined.If you have an explicit return type number, then you will get an error that \r\n\t\t\t+ // the return type is actually number | undefined.However, this method is quite subtle and, besides, --strictNullChecks does not always work with old code.\r\n\t\t\t+ // The second method uses the never type that the compiler uses to check for exhaustiveness:\r\n\t\t\t+ function assertNever(x: never): never {\r\n\t\t\t\t+ throw new Error(\"Unexpected object: \" + x);\r\n\t\t\t+ }\r\n\t\t\t+ function area(s: Shape) {\r\n\t\t\t\t+ switch (s.kind) {\r\n\t\t\t\t\t+ case \"square\": return s.size * s.size;\r\n\t\t\t\t\t+ case \"rectangle\": return s.height * s.width;\r\n\t\t\t\t\t+ case \"circle\": return Math.PI * s.radius ** 2;\r\n\t\t\t\t\t+ default: return assertNever(s); // error here if there are missing cases\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type Shape\r\n\t\t\t\t\t:union \r\n\t\t\t\t\t\t:ref Square\r\n\t\t\t\t\t\t:ref Rectangle\r\n\t\t\t\t\t\t:ref Circle\r\n\t\t\t\t\t\t:ref Triangle\r\n\t\t\t\tfunction area\r\n\t\t\t\t\tparam s\r\n\t\t\t\t\t\t:ref Shape\r\n\t\t\t\t\tswitch s.kind\r\n\t\t\t\t\t\tcase \"square\"\r\n\t\t\t\t\t\t\treturn s.size * s.size\r\n\t\t\t\t\t\tcase \"rectangle\"\r\n\t\t\t\t\t\t\treturn s.height * s.width\r\n\t\t\t\t\t\tcase \"circle\"\r\n\t\t\t\t\t\t\treturn Math.PI * s.radius ** 2\r\n\t\t\t\tfunction area\r\n\t\t\t\t\tparam s\r\n\t\t\t\t\t\t:ref Shape\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tswitch s.kind\r\n\t\t\t\t\t\tcase \"square\"\r\n\t\t\t\t\t\t\treturn s.size * s.size\r\n\t\t\t\t\t\tcase \"rectangle\"\r\n\t\t\t\t\t\t\treturn s.height * s.width\r\n\t\t\t\t\t\tcase \"circle\"\r\n\t\t\t\t\t\t\treturn Math.PI * s.radius ** 2\r\n\t\t\t\tfunction assertNever\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:never \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:never \r\n\t\t\t\t\tthrow new Error(\"Unexpected object: \" + x)\r\n\t\t\t\tfunction area\r\n\t\t\t\t\tparam s\r\n\t\t\t\t\t\t:ref Shape\r\n\t\t\t\t\tswitch s.kind\r\n\t\t\t\t\t\tcase \"square\"\r\n\t\t\t\t\t\t\treturn s.size * s.size\r\n\t\t\t\t\t\tcase \"rectangle\"\r\n\t\t\t\t\t\t\treturn s.height * s.width\r\n\t\t\t\t\t\tcase \"circle\"\r\n\t\t\t\t\t\t\treturn Math.PI * s.radius ** 2\r\n\t\t\t\t\t\tdefault \r\n\t\t\t\t\t\t\treturn assertNever(s)\r\n\t\r\n\titem\r\n\t\ttitle Polymorphic this types\r\n\t\texpected\r\n\t\t\t+ class BasicCalculator {\r\n\t\t\t\t+ public constructor(protected value: number = 0) { }\r\n\t\t\t\t+ public currentValue(): number {\r\n\t\t\t\t\t+ return this.value;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ public add(operand: number): this {\r\n\t\t\t\t\t+ this.value += operand;\r\n\t\t\t\t\t+ return this;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ public multiply(operand: number): this {\r\n\t\t\t\t\t+ this.value *= operand;\r\n\t\t\t\t\t+ return this;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ // ... other operations go here ...\r\n\t\t\t+ }\r\n\t\t\t+ let v = new BasicCalculator(2)\r\n\t\t\t\t+ .multiply(5)\r\n\t\t\t\t+ .add(1)\r\n\t\t\t\t+ .currentValue();\r\n\t\t\t+ // Since the class uses this types, you can extend it and the new class can use the old methods with no changes.\r\n\t\t\t+ class ScientificCalculator extends BasicCalculator {\r\n\t\t\t\t+ public constructor(value = 0) {\r\n\t\t\t\t\t+ super(value);\r\n\t\t\t\t+ }\r\n\t\t\t\t+ public sin() {\r\n\t\t\t\t\t+ this.value = Math.sin(this.value);\r\n\t\t\t\t\t+ return this;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ // ... other operations go here ...\r\n\t\t\t+ }\r\n\t\t\t+ let v = new ScientificCalculator(2)\r\n\t\t\t\t+ .multiply(5)\r\n\t\t\t\t+ .sin()\r\n\t\t\t\t+ .add(1)\r\n\t\t\t\t+ .currentValue();\r\n\t\t\t+ // Without this types, ScientificCalculator would not have been able to extend BasicCalculator and keep the fluent interface. multiply would have returned BasicCalculator, which doesn’t have the sin method. However, with this types, multiply returns this, which is ScientificCalculator here.\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass BasicCalculator\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\tparam value\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t:= 0\r\n\t\t\t\t\tm currentValue\r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\treturn this.value\r\n\t\t\t\t\tm add\r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\tparam operand\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tset this.value += operand\r\n\t\t\t\t\t\treturn this\r\n\t\t\t\t\tm multiply\r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\tparam operand\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tset this.value *= operand\r\n\t\t\t\t\t\treturn this\r\n\t\t\t\tlet v = new BasicCalculator(2).multiply(5).add(1).currentValue()\r\n\t\t\t\tclass ScientificCalculator\r\n\t\t\t\t\tsuper BasicCalculator\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\tparam value = 0\r\n\t\t\t\t\t\t_ super(value)\r\n\t\t\t\t\tm sin\r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\tset this.value = Math.sin(this.value)\r\n\t\t\t\t\t\treturn this\r\n\t\t\t\tlet v = new ScientificCalculator(2).multiply(5).sin().add(1).currentValue()\r\n\r\n\titem\r\n\t\ttitle Index types\r\n\t\texpected\r\n\t\t\t+ function pluck(o, names) {\r\n\t\t\t\t+ return names.map(n => o[n]);\r\n\t\t\t+ }\r\n\t\t\t+ // Here’s how you would write and use this function in TypeScript, using the index type query and indexed access operators:\r\n\t\t\t+ function pluck<T, K extends keyof T>(o: T, names: K[]): T[K][] {\r\n\t\t\t\t+ return names.map(n => o[n]);\r\n\t\t\t+ }\r\n\t\t\t+ interface Person {\r\n\t\t\t\t+ name: string;\r\n\t\t\t\t+ age: number;\r\n\t\t\t+ }\r\n\t\t\t+ let person: Person = {\r\n\t\t\t\t+ name: 'Jarid',\r\n\t\t\t\t+ age: 35\r\n\t\t\t+ };\r\n\t\t\t+ let strings: string[] = pluck(person, ['name']); // ok, string[]\r\n\t\t\t+ // The compiler checks that name is actually a property on Person. The example introduces a couple of new type operators. \r\n\t\t\t+ // First is keyof T, the index type query operator.For any type T, keyof T is the union of known, public property names of T.For example:\r\n\t\t\t+ let personProps: keyof Person; // 'name' | 'age'\r\n\t\t\t+ // keyof Person is completely interchangeable with 'name' | 'age'. The difference is that if you add another property to Person, \r\n\t\t\t+ // say address: string, then keyof Person will automatically update to be 'name' | 'age' | 'address'.And you can use keyof in generic \r\n\t\t\t+ // contexts like pluck, where you can’t possibly know the property names ahead of time.That means the compiler will check that you pass \r\n\t\t\t+ // the right set of property names to pluck:\r\n\t\t\t+ pluck(person, ['age', 'unknown']); // error, 'unknown' is not in 'name' | 'age'\r\n\t\t\t+ // The second operator is T[K], the indexed access operator. Here, the type syntax reflects the expression syntax. \r\n\t\t\t+ // That means that person['name'] has the type Person['name']— which in our example is just string.However, just like index type queries, \r\n\t\t\t+ // you can use T[K] in a generic context, which is where its real power comes to life.You just have to make sure that the type variable K extends keyof T.\r\n\t\t\t+ // Here’s another example with a function named getProperty.\r\n\t\t\t+ function getProperty<T, K extends keyof T>(o: T, name: K): T[K] {\r\n\t\t\t\t+ return o[name]; // o[name] is of type T[K]\r\n\t\t\t+ }\r\n\t\t\t+ // In getProperty, o: T and name: K, so that means o[name]: T[K]. Once you return the T[K] result, the compiler will instantiate the actual type of the key, \r\n\t\t\t+ // so the return type of getProperty will vary according to which property you request.\r\n\t\t\t+ let name: string = getProperty(person, 'name');\r\n\t\t\t+ let age: number = getProperty(person, 'age');\r\n\t\t\t+ let unknown = getProperty(person, 'unknown'); // error, 'unknown' is not in 'name' | 'age'\r\n\t\t\t+ // Index types and string index signatures\r\n\t\t\t+ // keyof and T[K] interact with string index signatures. If you have a type with a string index signature, keyof T will just be string. \r\n\t\t\t+ // And T[string] is just the type of the index signature:\r\n\t\t\t+ interface Map<T> {\r\n\t\t\t\t+ [key: string]: T;\r\n\t\t\t+ }\r\n\t\t\t+ let keys: keyof Map<number>; // string\r\n\t\t\t+ let value: Map<number>['foo']; // number\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction pluck\r\n\t\t\t\t\tparam o\r\n\t\t\t\t\tparam names\r\n\t\t\t\t\treturn \r\n\t\t\t\t\t\t_ names.map\r\n\t\t\t\t\t\t\t=> \r\n\t\t\t\t\t\t\t\tparam n\r\n\t\t\t\t\t\t\t\t+ o[n]\r\n\t\t\t\tfunction pluck\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< K\r\n\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam o\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam names\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\treturn \r\n\t\t\t\t\t\t_ names.map\r\n\t\t\t\t\t\t\t=> \r\n\t\t\t\t\t\t\t\tparam n\r\n\t\t\t\t\t\t\t\t+ o[n]\r\n\t\t\t\t:interface Person\r\n\t\t\t\t\t:p name\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:p age\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tlet person\r\n\t\t\t\t\t:ref Person\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t@ name 'Jarid'\r\n\t\t\t\t\t\t@ age 35\r\n\t\t\t\tlet strings\r\n\t\t\t\t\t:[ \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t_ pluck\r\n\t\t\t\t\t\t@ person\r\n\t\t\t\t\t\t[ \r\n\t\t\t\t\t\t\t@ 'name'\r\n\t\t\t\tlet personProps\r\n\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t:ref Person\r\n\t\t\t\t_ pluck\r\n\t\t\t\t\t@ person\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ 'age'\r\n\t\t\t\t\t\t@ 'unknown'\r\n\t\t\t\tfunction getProperty\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< K\r\n\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam o\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam name\r\n\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\treturn o[name]\r\n\t\t\t\tlet name\r\n\t\t\t\t\t:string \r\n\t\t\t\t\t_ getProperty(person, 'name')\r\n\t\t\t\tlet age\r\n\t\t\t\t\t:number \r\n\t\t\t\t\t_ getProperty(person, 'age')\r\n\t\t\t\tlet unknown = getProperty(person, 'unknown')\r\n\t\t\t\t:interface Map\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:index \r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\tparam key\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\tlet keys\r\n\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t:ref Map\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\tlet value\r\n\t\t\t\t\t:[] \r\n\t\t\t\t\t\t:ref Map\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:literal 'foo'\r\n\r\n\titem\r\n\t\ttitle Mapped types\r\n\t\texpected\r\n\t\t\t+ interface PersonPartial {\r\n\t\t\t\t+ name?: string;\r\n\t\t\t\t+ age?: number;\r\n\t\t\t+ }\r\n\t\t\t+ // Or we might want a readonly version:\r\n\t\t\t+ interface PersonReadonly {\r\n\t\t\t\t+ readonly name: string;\r\n\t\t\t\t+ readonly age: number;\r\n\t\t\t+ }\r\n\t\t\t+ // This happens often enough in Javascript that TypeScript provides a way to create new types based on old types — mapped types. \r\n\t\t\t+ // In a mapped type, the new type transforms each property in the old type in the same way.For example, you can make all properties \r\n\t\t\t+ // of a type readonly or optional.Here are a couple of examples:\r\n\t\t\t+ type Readonly<T> = {\r\n\t\t\t\t+ readonly [P in keyof T]: T[P];\r\n\t\t\t+ }\r\n\t\t\t+ type Partial<T> = {\r\n\t\t\t\t+ [P in keyof T]?: T[P];\r\n\t\t\t+ }\r\n\t\t\t+ // And to use it:\r\n\t\t\t+ type PersonPartial = Partial<Person>;\r\n\t\t\t+ type ReadonlyPerson = Readonly<Person>;\r\n\t\t\t+ // Let’s take a look at the simplest mapped type and its parts:\r\n\t\t\t+ type Keys = 'option1' | 'option2';\r\n\t\t\t+ type Flags = {[K in Keys]: boolean };\r\n\t\t\t+ // The syntax resembles the syntax for index signatures with a for .. in inside. There are three parts:\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface PersonPartial\r\n\t\t\t\t\t:p name\r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:p age\r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:interface PersonReadonly\r\n\t\t\t\t\t:p name\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:p age\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:type Readonly\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t:type Partial\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t:type PersonPartial\r\n\t\t\t\t\t:ref Partial\r\n\t\t\t\t\t\t:ref Person\r\n\t\t\t\t:type ReadonlyPerson\r\n\t\t\t\t\t:ref Readonly\r\n\t\t\t\t\t\t:ref Person\r\n\t\t\t\t:type Keys\r\n\t\t\t\t\t:union \r\n\t\t\t\t\t\t:literal 'option1'\r\n\t\t\t\t\t\t:literal 'option2'\r\n\t\t\t\t:type Flags\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< K\r\n\t\t\t\t\t\t\t:ref Keys\r\n\t\t\t\t\t\t:boolean \r\n\r\n\titem\r\n\t\ttitle Mapped types 2\r\n\t\texpected\r\n\t\t\t+ /*\r\n\t\t\t\t+ The type variable K, which gets bound to each property in turn.\r\n\t\t\t\t+ The string literal union Keys, which contains the names of properties to iterate over.\r\n\t\t\t\t+ The resulting type of the property.\r\n\t\t\t\t+ In this simple example, Keys is a hard-coded list of property names and the property type is always boolean, so this mapped type is equivalent to writing: */\r\n\t\t\t+ type Flags = {\r\n\t\t\t\t+ option1: boolean;\r\n\t\t\t\t+ option2: boolean;\r\n\t\t\t+ }\r\n\t\t\t+ // Real applications, however, look like Readonly or Partial above. They’re based on some existing type, and they transform the properties \r\n\t\t\t+ // in some way. That’s where keyof and indexed access types come in:\r\n\t\t\t+ type NullablePerson = {[P in keyof Person]: Person[P] | null }\r\n\t\t\t+ type PartialPerson = {[P in keyof Person]?: Person[P]}\r\n\t\t\t+ // But it’s more useful to have a general version.\r\n\t\t\t+ type Nullable<T> = {[P in keyof T]: T[P] | null }\r\n\t\t\t+ type Partial<T> = {[P in keyof T]?: T[P]}\r\n\t\t\t+ // In these examples, the properties list is keyof T and the resulting type is some variant of T[P]. \r\n\t\t\t+ // This is a good template for any general use of mapped types. That’s because this kind of transformation is homomorphic, \r\n\t\t\t+ // which means that the mapping applies only to properties of T and no others. The compiler knows that it can copy all the existing property \r\n\t\t\t+ // modifiers before adding any new ones. For example, if Person.name was readonly, Partial<Person>.name would be readonly and optional.\r\n\t\t\t+ // Here’s one more example, in which T[P] is wrapped in a Proxy<T> class:\r\n\t\t\t+ type Proxy<T> = {\r\n\t\t\t\t+ get(): T;\r\n\t\t\t\t+ set(value: T): void;\r\n\t\t\t+ }\r\n\t\t\t+ type Proxify<T> = {\r\n\t\t\t\t+ [P in keyof T]: Proxy<T[P]>;\r\n\t\t\t+ }\r\n\t\t\t+ function proxify<T>(o: T): Proxify<T> {\r\n\t\t\t\t+ // ... wrap proxies ...\r\n\t\t\t+ }\r\n\t\t\t+ let proxyProps = proxify(props);\r\n\t\t\t+ // Note that Readonly<T> and Partial<T> are so useful, they are included in TypeScript’s standard library along with Pick and Record:\r\n\t\t\t+ type Pick<T, K extends keyof T> = {\r\n\t\t\t\t+ [P in K]: T[P];\r\n\t\t\t+ }\r\n\t\t\t+ type Record<K extends string, T> = {\r\n\t\t\t\t+ [P in K]: T;\r\n\t\t\t+ }\r\n\t\t\t+ // Readonly, Partial and Pick are homomorphic whereas Record is not. One clue that Record is not homomorphic is that it doesn’t take \r\n\t\t\t+ // an input type to copy properties from:\r\n\t\t\t+ type ThreeStringProps = Record<'prop1' | 'prop2' | 'prop3', string>\r\n\t\t\t+ // Non-homomorphic types are essentially creating new properties, so they can’t copy property modifiers from anywhere.\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type Flags\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:p option1\r\n\t\t\t\t\t\t\t:boolean \r\n\t\t\t\t\t\t:p option2\r\n\t\t\t\t\t\t\t:boolean \r\n\t\t\t\t:type NullablePerson\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref Person\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t:ref Person\r\n\t\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t:type PartialPerson\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref Person\r\n\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t:ref Person\r\n\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t:type Nullable\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t:type Partial\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t:type Proxy\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:m get\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:m set\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\tparam value\r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type Proxify\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:ref Proxy\r\n\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t:ref P\r\n\t\t\t\tfunction proxify\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam o\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref Proxify\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\tlet proxyProps = proxify(props)\r\n\t\t\t\t:type Pick\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< K\r\n\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:ref P\r\n\t\t\t\t:type Record\r\n\t\t\t\t\t:< K\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t:< P\r\n\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type ThreeStringProps\r\n\t\t\t\t\t:ref Record\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:literal 'prop1'\r\n\t\t\t\t\t\t\t:literal 'prop2'\r\n\t\t\t\t\t\t\t:literal 'prop3'\r\n\t\t\t\t\t\t:string \r\n\r\n\titem\r\n\t\ttitle Inference from mapped types\r\n\t\texpected\r\n\t\t\t+ function unproxify<T>(t: Proxify<T>): T {\r\n\t\t\t\t+ let result = {} as T;\r\n\t\t\t\t+ for (const k in t) {\r\n\t\t\t\t\t+ result[k] = t[k].get();\r\n\t\t\t\t+ }\r\n\t\t\t\t+ return result;\r\n\t\t\t+ }\r\n\t\t\t+ let originalProps = unproxify(proxyProps);\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction unproxify\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam t\r\n\t\t\t\t\t\t:ref Proxify\r\n\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tlet result = {}\r\n\t\t\t\t\tfor const k in t\r\n\t\t\t\t\t\tset result[k] = t[k].get()\r\n\t\t\t\t\treturn result\r\n\t\t\t\tlet originalProps = unproxify(proxyProps)\r\n\r\n\titem\r\n\t\ttitle Conditional Types\r\n\t\texpected\r\n\t\t\t+ declare function f<T extends boolean>(x: T): T extends true ? string : number;\r\n\t\t\t+ // Type is 'string | number\r\n\t\t\t+ let x = f(Math.random() < 0.5)\r\n\t\t\t+ // Another example would be the TypeName type alias, which uses nested conditional types:\r\n\t\t\t+ type TypeName<T> =\r\n\t\t\t\t+ T extends string ? \"string\" :\r\n\t\t\t\t\t+ T extends number ? \"number\" :\r\n\t\t\t\t\t\t+ T extends boolean ? \"boolean\" :\r\n\t\t\t\t\t\t\t+ T extends undefined ? \"undefined\" :\r\n\t\t\t\t\t\t\t\t+ T extends Function ? \"function\" :\r\n\t\t\t\t\t\t\t\t\t+ \"object\";\r\n\t\t\t+ type T0 = TypeName<string>;  // \"string\"\r\n\t\t\t+ type T1 = TypeName<\"a\">;  // \"string\"\r\n\t\t\t+ type T2 = TypeName<true>;  // \"boolean\"\r\n\t\t\t+ type T3 = TypeName<() => void>;  // \"function\"\r\n\t\t\t+ type T4 = TypeName<string[]>;  // \"object\"\r\n\t\t\t+ // But as an example of a place where conditonal types are deferred - where they stick around instead of picking a branch - would be in the following:\r\n\t\t\t+ interface Foo {\r\n\t\t\t\t+ propA: boolean;\r\n\t\t\t\t+ propB: boolean;\r\n\t\t\t+ }\r\n\t\t\t+ declare function f<T>(x: T): T extends Foo ? string : number;\r\n\t\t\t+ function foo<U>(x: U) {\r\n\t\t\t\t+ // Has type 'U extends Foo ? string : number'\r\n\t\t\t\t+ let a = f(x);\r\n\t\t\t\t+ // This assignment is allowed though!\r\n\t\t\t\t+ let b: string | number = a;\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:function f\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t\t:boolean \r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t:literal true\r\n\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t# Type is 'string | number\r\n\t\t\t\tlet x = f(Math.random() < 0.5)\r\n\t\t\t\t# Another example would be the TypeName type alias, which uses nested conditional types:\r\n\t\t\t\t:type TypeName\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:literal \"string\"\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t:literal \"number\"\r\n\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t\t\t:boolean \r\n\t\t\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t\t\t:literal \"boolean\"\r\n\t\t\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t:literal \"undefined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:literal \"function\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:literal \"object\"\r\n\t\t\t\t:type T0\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param string\r\n\t\t\t\t# \"string\"\r\n\t\t\t\t:type T1\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t# \"string\"\r\n\t\t\t\t:type T2\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:literal true\r\n\t\t\t\t# \"boolean\"\r\n\t\t\t\t:type T3\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t# \"function\"\r\n\t\t\t\t:type T4\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t# \"object\"\r\n\t\t\t\t# But as an example of a place where conditonal types are deferred - where they stick around instead of picking a branch - would be in the following:\r\n\t\t\t\t:interface Foo\r\n\t\t\t\t\t:p propA\r\n\t\t\t\t\t\t:boolean \r\n\t\t\t\t\t:p propB\r\n\t\t\t\t\t\t:boolean \r\n\t\t\t\t:function f\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t:ref Foo\r\n\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\tfunction foo\r\n\t\t\t\t\t:< U\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t# Has type 'U extends Foo ? string : number'\r\n\t\t\t\t\tlet a = f(x)\r\n\t\t\t\t\t# This assignment is allowed though!\r\n\t\t\t\t\tlet b\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:= a\r\n\r\n\titem\r\n\t\ttitle Distributive conditional types\r\n\t\texpected\r\n\t\t\t+ type T10 = TypeName<string | (() => void)>;  // \"string\" | \"function\"\r\n\t\t\t+ type T12 = TypeName<string | string[] | undefined>;  // \"string\" | \"object\" | \"undefined\"\r\n\t\t\t+ type T11 = TypeName<string[] | number[]>;  // \"object\"\r\n\t\t\t+ /* In instantiations of a distributive conditional type T extends U ? X : Y, references to T within the conditional type are resolved\r\n\t\t\t\t+ to individual constituents of the union type (i.e. T refers to the individual constituents after the conditional type is distributed\r\n\t\t\t\t+ over the union type). Furthermore, references to T within X have an additional type parameter constraint U (i.e. T is considered\r\n\t\t\t\t+ assignable to U within X).*/\r\n\t\t\t+ // Example\r\n\t\t\t+ type BoxedValue<T> = { value: T };\r\n\t\t\t+ type BoxedArray<T> = { array: T[] };\r\n\t\t\t+ type Boxed<T> = T extends any[] ? BoxedArray<T[number]> : BoxedValue<T>;\r\n\t\t\t+ type T20 = Boxed<string>;  // BoxedValue<string>;\r\n\t\t\t+ type T21 = Boxed<number[]>;  // BoxedArray<number>;\r\n\t\t\t+ type T22 = Boxed<string | number[]>;  // BoxedValue<string> | BoxedArray<number>;\r\n\t\t\t+ // Notice that T has the additional constraint any[] within the true branch of Boxed<T> and it is therefore possible to refer to the element type of the array as T[number]. Also, notice how the conditional type is distributed over the union type in the last example.\r\n\t\t\t+ // The distributive property of conditional types can conveniently be used to filter union types:\r\n\t\t\t+ type Diff<T, U> = T extends U ? never : T;  // Remove types from T that are assignable to U\r\n\t\t\t+ type Filter<T, U> = T extends U ? T : never;  // Remove types from T that are not assignable to U\r\n\t\t\t+ type T30 = Diff<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\r\n\t\t\t+ type T31 = Filter<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\r\n\t\t\t+ type T32 = Diff<string | number | (() => void), Function>;  // string | number\r\n\t\t\t+ type T33 = Filter<string | number | (() => void), Function>;  // () => void\r\n\t\t\t+ type NonNullable<T> = Diff<T, null | undefined>;  // Remove null and undefined from T\r\n\t\t\t+ type T34 = NonNullable<string | number | undefined>;  // string | number\r\n\t\t\t+ type T35 = NonNullable<string | string[] | null | undefined>;  // string | string[]\r\n\t\t\t+ function f1<T>(x: T, y: NonNullable<T>) {\r\n\t\t\t\t+ x = y;  // Ok\r\n\t\t\t\t+ y = x;  // Error\r\n\t\t\t+ }\r\n\t\t\t+ function f2<T extends string | undefined>(x: T, y: NonNullable<T>) {\r\n\t\t\t\t+ x = y;  // Ok\r\n\t\t\t\t+ y = x;  // Error\r\n\t\t\t\t+ let s1: string = x;  // Error\r\n\t\t\t\t+ let s2: string = y;  // Ok\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type T10\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t:type T12\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t:type T11\r\n\t\t\t\t\t:ref TypeName\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t#\r\n\t\t\t\t\t# In instantiations of a distributive conditional type T extends U ? X : Y, references to T within the conditional type are resolved\r\n\t\t\t\t\t# to individual constituents of the union type (i.e. T refers to the individual constituents after the conditional type is distributed\r\n\t\t\t\t\t# over the union type). Furthermore, references to T within X have an additional type parameter constraint U (i.e. T is considered\r\n\t\t\t\t\t# assignable to U within X).\r\n\t\t\t\t:type BoxedValue\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:p value\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type BoxedArray\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:p array\r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type Boxed\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref BoxedArray\r\n\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:ref BoxedValue\r\n\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type T20\r\n\t\t\t\t\t:ref Boxed\r\n\t\t\t\t\t\t:param string\r\n\t\t\t\t:type T21\r\n\t\t\t\t\t:ref Boxed\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t:type T22\r\n\t\t\t\t\t:ref Boxed\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t:type Diff\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< U\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:never \r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type Filter\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< U\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:never \r\n\t\t\t\t:type T30\r\n\t\t\t\t\t:ref Diff\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"b\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"d\"\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"f\"\r\n\t\t\t\t:type T31\r\n\t\t\t\t\t:ref Filter\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"b\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"d\"\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"f\"\r\n\t\t\t\t:type T32\r\n\t\t\t\t\t:ref Diff\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t:type T33\r\n\t\t\t\t\t:ref Filter\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t:type NonNullable\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:ref Diff\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t:type T34\r\n\t\t\t\t\t:ref NonNullable\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t:type T35\r\n\t\t\t\t\t:ref NonNullable\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\tfunction f1\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam y\r\n\t\t\t\t\t\t:ref NonNullable\r\n\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tset x = y\r\n\t\t\t\t\tset y = x\r\n\t\t\t\tfunction f2\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam y\r\n\t\t\t\t\t\t:ref NonNullable\r\n\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tset x = y\r\n\t\t\t\t\tset y = x\r\n\t\t\t\t\tlet s1\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:= x\r\n\t\t\t\t\tlet s2\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:= y\r\n\titem\r\n\t\ttitle Conditional types combined with mapped types:\r\n\t\texpected\r\n\t\t\t+ // conditional types are particularly useful when combined with mapped types:\r\n\t\t\t+ type FunctionPropertyNames<T> = {[K in keyof T]: T[K] extends Function ? K : never }[keyof T];\r\n\t\t\t+ type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\r\n\t\t\t+ type NonFunctionPropertyNames<T> = {[K in keyof T]: T[K] extends Function ? never : K }[keyof T];\r\n\t\t\t+ type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;\r\n\t\t\t+ interface Part {\r\n\t\t\t\t+ id: number;\r\n\t\t\t\t+ name: string;\r\n\t\t\t\t+ subparts: Part[];\r\n\t\t\t\t+ updatePart(newName: string): void;\r\n\t\t\t+ }\r\n\t\t\t+ type T40 = FunctionPropertyNames<Part>;  // \"updatePart\"\r\n\t\t\t+ type T41 = NonFunctionPropertyNames<Part>;  // \"id\" | \"name\" | \"subparts\"\r\n\t\t\t+ type T42 = FunctionProperties<Part>;  // { updatePart(newName: string): void }\r\n\t\t\t+ type T43 = NonFunctionProperties<Part>;  // { id: number, name: string, subparts: Part[] }\r\n\t\t\t+ // Similar to union and intersection types, conditional types are not permitted to reference themselves recursively.For example the following is an error.\r\n\t\t\t+ // Example\r\n\t\t\t+ type ElementType<T> = T extends any[] ? ElementType<T[number]> : T;  // Error\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type FunctionPropertyNames\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:[] \r\n\t\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t\t:< K\r\n\t\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t:never \r\n\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type FunctionProperties\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:ref Pick\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref FunctionPropertyNames\r\n\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type NonFunctionPropertyNames\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:[] \r\n\t\t\t\t\t\t:mapped \r\n\t\t\t\t\t\t\t:< K\r\n\t\t\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t:never \r\n\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t:ref K\r\n\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type NonFunctionProperties\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:ref Pick\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref NonFunctionPropertyNames\r\n\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:interface Part\r\n\t\t\t\t\t:p id\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:p name\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:p subparts\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:ref Part\r\n\t\t\t\t\t:m updatePart\r\n\t\t\t\t\t\t:void \r\n\t\t\t\t\t\tparam newName\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T40\r\n\t\t\t\t\t:ref FunctionPropertyNames\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Part\r\n\t\t\t\t:type T41\r\n\t\t\t\t\t:ref NonFunctionPropertyNames\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Part\r\n\t\t\t\t:type T42\r\n\t\t\t\t\t:ref FunctionProperties\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Part\r\n\t\t\t\t:type T43\r\n\t\t\t\t\t:ref NonFunctionProperties\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Part\r\n\t\t\t\t:type ElementType\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref ElementType\r\n\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t:[] \r\n\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:ref T\r\n\r\n\titem\r\n\t\ttitle Type inference in conditional types\r\n\t\texpected\r\n\t\t\t+ //For example, the following extracts the return type of a function type:\r\n\t\t\t+ type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;\r\n\t\t\t+ // Conditional types can be nested to form a sequence of pattern matches that are evaluated in order:\r\n\t\t\t+ type Unpacked<T> =\r\n\t\t\t\t+ T extends (infer U)[] ? U :\r\n\t\t\t\t\t+ T extends (...args: any[]) => infer U ? U :\r\n\t\t\t\t\t\t+ T extends Promise < infer U> ? U :\r\n\t\t\t\t\t\t\t+ T;\r\n\t\t\t+ type T0 = Unpacked<string>;  // string\r\n\t\t\t+ type T1 = Unpacked<string[]>;  // string\r\n\t\t\t+ type T2 = Unpacked<() => string>;  // string\r\n\t\t\t+ type T3 = Unpacked<Promise<string>>;  // string\r\n\t\t\t+ type T4 = Unpacked<Promise<string>[]>;  // Promise<string>\r\n\t\t\t+ type T5 = Unpacked<Unpacked<Promise<string>[]>>;  // string\r\n\t\t\t+ // The following example demonstrates how multiple candidates for the same type variable in co - variant positions causes a union type to be inferred:\r\n\t\t\t+ type Foo<T> = T extends { a: infer U, b: infer U } ? U: never;\r\n\t\t\t+ type T10 = Foo<{ a: string, b: string }>;  // string\r\n\t\t\t+ type T11 = Foo<{ a: string, b: number }>;  // string | number\r\n\t\t\t+ // Likewise, multiple candidates for the same type variable in contra - variant positions causes an intersection type to be inferred:\r\n\t\t\t+ type Bar<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U: never;\r\n\t\t\t+ type T20 = Bar<{ a: (x: string) => void, b: (x: string) => void }>;  // string\r\n\t\t\t+ type T21 = Bar<{ a: (x: string) => void, b: (x: number) => void }>;  // string & number\r\n\t\t\t+ // When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made \r\n\t\t\t+ // from the last signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload \r\n\t\t\t+ // resolution based on a list of argument types.\r\n\t\t\t+ declare function foo(x: string): number;\r\n\t\t\t+ declare function foo(x: number): string;\r\n\t\t\t+ declare function foo(x: string | number): string | number;\r\n\t\t\t+ type T30 = ReturnType<typeof foo>;  // string | number\r\n\t\t\t+ // It is not possible to use infer declarations in constraint clauses for regular type parameters:\r\n\t\t\t+ type ReturnType<T extends (...args: any[]) => infer R> = R;  // Error, not supported\r\n\t\t\t+ // However, much the same effect can be obtained by erasing the type variables in the constraint and instead specifying a conditional type:\r\n\t\t\t+ type AnyFunction = (...args: any[]) => any;\r\n\t\t\t+ type ReturnType<T extends AnyFunction> = T extends (...args: any[]) => infer R ? R : any;\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type ReturnType\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t:< R\r\n\t\t\t\t\t\t\t\tparam ...args\r\n\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref R\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:any \r\n\t\t\t\t:type Unpacked\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t\t\t\t\tparam ...args\r\n\t\t\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t:iif \r\n\t\t\t\t\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t\t\t\t\t:ref Promise\r\n\t\t\t\t\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type T0\r\n\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t:param string\r\n\t\t\t\t:type T1\r\n\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T2\r\n\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T3\r\n\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Promise\r\n\t\t\t\t\t\t\t\t:param string\r\n\t\t\t\t:type T4\r\n\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:ref Promise\r\n\t\t\t\t\t\t\t\t\t:param string\r\n\t\t\t\t:type T5\r\n\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Unpacked\r\n\t\t\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t:ref Promise\r\n\t\t\t\t\t\t\t\t\t\t\t:param string\r\n\t\t\t\t:type Foo\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p a\r\n\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t\t\t:p b\r\n\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:never \r\n\t\t\t\t:type T10\r\n\t\t\t\t\t:ref Foo\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p a\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p b\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T11\r\n\t\t\t\t\t:ref Foo\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p a\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p b\r\n\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t:type Bar\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p a\r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t\t\t:p b\r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:never \r\n\t\t\t\t:type T20\r\n\t\t\t\t\t:ref Bar\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p a\r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p b\r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T21\r\n\t\t\t\t\t:ref Bar\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p a\r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p b\r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t:function foo\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:function foo\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t:function foo\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t:type T30\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:typeof foo\r\n\t\t\t\t:type ReturnType\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t:< R\r\n\t\t\t\t\t\t\tparam ...args\r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t:ref R\r\n\t\t\t\t:type AnyFunction\r\n\t\t\t\t\t:=> \r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\t\tparam ...args\r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t:type ReturnType\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t\t:ref AnyFunction\r\n\t\t\t\t\t:iif \r\n\t\t\t\t\t\t:check \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t:extends \r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:infer \r\n\t\t\t\t\t\t\t\t\t:< R\r\n\t\t\t\t\t\t\t\tparam ...args\r\n\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t:then \r\n\t\t\t\t\t\t\t:ref R\r\n\t\t\t\t\t\t:else \r\n\t\t\t\t\t\t\t:any \r\n\r\n\r\n\titem\r\n\t\ttitle Predefined conditional types\r\n\t\texpected\r\n\t\t\t+ type T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\r\n\t\t\t+ type T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\r\n\t\t\t+ type T02 = Exclude<string | number | (() => void), Function>;  // string | number\r\n\t\t\t+ type T03 = Extract<string | number | (() => void), Function>;  // () => void\r\n\t\t\t+ type T04 = NonNullable<string | number | undefined>;  // string | number\r\n\t\t\t+ type T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]\r\n\t\t\t+ function f1(s: string) {\r\n\t\t\t\t+ return { a: 1, b: s }\r\n\t\t\t+ }\r\n\t\t\t+ class C {\r\n\t\t\t\t+ x = 0;\r\n\t\t\t\t+ y = 0;\r\n\t\t\t+ }\r\n\t\t\t+ type T10 = ReturnType<() => string>;  // string\r\n\t\t\t+ type T11 = ReturnType<(s: string) => void>;  // void\r\n\t\t\t+ type T12 = ReturnType<(<T>() => T)>;  // {}\r\n\t\t\t+ type T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]\r\n\t\t\t+ type T14 = ReturnType<typeof f1>;  // { a: number, b: string }\r\n\t\t\t+ type T15 = ReturnType<any>;  // any\r\n\t\t\t+ type T16 = ReturnType<never>;  // any\r\n\t\t\t+ type T17 = ReturnType<string>;  // Error\r\n\t\t\t+ type T18 = ReturnType<Function>;  // Error\r\n\t\t\t+ type T20 = InstanceType<typeof C>;  // C\r\n\t\t\t+ type T21 = InstanceType<any>;  // any\r\n\t\t\t+ type T22 = InstanceType<never>;  // any\r\n\t\t\t+ type T23 = InstanceType<string>;  // Error\r\n\t\t\t+ type T24 = InstanceType<Function>;  // Error\r\n\t\t\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:type T00\r\n\t\t\t\t\t:ref Exclude\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"b\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"d\"\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"f\"\r\n\t\t\t\t:type T01\r\n\t\t\t\t\t:ref Extract\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"b\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"d\"\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:literal \"a\"\r\n\t\t\t\t\t\t\t\t:literal \"c\"\r\n\t\t\t\t\t\t\t\t:literal \"f\"\r\n\t\t\t\t:type T02\r\n\t\t\t\t\t:ref Exclude\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t:type T03\r\n\t\t\t\t\t:ref Extract\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t:type T04\r\n\t\t\t\t\t:ref NonNullable\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t:type T05\r\n\t\t\t\t\t:ref NonNullable\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\tfunction f1\r\n\t\t\t\t\tparam s\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\treturn \r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t@ a 1\r\n\t\t\t\t\t\t\t@ b s\r\n\t\t\t\tclass C\r\n\t\t\t\t\tp x\r\n\t\t\t\t\t\t:= 0\r\n\t\t\t\t\tp y\r\n\t\t\t\t\t\t:= 0\r\n\t\t\t\t:type T10\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T11\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t:type T12\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t:< T\r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type T13\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:paren \r\n\t\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t\t:< T\r\n\t\t\t\t\t\t\t\t\t\t:ref U\r\n\t\t\t\t\t\t\t\t\t:< U\r\n\t\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:type T14\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:typeof f1\r\n\t\t\t\t:type T15\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param any\r\n\t\t\t\t:type T16\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param never\r\n\t\t\t\t:type T17\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param string\r\n\t\t\t\t:type T18\r\n\t\t\t\t\t:ref ReturnType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t:type T20\r\n\t\t\t\t\t:ref InstanceType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:typeof C\r\n\t\t\t\t:type T21\r\n\t\t\t\t\t:ref InstanceType\r\n\t\t\t\t\t\t:param any\r\n\t\t\t\t:type T22\r\n\t\t\t\t\t:ref InstanceType\r\n\t\t\t\t\t\t:param never\r\n\t\t\t\t:type T23\r\n\t\t\t\t\t:ref InstanceType\r\n\t\t\t\t\t\t:param string\r\n\t\t\t\t:type T24\r\n\t\t\t\t\t:ref InstanceType\r\n\t\t\t\t\t\t:param \r\n\t\t\t\t\t\t\t:ref Function\r\n\t\t\t\t# Error\r\n\r\n\r\n"
      },
      "t/classes.ittf.ittf": {
        "type": "CODE",
        "contents": "element class\r\n\ttag class\r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Simple class\r\n\t\texpected\r\n\t\t\t+ class Greeter {\r\n\t\t\t\t+ greeting: string;\r\n\t\t\t\t+ constructor(message: string) {\r\n\t\t\t\t\t+ this.greeting = message;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ greet() {\r\n\t\t\t\t\t+ return \"Hello, \" + this.greeting;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let greeter = new Greeter(\"world\");\r\n\r\n\t\tittf\r\n\t\t\tclass Greeter\r\n\t\t\t\tp greeting\r\n\t\t\t\t\t:string \r\n\t\t\t\tctor \r\n\t\t\t\t\tparam message\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tset this.greeting = message\r\n\t\t\t\tm greet\r\n\t\t\t\t\treturn \"Hello, \" + this.greeting\r\n\t\t\tlet greeter = new Greeter(\"world\")\r\n\t\r\n\titem\r\n\t\ttitle Class extension\r\n\t\texpected\r\n\t\t\t+ class Animal {\r\n\t\t\t\t+ move(distanceInMeters: number = 0) {\r\n\t\t\t\t\t+ console.log(`Animal moved ${distanceInMeters}m.`);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ class Dog extends Animal {\r\n\t\t\t\t+ bark() {\r\n\t\t\t\t\t+ console.log('Woof! Woof!');\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\tclass Animal\r\n\t\t\t\tm move\r\n\t\t\t\t\tparam distanceInMeters\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:= 0\r\n\t\t\t\t\t_ console.log\r\n\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t+ Animal moved\\b\r\n\t\t\t\t\t\t\t@ distanceInMeters\r\n\t\t\t\t\t\t\t+ m.\r\n\t\t\tclass Dog\r\n\t\t\t\tsuper Animal\r\n\t\t\t\tm bark\r\n\t\t\t\t\t_ console.log('Woof! Woof!')\r\n        \r\n\titem\r\n\t\ttitle Complex class example\r\n\t\texpected\r\n\t\t\t+ class Animal {\r\n\t\t\t\t+ name: string;\r\n\t\t\t\t+ constructor(theName: string) { this.name = theName; }\r\n\t\t\t\t+ move(distanceInMeters: number = 0) {\r\n\t\t\t\t\t+ console.log(`${this.name} moved ${distanceInMeters}m.`);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ class Snake extends Animal {\r\n\t\t\t\t+ constructor(name: string) { super(name); }\r\n\t\t\t\t+ move(distanceInMeters = 5) {\r\n\t\t\t\t\t+ console.log(\"Slithering...\");\r\n\t\t\t\t\t+ super.move(distanceInMeters);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ class Horse extends Animal {\r\n\t\t\t\t+ constructor(name: string) { super(name); }\r\n\t\t\t\t+ move(distanceInMeters = 45) {\r\n\t\t\t\t\t+ console.log(\"Galloping...\");\r\n\t\t\t\t\t+ super.move(distanceInMeters);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let sam = new Snake(\"Sammy the Python\");\r\n\t\t\t+ let tom: Animal = new Horse(\"Tommy the Palomino\");\r\n\t\t\t+ sam.move();\r\n\t\t\t+ tom.move(34);\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Animal\r\n\t\t\t\t\tp name\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam theName\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tset this.name = theName\r\n\t\t\t\t\tm move\r\n\t\t\t\t\t\tparam distanceInMeters\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t:= 0\r\n\t\t\t\t\t\t_ console.log\r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ \r\n\t\t\t\t\t\t\t\t@ this.name\r\n\t\t\t\t\t\t\t\t+ \\bmoved\\b\r\n\t\t\t\t\t\t\t\t@ distanceInMeters\r\n\t\t\t\t\t\t\t\t+ m.\r\n\t\t\t\tclass Snake\r\n\t\t\t\t\tsuper Animal\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam name\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t_ super(name)\r\n\t\t\t\t\tm move\r\n\t\t\t\t\t\tparam distanceInMeters = 5\r\n\t\t\t\t\t\t_ console.log(\"Slithering...\")\r\n\t\t\t\t\t\t_ super.move(distanceInMeters)\r\n\t\t\t\r\n\t\t\t\tclass Horse\r\n\t\t\t\t\tsuper Animal\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam name\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t_ super(name)\r\n\t\t\t\t\tm move\r\n\t\t\t\t\t\tparam distanceInMeters = 45\r\n\t\t\t\t\t\t_ console.log(\"Galloping...\")\r\n\t\t\t\t\t\t_ super.move(distanceInMeters)\r\n    \r\n\titem\r\n\t\ttitle Class accessors\r\n\t\texpected\r\n\t\t\t+ class Animal {\r\n\t\t\t\t+ private name: string;\r\n\t\t\t\t+ constructor(theName: string) { this.name = theName; }\r\n\t\t\t+ }\r\n\t\t\t+ class Rhino extends Animal {\r\n\t\t\t\t+ constructor() { super(\"Rhino\"); }\r\n\t\t\t+ }\r\n\t\t\t+ class Employee {\r\n\t\t\t\t+ private name: string;\r\n\t\t\t\t+ constructor(theName: string) { this.name = theName; }\r\n\t\t\t+ }\r\n\t\t\t+ let animal = new Animal(\"Goat\");\r\n\t\t\t+ let rhino = new Rhino();\r\n\t\t\t+ let employee = new Employee(\"Bob\");\r\n\t\t\t+ animal = rhino;\r\n\t\t\t+ animal = employee; // Error: 'Animal' and 'Employee' are not compatible\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Animal\r\n\t\t\t\t\tp name\r\n\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam theName\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tset this.name = theName\r\n\t\t\t\tclass Rhino\r\n\t\t\t\t\tsuper Animal\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\t_ super(\"Rhino\")\r\n\t\t\t\tclass Employee\r\n\t\t\t\t\tp name\r\n\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam theName\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tset this.name = theName\r\n\t\t\t\tlet animal = new Animal(\"Goat\")\r\n\t\t\t\tlet rhino = new Rhino()\r\n\t\t\t\tlet employee = new Employee(\"Bob\")\r\n\t\t\t\tset animal = rhino\r\n\t\t\t\tset animal = employee\r\n\t\r\n\titem\r\n\t\ttitle Class accessors\r\n\t\texpected\r\n\t\t\t+ class Person {\r\n\t\t\t\t+ protected name: string;\r\n\t\t\t\t+ constructor(name: string) { this.name = name; }\r\n\t\t\t+ }\r\n\t\t\t+ class Employee extends Person {\r\n\t\t\t\t+ private department: string;\r\n\t\t\t\t+ constructor(name: string, department: string) {\r\n\t\t\t\t\t+ super(name);\r\n\t\t\t\t\t+ this.department = department;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ public getElevatorPitch() {\r\n\t\t\t\t\t+ return `Hello, my name is ${this.name} and I work in ${this.department}.`;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let howard = new Employee(\"Howard\", \"Sales\");\r\n\t\t\t+ console.log(howard.getElevatorPitch());\r\n\t\t\t+ console.log(howard.name); // error\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Person\r\n\t\t\t\t\tp name\r\n\t\t\t\t\t\t:protected \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam name\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tset this.name = name\r\n    \r\n\t\t\t\tclass Employee\r\n\t\t\t\t\tsuper Person\r\n\t\t\t\t\tp department\r\n\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam name\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam department\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t_ super(name)\r\n\t\t\t\t\t\tset this.department = department\r\n\t\t\t\t\tm getElevatorPitch\r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ Hello, my name is\\b\r\n\t\t\t\t\t\t\t\t@ this.name\r\n\t\t\t\t\t\t\t\t+ \\band I work in\\b\r\n\t\t\t\t\t\t\t\t@ this.department\r\n\t\t\t\t\t\t\t\t+ .\r\n\t\r\n\titem\r\n\t\ttitle Readonly modifier\r\n\t\texpected\r\n\t\t\t+ class Octopus {\r\n\t\t\t\t+ readonly name: string;\r\n\t\t\t\t+ readonly numberOfLegs: number = 8;\r\n\t\t\t\t+ constructor(theName: string) {\r\n\t\t\t\t\t+ this.name = theName;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let dad = new Octopus(\"Man with the 8 strong legs\");\r\n\t\t\t+ dad.name = \"Man with the 3-piece suit\"; // error! name is readonly.\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Octopus\r\n\t\t\t\t\tp name\r\n\t\t\t\t\t\t:readonly \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tp numberOfLegs\r\n\t\t\t\t\t\t:readonly \r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:= 8\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam theName\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tset this.name = theName\r\n\t\t\t\tlet dad = new Octopus(\"Man with the 8 strong legs\")\r\n\t\t\t\tset dad.name = \"Man with the 3-piece suit\"\r\n\r\n\titem\r\n\t\ttitle Parameter properties\r\n\t\texpected\r\n\t\t\t+ class Octopus {\r\n\t\t\t\t+ readonly numberOfLegs: number = 8;\r\n\t\t\t\t+ constructor(readonly name: string) {\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Octopus\r\n\t\t\t\t\tp numberOfLegs\r\n\t\t\t\t\t\t:readonly \r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:= 8\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam \r\n\t\t\t\t\t\t\t:readonly \r\n\t\t\t\t\t\t\t:string \r\n\titem\r\n\t\ttitle Static members\r\n\t\texpected\r\n\t\t\t+ class Grid {\r\n\t\t\t\t+ static origin = { x: 0, y: 0 };\r\n\t\t\t\t+ calculateDistanceFromOrigin(point: { x: number; y: number; }) {\r\n\t\t\t\t\t+ let xDist = (point.x - Grid.origin.x);\r\n\t\t\t\t\t+ let yDist = (point.y - Grid.origin.y);\r\n\t\t\t\t\t+ return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ constructor(public scale: number) { }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\tclass Grid\r\n\t\t\t\tp origin\r\n\t\t\t\t\tstatic\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t@ x 0\r\n\t\t\t\t\t\t@ y 0\r\n\t\t\t\tm calculateDistanceFromOrigin\r\n\t\t\t\t\tparam point\r\n\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t:p x\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t:p y\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tlet xDist = (point.x - Grid.origin.x)\r\n\t\t\t\t\tlet yDist = (point.y - Grid.origin.y)\r\n\t\t\t\t\treturn Math.sqrt(xDist * xDist + yDist * yDist) / this.scale\r\n\t\t\t\tctor \r\n\t\t\t\t\tparam scale\r\n\t\t\t\t\t\t:public \r\n\t\t\t\t\t\t:number \r\n\t\r\n\titem\r\n\t\ttitle Abstract classes 1\r\n\t\texpected\r\n\t\t\t+ abstract class Animal {\r\n\t\t\t\t+ abstract makeSound(): void;\r\n\t\t\t\t+ move(): void {\r\n\t\t\t\t\t+ console.log(\"roaming the earth...\");\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Animal\r\n\t\t\t\t\t:abstract\r\n\t\t\t\t\t:m makeSound\r\n\t\t\t\t\t\t:abstract\r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\tm move\r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t_ console.log(\"roaming the earth...\")\r\n\r\n\titem\r\n\t\ttitle Abstract classes 2\r\n\t\texpected\r\n\t\t\t+ abstract class Department {\r\n\t\t\t\t+ constructor(public name: string) {\r\n\t\t\t\t+ }\r\n\t\t\t\t+ printName(): void {\r\n\t\t\t\t\t+ console.log(\"Department name: \" + this.name);\r\n\t\t\t\t+ }\r\n\t\t\t\t+ abstract printMeeting(): void; // must be implemented in derived classes\r\n\t\t\t+ }\r\n\t\t\t+ class AccountingDepartment extends Department {\r\n\t\t\t\t+ constructor() {\r\n\t\t\t\t\t+ super(\"Accounting and Auditing\"); // constructors in derived classes must call super()\r\n\t\t\t\t+ }\r\n\t\t\t\t+ printMeeting(): void {\r\n\t\t\t\t\t+ console.log(\"The Accounting Department meets each Monday at 10am.\");\r\n\t\t\t\t+ }\r\n\t\t\t\t+ generateReports(): void {\r\n\t\t\t\t\t+ console.log(\"Generating accounting reports...\");\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let department: Department; // ok to create a reference to an abstract type\r\n\t\t\t+ department = new Department(); // error: cannot create an instance of an abstract class\r\n\t\t\t+ department = new AccountingDepartment(); // ok to create and assign a non-abstract subclass\r\n\t\t\t+ department.printName();\r\n\t\t\t+ department.printMeeting();\r\n\t\t\t+ department.generateReports(); // error: method doesn't exist on declared abstract type\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Department\r\n\t\t\t\t\t:abstract\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam name\r\n\t\t\t\t\t\t\t:public \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\tm printName\r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t_ console.log(\"Department name: \" + this.name)\r\n\t\t\t\t\t:m printMeeting\r\n\t\t\t\t\t\t:abstract\r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\tclass AccountingDepartment\r\n\t\t\t\t\tsuper Department\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\t_ super(\"Accounting and Auditing\")\r\n\t\t\t\t\tm printMeeting\r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t_ console.log(\"The Accounting Department meets each Monday at 10am.\")\r\n\t\t\t\t\tm generateReports\r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t_ console.log(\"Generating accounting reports...\")\r\n\t\t\t\tlet department\r\n\t\t\t\t\t:ref Department\r\n\t\t\t\tset department = new Department()\r\n\t\t\t\tset department = new AccountingDepartment()\r\n\t\t\t\t_ department.printName\r\n\t\t\t\t_ department.printMeeting\r\n\t\t\t\t_ department.generateReports\r\n\t\t\t\t# error: method doesn't exist on declared abstract type\r\n    \r\n\titem\r\n\t\ttitle Static members\r\n\t\texpected\r\n\t\t\t+ class Greeter {\r\n\t\t\t\t+ static standardGreeting = \"Hello, there\";\r\n\t\t\t\t+ greeting: string;\r\n\t\t\t\t+ greet() {\r\n\t\t\t\t\t+ if (this.greeting) {\r\n\t\t\t\t\t\t+ return \"Hello, \" + this.greeting;\r\n\t\t\t\t\t+ } else {\r\n\t\t\t\t\t\t+ return Greeter.standardGreeting;\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Greeter\r\n\t\t\t\t\tp standardGreeting\r\n\t\t\t\t\t\tstatic\r\n\t\t\t\t\t\t:= \"Hello, there\"\r\n\t\t\t\t\tp greeting\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tm greet\r\n\t\t\t\t\t\tif this.greeting\r\n\t\t\t\t\t\t\treturn \"Hello, \" + this.greeting\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\treturn Greeter.standardGreeting\r\n    \r\n\titem\r\n\t\ttitle Class extended by interface\r\n\t\texpected\r\n\t\t\t+ class Point {\r\n\t\t\t\t+ x: number;\r\n\t\t\t\t+ y: number;\r\n\t\t\t+ }\r\n\t\t\t+ interface Point3d extends Point {\r\n\t\t\t\t+ z: number;\r\n\t\t\t+ }\r\n\t\t\t+ let point3d: Point3d = { x: 1, y: 2, z: 3 };\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Point\r\n\t\t\t\t\tp x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tp y\r\n\t\t\t\t\t\t:number \r\n    \r\n\t\t\t\t:interface Point3d\r\n\t\t\t\t\t:extends Point\r\n\t\t\t\t\t:p z\r\n\t\t\t\t\t\t:number \r\n    \r\n\t\t\t\tlet point3d\r\n\t\t\t\t\t:ref Point3d\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t@ x 1\r\n\t\t\t\t\t\t@ y 2\r\n\t\t\t\t\t\t@ z 3"
      },
      "t/functions.ittf.ittf": {
        "type": "CODE",
        "contents": "element function\r\n\ttag function\r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Typed functions 1\r\n\t\texpected\r\n\t\t\t+ function add(x: number, y: number): number {\r\n\t\t\t\t+ return x + y;\r\n\t\t\t+ }\r\n\t\t\t+ let myAdd = function (x: number, y: number): number { return x + y; };\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction add\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tparam y\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\treturn x + y\r\n\t\t\t\tlet myAdd\r\n\t\t\t\t\tfunction \r\n\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam y\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\treturn x + y\r\n\r\n\titem\r\n\t\ttitle Typed functions 2\r\n\t\texpected\r\n\t\t\t+ let myAdd: (baseValue: number, increment: number) => number =\r\n\t\t\t\t+ function (x, y) { return x + y; };\r\n\t\tittf\r\n\t\t\tlet myAdd\r\n\t\t\t\t:=> \r\n\t\t\t\t\t:number \r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tparam y\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tfunction \r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tparam y\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\treturn x + y\r\n\r\n\titem\r\n\t\ttitle Optional parameters\r\n\t\texpected\r\n\t\t\t+ function buildName(firstName: string, lastName?: string) {\r\n\t\t\t\t+ if (lastName)\r\n\t\t\t\t\t+ return firstName + \" \" + lastName;\r\n\t\t\t\t+ else\r\n\t\t\t\t\t+ return firstName;\r\n\t\t\t+ }\r\n\t\t\t+ let result1 = buildName(\"Bob\");                  // error, too few parameters\r\n\t\t\t+ let result2 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\r\n\t\t\t+ let result3 = buildName(\"Bob\", \"Adams\");         // ah, just right\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction buildName\r\n\t\t\t\t\tparam firstName\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tparam lastName\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\tif lastName\r\n\t\t\t\t\t\treturn firstName + \" \" + lastName\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn firstName\r\n\t\t\t\t# error, too few parameters\r\n\t\t\t\tlet result1 = buildName(\"Bob\")\r\n\t\t\t\t# error, too many parameters\r\n\t\t\t\tlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\")\r\n\t\t\t\t# ah, just right\r\n\t\t\t\tlet result3 = buildName(\"Bob\", \"Adams\")\r\n\r\n\titem\r\n\t\ttitle Rest parameters\r\n\t\texpected\r\n\t\t\t+ function buildName(firstName: string, ...restOfName: string[]) {\r\n\t\t\t\t+ return firstName + \" \" + restOfName.join(\" \");\r\n\t\t\t+ }\r\n\t\t\t+ let buildNameFun: (fname: string, ...rest: string[]) => string = buildName;\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction buildName\r\n\t\t\t\t\tparam firstName\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tparam ...restOfName\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\treturn firstName + \" \" + restOfName.join(\" \")\r\n\r\n\t\t\t\tlet buildNameFun\r\n\t\t\t\t\t:=> \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam fname\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam ...rest\r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t:= buildName\r\n    \r\n\titem\r\n\t\ttitle This and arrow functions\r\n\t\texpected\r\n\t\t\t+ let deck = {\r\n\t\t\t\t+ suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\r\n\t\t\t\t+ cards: Array(52),\r\n\t\t\t\t+ createCardPicker: function () {\r\n\t\t\t\t\t+ return () => {\r\n\t\t\t\t\t\t+ let pickedCard = Math.floor(Math.random() * 52);\r\n\t\t\t\t\t\t+ let pickedSuit = Math.floor(pickedCard / 13);\r\n\t\t\t\t\t\t+ return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let cardPicker = deck.createCardPicker();\r\n\t\t\t+ let pickedCard = cardPicker();\r\n\t\t\t+ alert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\r\n\r\n\t\tittf\r\n\t\t\tlet deck\r\n\t\t\t\t{ \r\n\t\t\t\t\t[ suits\r\n\t\t\t\t\t\t@ \"hearts\"\r\n\t\t\t\t\t\t@ \"spades\"\r\n\t\t\t\t\t\t@ \"clubs\"\r\n\t\t\t\t\t\t@ \"diamonds\"\r\n\t\t\t\t\t@ cards Array(52)\r\n\t\t\t\t\t@ createCardPicker\r\n\t\t\t\t\t\tfunction \r\n\t\t\t\t\t\t\t# NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\r\n\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t\t=> \r\n\t\t\t\t\t\t\t\t\tlet pickedCard = Math.floor(Math.random() * 52)\r\n\t\t\t\t\t\t\t\t\tlet pickedSuit = Math.floor(pickedCard / 13)\r\n\t\t\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\t@ suit this.suits[pickedSuit]\r\n\t\t\t\t\t\t\t\t\t\t\t@ card pickedCard % 13\r\n\r\n\titem\r\n\t\ttitle This parameters in callbacks\r\n\t\texpected\r\n\t\t\t+ interface UIElement {\r\n\t\t\t\t+ addClickListener(onclick: (this: void, e: Event) => void): void;\r\n\t\t\t+ }\r\n\t\t\t+ class Handler {\r\n\t\t\t\t+ info: string;\r\n\t\t\t\t+ onClickBad(this: Handler, e: Event) {\r\n\t\t\t\t\t+ // oops, used this here. using this callback would crash at runtime\r\n\t\t\t\t\t+ this.info = e.message;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface UIElement\r\n\t\t\t\t\t:m addClickListener\r\n\t\t\t\t\t\t:void \r\n\t\t\t\t\t\tparam onclick\r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\tparam this\r\n\t\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\tparam e\r\n\t\t\t\t\t\t\t\t\t:ref Event\r\n    \r\n\t\t\t\tclass Handler\r\n\t\t\t\t\tp info\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\tm onClickBad\r\n\t\t\t\t\t\tparam this\r\n\t\t\t\t\t\t\t:ref Handler\r\n\t\t\t\t\t\tparam e\r\n\t\t\t\t\t\t\t:ref Event\r\n\t\t\t\t\t\tset this.info = e.message\r\n\r\n\titem\r\n\t\ttitle Overloads 1\r\n\t\texpected\r\n\t\t\t+ let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];\r\n\t\t\t+ function pickCard(x): any {\r\n\t\t\t\t+ // Check to see if we're working with an object/array\r\n\t\t\t\t+ // if so, they gave us the deck and we'll pick the card\r\n\t\t\t\t+ if (typeof x == \"object\") {\r\n\t\t\t\t\t+ let pickedCard = Math.floor(Math.random() * x.length);\r\n\t\t\t\t\t+ return pickedCard;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ // Otherwise just let them pick the card\r\n\t\t\t\t+ else if (typeof x == \"number\") {\r\n\t\t\t\t\t+ let pickedSuit = Math.floor(x / 13);\r\n\t\t\t\t\t+ return { suit: suits[pickedSuit], card: x % 13 };\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tlet suits\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"hearts\"\r\n\t\t\t\t\t\t@ \"spades\"\r\n\t\t\t\t\t\t@ \"clubs\"\r\n\t\t\t\t\t\t@ \"diamonds\"\r\n\t\t\t\tfunction pickCard\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\tif typeof x == \"object\"\r\n\t\t\t\t\t\tlet pickedCard = Math.floor(Math.random() * x.length)\r\n\t\t\t\t\t\treturn pickedCard\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t# Otherwise just let them pick the card\r\n\t\t\t\t\t\tif typeof x == \"number\"\r\n\t\t\t\t\t\t\tlet pickedSuit = Math.floor(x / 13)\r\n\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t@ suit suits[pickedSuit]\r\n\t\t\t\t\t\t\t\t\t@ card x % 13\r\n\r\n\titem\r\n\t\ttitle Overloads 2\r\n\t\texpected\r\n\t\t\t+ let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];\r\n\t\t\t+ function pickCard(x: { suit: string; card: number; }[]): number;\r\n\t\t\t+ function pickCard(x: number): { suit: string; card: number; };\r\n\t\t\t+ function pickCard(x): any {\r\n\t\t\t\t+ // Check to see if we're working with an object/array\r\n\t\t\t\t+ // if so, they gave us the deck and we'll pick the card\r\n\t\t\t\t+ if (typeof x == \"object\") {\r\n\t\t\t\t\t+ let pickedCard = Math.floor(Math.random() * x.length);\r\n\t\t\t\t\t+ return pickedCard;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ // Otherwise just let them pick the card\r\n\t\t\t\t+ else if (typeof x == \"number\") {\r\n\t\t\t\t\t+ let pickedSuit = Math.floor(x / 13);\r\n\t\t\t\t\t+ return { suit: suits[pickedSuit], card: x % 13 };\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tlet suits\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"hearts\"\r\n\t\t\t\t\t\t@ \"spades\"\r\n\t\t\t\t\t\t@ \"clubs\"\r\n\t\t\t\t\t\t@ \"diamonds\"\r\n\t\t\t\t:function pickCard\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t\t:p suit\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p card\r\n\t\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:number \r\n\r\n\t\t\t\t:function pickCard\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t:p suit\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:p card\r\n\t\t\t\t\t\t\t\t:number \r\n    \r\n\t\t\t\tfunction pickCard\r\n\t\t\t\t\tparam x\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\t# if so, they gave us the deck and we'll pick the card\r\n\t\t\t\t\tif typeof x == \"object\"\r\n\t\t\t\t\t\tlet pickedCard = Math.floor(Math.random() * x.length)\r\n\t\t\t\t\t\treturn pickedCard\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t# Otherwise just let them pick the card\r\n\t\t\t\t\t\tif typeof x == \"number\"\r\n\t\t\t\t\t\t\tlet pickedSuit = Math.floor(x / 13)\r\n\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t@ suit suits[pickedSuit]\r\n\t\t\t\t\t\t\t\t\t@ card x % 13"
      },
      "t/generics.ittf.ittf": {
        "type": "CODE",
        "contents": "element generics\r\n\ttag \r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Identity function with any\r\n\t\texpected\r\n\t\t\t+ function identity(arg: any): any {\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tfunction identity\r\n\t\t\t\tparam arg\r\n\t\t\t\t\t:any \r\n\t\t\t\t:return\r\n\t\t\t\t\t:any \r\n\t\t\t\treturn arg\r\n    \r\n\titem\r\n\t\ttitle Identity function with type variable\r\n\t\texpected\r\n\t\t\t+ function identity<T>(arg: T): T {\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tfunction identity\r\n\t\t\t\t:< T\r\n\t\t\t\tparam arg\r\n\t\t\t\t\t:ref T\r\n\t\t\t\t:return\r\n\t\t\t\t\t:ref T\r\n\t\t\t\treturn arg\r\n\r\n\titem\r\n\t\ttitle Type argument\r\n\t\texpected\r\n\t\t\t+ let output = identity<string>(\"myString\");  // type of output will be 'string'\r\n\t\tittf\r\n\t\t\tlet output\r\n\t\t\t\t_ identity\r\n\t\t\t\t\t:< string\r\n\t\t\t\t\t@ \"myString\"\r\n\r\n\titem\r\n\t\ttitle Length property fails\r\n\t\texpected\r\n\t\t\t+ function loggingIdentity<T>(arg: T): T {\r\n\t\t\t\t+ console.log(arg.length);\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tfunction loggingIdentity\r\n\t\t\t\t:< T\r\n\t\t\t\tparam arg\r\n\t\t\t\t\t:ref T\r\n\t\t\t\t:return\r\n\t\t\t\t\t:ref T\r\n\t\t\t\t_ console.log(arg.length)\r\n\t\t\t\treturn arg\r\n\r\n\titem\r\n\t\ttitle Length property succeds 1\r\n\t\texpected\r\n\t\t\t+ function loggingIdentity<T>(arg: T[]): T[] {\r\n\t\t\t\t+ console.log(arg.length);\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction loggingIdentity\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t_ console.log(arg.length)\r\n\t\t\t\t\treturn arg\r\n\t\t\t\t\r\n\r\n\titem\r\n\t\ttitle Length property succeds 2\r\n\t\texpected\r\n\t\t\t+ function loggingIdentity<T>(arg: Array<T>): Array<T> {\r\n\t\t\t\t+ console.log(arg.length);\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tfunction loggingIdentity\r\n\t\t\t\t:< T\r\n\t\t\t\tparam arg\r\n\t\t\t\t\t:ref Array\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t:return\r\n\t\t\t\t\t:ref Array\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t_ console.log(arg.length)\r\n\t\t\t\treturn arg\r\n\r\n\titem\r\n\t\ttitle Generic function\r\n\t\texpected\r\n\t\t\t+ function identity<T>(arg: T): T {\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\t\t+ let myIdentity: <T>(arg: T) => T = identity;\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction identity\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\treturn arg\r\n\t\t\t\tlet myIdentity\r\n\t\t\t\t\t:=> \r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:= identity\r\n\t\r\n\titem\r\n\t\ttitle Call signature object literal type\r\n\t\texpected\r\n\t\t\t+ function identity<T>(arg: T): T {\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\t\t+ let myIdentity: { <T>(arg: T): T } = identity;\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction identity\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\treturn arg\r\n\t\t\t\tlet myIdentity\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:call \r\n\t\t\t\t\t\t\t:< T\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:= identity\r\n\t\t\t\t\r\n\titem\r\n\t\ttitle Generic interface\r\n\t\texpected\r\n\t\t\t+ interface GenericIdentityFn<T> {\r\n\t\t\t\t+ (arg: T): T;\r\n\t\t\t+ }\r\n\t\t\t+ function identity<T>(arg: T): T {\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\t\t+ let myIdentity: GenericIdentityFn<number> = identity;\r\n\t\t\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface GenericIdentityFn\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:call \r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\tfunction identity\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\treturn arg\r\n\t\t\t\tlet myIdentity\r\n\t\t\t\t\t:ref GenericIdentityFn\r\n\t\t\t\t\t\t:param number\r\n\t\t\t\t\t:= identity\r\n\r\n\titem\r\n\t\ttitle Generic Classes\r\n\t\texpected\r\n\t\t\t+ class GenericNumber<T> {\r\n\t\t\t\t+ zeroValue: T;\r\n\t\t\t\t+ add: (x: T, y: T) => T;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tclass GenericNumber\r\n\t\t\t\t:< T\r\n\t\t\t\tp zeroValue\r\n\t\t\t\t\t:ref T\r\n\t\t\t\tp add\r\n\t\t\t\t\t:=> \r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t\tparam y\r\n\t\t\t\t\t\t\t:ref T\r\n\r\n\titem\r\n\t\ttitle Generic Constraints - fails\r\n\t\texpected\r\n\t\t\t+ function loggingIdentity<T>(arg: T): T {\r\n\t\t\t\t+ console.log(arg.length);  // Error: T doesn't have .length\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tfunction loggingIdentity\r\n\t\t\t\t:< T\r\n\t\t\t\tparam arg\r\n\t\t\t\t\t:ref T\r\n\t\t\t\t:return\r\n\t\t\t\t\t:ref T\r\n\t\t\t\t_ console.log(arg.length)\r\n\t\t\t\treturn arg\r\n\t\r\n\titem\r\n\t\ttitle Generic Constraints - succeds\r\n\t\texpected\r\n\t\t\t+ interface Lengthwise {\r\n\t\t\t\t+ length: number;\r\n\t\t\t+ }\r\n\t\t\t+ function loggingIdentity<T extends Lengthwise>(arg: T): T {\r\n\t\t\t\t+ console.log(arg.length);  // Now we know it has a .length property, so no more error\r\n\t\t\t\t+ return arg;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Lengthwise\r\n\t\t\t\t\t:p length\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tfunction loggingIdentity\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t\t:ref Lengthwise\r\n\t\t\t\t\tparam arg\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\t_ console.log(arg.length)\r\n\t\t\t\t\treturn arg\r\n\r\n\titem\r\n\t\ttitle Type Parameters in Generic Constraints\r\n\t\texpected\r\n\t\t\t+ function getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n\t\t\t\t+ return obj[key];\r\n\t\t\t+ }\r\n\t\t\t+ let x = { a: 1, b: 2, c: 3, d: 4 };\r\n\t\t\t+ getProperty(x, \"a\");\r\n\t\t\t+ getProperty(x, \"m\");\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction getProperty\r\n\t\t\t\t\t:< T\r\n\t\t\t\t\t:< K\r\n\t\t\t\t\t\t:keyof \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam obj\r\n\t\t\t\t\t\t:ref T\r\n\t\t\t\t\tparam key\r\n\t\t\t\t\t\t:ref K\r\n\t\t\t\t\treturn obj[key]\r\n\t\t\t\tlet x\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t@ a 1\r\n\t\t\t\t\t\t@ b 2\r\n\t\t\t\t\t\t@ c 3\r\n\t\t\t\t\t\t@ d 4\r\n\t\t\t\t_ getProperty(x, \"a\")\r\n\t\t\t\t_ getProperty(x, \"m\")\r\n\r\n\titem\r\n\t\ttitle Class Types in Generics\r\n\t\texpected\r\n\t\t\t+ function create<T>(c: { new (): T; }): T {\r\n\t\t\t\t+ return new c();\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tfunction create\r\n\t\t\t\t:< T\r\n\t\t\t\tparam c\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:new \r\n\t\t\t\t\t\t\t:ref T\r\n\t\t\t\t:return\r\n\t\t\t\t\t:ref T\r\n\t\t\t\treturn new c()\r\n\r\n\titem\r\n\t\ttitle Prototype property\r\n\t\texpected\r\n\t\t\t+ class BeeKeeper {\r\n\t\t\t\t+ hasMask: boolean;\r\n\t\t\t+ }\r\n\t\t\t+ class ZooKeeper {\r\n\t\t\t\t+ nametag: string;\r\n\t\t\t+ }\r\n\t\t\t+ class Animal {\r\n\t\t\t\t+ numLegs: number;\r\n\t\t\t+ }\r\n\t\t\t+ class Bee extends Animal {\r\n\t\t\t\t+ keeper: BeeKeeper;\r\n\t\t\t+ }\r\n\t\t\t+ class Lion extends Animal {\r\n\t\t\t\t+ keeper: ZooKeeper;\r\n\t\t\t+ }\r\n\t\t\t+ function createInstance<A extends Animal>(c: new () => A): A {\r\n\t\t\t\t+ return new c();\r\n\t\t\t+ }\r\n\t\t\t+ var x = createInstance(Lion).keeper.nametag;\r\n\t\t\t+ var y = createInstance(Bee).keeper.hasMask;\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass BeeKeeper\r\n\t\t\t\t\tp hasMask\r\n\t\t\t\t\t\t:boolean \r\n\t\t\t\tclass ZooKeeper\r\n\t\t\t\t\tp nametag\r\n\t\t\t\t\t\t:string \r\n\t\t\t\tclass Animal\r\n\t\t\t\t\tp numLegs\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tclass Bee\r\n\t\t\t\t\tsuper Animal\r\n\t\t\t\t\tp keeper\r\n\t\t\t\t\t\t:ref BeeKeeper\r\n\t\t\t\tclass Lion\r\n\t\t\t\t\tsuper Animal\r\n\t\t\t\t\tp keeper\r\n\t\t\t\t\t\t:ref ZooKeeper\r\n\t\t\t\tfunction createInstance\r\n\t\t\t\t\t:< A\r\n\t\t\t\t\t\t:ref Animal\r\n\t\t\t\t\tparam c\r\n\t\t\t\t\t\t:ctor \r\n\t\t\t\t\t\t\t:ref A\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref A\r\n\t\t\t\t\treturn new c()\r\n\t\t\t\tvar x = createInstance(Lion).keeper.nametag\r\n\t\t\t\tvar y = createInstance(Bee).keeper.hasMask"
      },
      "t/interfaces.ittf.ittf": {
        "type": "CODE",
        "contents": "element interfaces\r\n\ttag \r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Simple interface\r\n\t\texpected\r\n\t\t\t+ interface LabelledValue {\r\n\t\t\t\t+ label: string;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t:interface LabelledValue\r\n\t\t\t\t:p label\r\n\t\t\t\t\t:string \r\n\t\t\t\r\n\titem\r\n\t\ttitle Reference to interface\r\n\t\texpected\r\n\t\t\t+ function printLabel(labelledObj: LabelledValue) {\r\n\t\t\t\t+ console.log(labelledObj.label);\r\n\t\t\t+ }\r\n\t\t\t+ let myObj = { size: 10, label: \"Size 10 Object\" };\r\n\t\t\t+ printLabel(myObj);\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction printLabel\r\n\t\t\t\t\tparam labelledObj\r\n\t\t\t\t\t\t:ref LabelledValue\r\n\t\t\t\t\t_ console.log(labelledObj.label)\r\n\t\t\t\tlet myObj\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t@ size 10\r\n\t\t\t\t\t\t@ label \"Size 10 Object\"\r\n\t\t\t\t_ printLabel(myObj)\r\n\t\r\n\titem\r\n\t\ttitle Optional properties\r\n\t\texpected\r\n\t\t\t+ interface SquareConfig {\r\n\t\t\t\t+ color?: string;\r\n\t\t\t\t+ width?: number;\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t:interface SquareConfig\r\n\t\t\t\t:p color\r\n\t\t\t\t\t:optional \r\n\t\t\t\t\t:string \r\n\t\t\t\t:p width\r\n\t\t\t\t\t:optional \r\n\t\t\t\t\t:number \r\n\r\n\titem\r\n\t\ttitle Optional properties 2\r\n\t\texpected\r\n\t\t\t+ interface SquareConfig {\r\n\t\t\t\t+ color?: string;\r\n\t\t\t\t+ width?: number;\r\n\t\t\t+ }\r\n\t\t\t+ function createSquare(config: SquareConfig): { color: string; area: number } {\r\n\t\t\t\t+ let newSquare = { color: \"white\", area: 100 };\r\n\t\t\t\t+ if (config.clor) {\r\n\t\t\t\t\t+ // Error: Property 'clor' does not exist on type 'SquareConfig'\r\n\t\t\t\t\t+ newSquare.color = config.clor;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ if (config.width) {\r\n\t\t\t\t\t+ newSquare.area = config.width * config.width;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ return newSquare;\r\n\t\t\t+ }\r\n\t\t\t+ let mySquare = createSquare({ color: \"black\" });\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface SquareConfig\r\n\t\t\t\t\t:p color\r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:p width\r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:number \r\n\t\t\t\tfunction createSquare\r\n\t\t\t\t\tparam config\r\n\t\t\t\t\t\t:ref SquareConfig\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t:p color\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:p area\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tlet newSquare\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t@ color \"white\"\r\n\t\t\t\t\t\t\t@ area 100\r\n\t\t\t\t\tif config.clor\r\n\t\t\t\t\t\t# Error: Property 'clor' does not exist on type 'SquareConfig'\r\n\t\t\t\t\t\tset newSquare.color = config.clor\r\n\t\t\t\t\tif config.width\r\n\t\t\t\t\t\tset newSquare.area = config.width * config.width\r\n\t\t\t\t\treturn newSquare\r\n\t\t\t\tlet mySquare\r\n\t\t\t\t\t_ createSquare\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t@ color \"black\"\r\n\r\n\titem\r\n\t\ttitle Readonly properties\r\n\t\texpected\r\n\t\t\t+ interface Point {\r\n\t\t\t\t+ readonly x: number;\r\n\t\t\t\t+ readonly y: number;\r\n\t\t\t+ }\r\n\t\t\t+ // You can construct a Point by assigning an object literal.After the assignment, x and y can’t be changed.\r\n\t\t\t+ let p1: Point = { x: 10, y: 20 };\r\n\t\t\t+ p1.x = 5; // error!\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Point\r\n\t\t\t\t\t:p x\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:p y\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t# You can construct a Point by assigning an object literal.After the assignment, x and y can’t be changed.\r\n\t\t\t\tlet p1\r\n\t\t\t\t\t:ref Point\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t@ x 10\r\n\t\t\t\t\t\t@ y 20\r\n\t\t\t\t# error!\r\n\t\t\t\tset p1.x = 5\r\n\r\n\titem\r\n\t\ttitle Readonly vs const\r\n\t\texpected\r\n\t\t\t+ interface SquareConfig {\r\n\t\t\t\t+ color?: string;\r\n\t\t\t\t+ width?: number;\r\n\t\t\t+ }\r\n\t\t\t+ function createSquare(config: SquareConfig): { color: string; area: number } {\r\n\t\t\t\t+ // ...\r\n\t\t\t+ }\r\n\t\t\t+ let mySquare = createSquare({ colour: \"red\", width: 100 });\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface SquareConfig\r\n\t\t\t\t\t:p color\r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:p width\r\n\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t:number \r\n\t\t\t\tfunction createSquare\r\n\t\t\t\t\tparam config\r\n\t\t\t\t\t\t:ref SquareConfig\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:{ \r\n\t\t\t\t\t\t\t:p color\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t:p area\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\tlet mySquare\r\n\t\t\t\t\t_ createSquare\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t@ colour \"red\"\r\n\t\t\t\t\t\t\t@ width 100\r\n\r\n\titem\r\n\t\ttitle Call signature\r\n\t\texpected\r\n\t\t\t+ interface SearchFunc {\r\n\t\t\t\t+ (source: string, subString: string): boolean;\r\n\t\t\t+ }\r\n\t\t\t+ let mySearch: SearchFunc;\r\n\t\t\t+ mySearch = function (source: string, subString: string) {\r\n\t\t\t\t+ let result = source.search(subString);\r\n\t\t\t\t+ return result > -1;\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface SearchFunc\r\n\t\t\t\t\t:call \r\n\t\t\t\t\t\t:boolean \r\n\t\t\t\t\t\tparam source\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam subString\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\tlet mySearch\r\n\t\t\t\t\t:ref SearchFunc\r\n\t\t\t\tset mySearch =\r\n\t\t\t\t\tfunction \r\n\t\t\t\t\t\tparam source\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam subString\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tlet result = source.search(subString)\r\n\t\t\t\t\t\treturn result > -1\r\n\t\t\t\t\r\n\titem\r\n\t\ttitle Index signature\r\n\t\texpected\r\n\t\t\t+ interface StringArray {\r\n\t\t\t\t+ [index: number]: string;\r\n\t\t\t+ }\r\n\t\t\t+ let myArray: StringArray;\r\n\t\t\t+ myArray = [\"Bob\", \"Fred\"];\r\n\t\t\t+ let myStr: string = myArray[0];\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface StringArray\r\n\t\t\t\t\t:index \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam index\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\tlet myArray\r\n\t\t\t\t\t:ref StringArray\r\n\t\t\t\tset myArray =\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"Bob\"\r\n\t\t\t\t\t\t@ \"Fred\"\r\n\t\t\t\tlet myStr\r\n\t\t\t\t\t:string \r\n\t\t\t\t\t:= myArray[0]\r\n\r\n\titem\r\n\t\ttitle Index signature 2\r\n\t\texpected\r\n\t\t\t+ class Animal {\r\n\t\t\t\t+ name: string;\r\n\t\t\t+ }\r\n\t\t\t+ class Dog extends Animal {\r\n\t\t\t\t+ breed: string;\r\n\t\t\t+ }\r\n\t\t\t+ // Error: indexing with a numeric string might get you a completely separate type of Animal!\r\n\t\t\t+ interface NotOkay {\r\n\t\t\t\t+ [x: number]: Animal;\r\n\t\t\t\t+ [x: string]: Dog;\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass Animal\r\n\t\t\t\t\tp name\r\n\t\t\t\t\t\t:string \r\n\t\t\t\tclass Dog\r\n\t\t\t\t\tsuper Animal\r\n\t\t\t\t\tp breed\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t:interface NotOkay\r\n\t\t\t\t\t:index \r\n\t\t\t\t\t\t:ref Animal\r\n\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t:index \r\n\t\t\t\t\t\t:ref Dog\r\n\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t:string \r\n\titem\r\n\t\ttitle Index signature 3\r\n\t\texpected\r\n\t\t\t+ interface NumberDictionary {\r\n\t\t\t\t+ [index: string]: number;\r\n\t\t\t\t+ length: number; // ok, length is a number\r\n\t\t\t\t+ name: string; // error, the type of 'name' is not a subtype of the indexer\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t:interface NumberDictionary\r\n\t\t\t\t:index \r\n\t\t\t\t\t:number \r\n\t\t\t\t\tparam index\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t:p length\r\n\t\t\t\t\t:number \r\n\t\t\t\t:p name\r\n\t\t\t\t\t:string \r\n\titem\r\n\t\ttitle Readonly index signature 3\r\n\t\texpected\r\n\t\t\t+ interface ReadonlyStringArray {\r\n\t\t\t\t+ readonly [index: number]: string;\r\n\t\t\t+ }\r\n\t\t\t+ let myArray: ReadonlyStringArray = [\"Alice\", \"Bob\"];\r\n\t\t\t+ myArray[2] = \"Mallory\"; // error!\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface ReadonlyStringArray\r\n\t\t\t\t\t:index \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:readonly \r\n\t\t\t\t\t\tparam index\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\tlet myArray\r\n\t\t\t\t\t:ref ReadonlyStringArray\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"Alice\"\r\n\t\t\t\t\t\t@ \"Bob\"\r\n\t\t\t\tset myArray[2] = \"Mallory\"\r\n\r\n\titem\r\n\t\ttitle Class Types\r\n\t\texpected\r\n\t\t\t+ interface ClockInterface {\r\n\t\t\t\t+ currentTime: Date;\r\n\t\t\t+ }\r\n\t\t\t+ class Clock implements ClockInterface {\r\n\t\t\t\t+ currentTime: Date;\r\n\t\t\t\t+ constructor(h: number, m: number) { }\r\n\t\t\t+ }\r\n\t\t\t+ interface ClockInterface {\r\n\t\t\t\t+ currentTime: Date;\r\n\t\t\t\t+ setTime(d: Date);\r\n\t\t\t+ }\r\n\t\t\t+ class Clock implements ClockInterface {\r\n\t\t\t\t+ currentTime: Date;\r\n\t\t\t\t+ setTime(d: Date) {\r\n\t\t\t\t\t+ this.currentTime = d;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ constructor(h: number, m: number) {}\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface ClockInterface\r\n\t\t\t\t\t:p currentTime\r\n\t\t\t\t\t\t:ref Date\r\n\t\t\t\tclass Clock\r\n\t\t\t\t\t:implements ClockInterface\r\n\t\t\t\t\tp currentTime\r\n\t\t\t\t\t\t:ref Date\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam h\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam m\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t:interface ClockInterface\r\n\t\t\t\t\t:p currentTime\r\n\t\t\t\t\t\t:ref Date\r\n\t\t\t\t\t:m setTime\r\n\t\t\t\t\t\tparam d\r\n\t\t\t\t\t\t\t:ref Date\r\n\t\t\t\tclass Clock\r\n\t\t\t\t\t:extends ClockInterface\r\n\t\t\t\t\tp currentTime\r\n\t\t\t\t\t\t:ref Date\r\n\t\t\t\t\tm setTime\r\n\t\t\t\t\t\tparam d\r\n\t\t\t\t\t\t\t:ref Date\r\n\t\t\t\t\t\tset this.currentTime = d\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam h\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam m\r\n\t\t\t\t\t\t\t:number \r\n    \r\n\titem\r\n\t\ttitle static and instance sides of classes - fails\r\n\t\texpected\r\n\t\t\t+ interface ClockConstructor {\r\n\t\t\t\t+ new (hour: number, minute: number);\r\n\t\t\t+ }\r\n\t\t\t+ // Error. Since the constructor sits in the static side, it is not included in this check. \r\n\t\t\t+ class Clock implements ClockConstructor {\r\n\t\t\t\t+ currentTime: Date;\r\n\t\t\t\t+ constructor(h: number, m: number) { }\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface ClockConstructor\r\n\t\t\t\t\t:new \r\n\t\t\t\t\t\tparam hour\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam minute\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\tclass Clock\r\n\t\t\t\t\t:implements ClockConstructor\r\n\t\t\t\t\tp currentTime\r\n\t\t\t\t\t\t:ref Date\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam h\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam m\r\n\t\t\t\t\t\t\t:number \r\n    \r\n\titem\r\n\t\ttitle static and instance sides of classes - succeds\r\n\t\texpected\r\n\t\t\t+ interface ClockConstructor {\r\n\t\t\t\t+ new (hour: number, minute: number): ClockInterface;\r\n\t\t\t+ }\r\n\t\t\t+ interface ClockInterface {\r\n\t\t\t\t+ tick();\r\n\t\t\t+ }\r\n\t\t\t+ // Because createClock’s first parameter is of type ClockConstructor, in createClock(AnalogClock, 7, 32),\r\n\t\t\t+ // it checks that AnalogClock has the correct constructor signature.\r\n\t\t\t+ function createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {\r\n\t\t\t\t+ return new ctor(hour, minute);\r\n\t\t\t+ }\r\n\t\t\t+ class DigitalClock implements ClockInterface {\r\n\t\t\t\t+ constructor(h: number, m: number) {}\r\n\t\t\t\t+ tick() {\r\n\t\t\t\t\t+ console.log(\"beep beep\");\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ class AnalogClock implements ClockInterface {\r\n\t\t\t\t+ constructor(h: number, m: number) { }\r\n\t\t\t\t+ tick() {\r\n\t\t\t\t\t+ console.log(\"tick tock\");\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ let digital = createClock(DigitalClock, 12, 17);\r\n\t\t\t+ let analog = createClock(AnalogClock, 7, 32);\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface ClockConstructor\r\n\t\t\t\t\t:new \r\n\t\t\t\t\t\t:ref ClockInterface\r\n\t\t\t\t\t\tparam hour\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam minute\r\n\t\t\t\t\t\t\t:number \r\n    \r\n\t\t\t\t:interface ClockInterface\r\n\t\t\t\t\t:m tick\r\n    \r\n\t\t\t\tfunction createClock\r\n\t\t\t\t\tparam ctor\r\n\t\t\t\t\t\t:ref ClockConstructor\r\n\t\t\t\t\tparam hour\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\tparam minute\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref ClockInterface\r\n\t\t\t\t\treturn new ctor(hour, minute)\r\n    \r\n\t\t\t\tclass DigitalClock\r\n\t\t\t\t\t:implements ClockInterface\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam h\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam m\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tm tick\r\n\t\t\t\t\t\t_ console.log(\"beep beep\")\r\n    \r\n\t\t\t\tclass AnalogClock\r\n\t\t\t\t\t:implements ClockInterface\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam h\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tparam m\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tm tick\r\n\t\t\t\t\t\t_ console.log(\"tick tock\")\r\n\t\t\t\tlet digital = createClock(DigitalClock, 12, 17)\r\n\t\t\t\tlet analog = createClock(AnalogClock, 7, 32)\r\n\t\r\n\titem\r\n\t\ttitle Extending Interfaces 1\r\n\t\texpected\r\n\t\t\t+ interface Shape {\r\n\t\t\t\t+ color: string;\r\n\t\t\t+ }\r\n\t\t\t+ interface Square extends Shape {\r\n\t\t\t\t+ sideLength: number;\r\n\t\t\t+ }\r\n\t\t\t+ let square = {} as Square;\r\n\t\t\t+ square.color = \"blue\";\r\n\t\t\t+ square.sideLength = 10;\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Shape\r\n\t\t\t\t\t:p color\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t:interface Square\r\n\t\t\t\t\t:extends Shape\r\n\t\t\t\t\t:p sideLength\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tlet square\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t:as \r\n\t\t\t\t\t\t:ref Square\r\n\t\t\t\tset square.color = \"blue\"\r\n\t\t\t\tset square.sideLength = 10\r\n\t\t\t\t\r\n\titem\r\n\t\ttitle Extending Interfaces 2\r\n\t\texpected\r\n\t\t\t+ interface Shape {\r\n\t\t\t\t+ color: string;\r\n\t\t\t+ }\r\n\t\t\t+ interface PenStroke {\r\n\t\t\t\t+ penWidth: number;\r\n\t\t\t+ }\r\n\t\t\t+ interface Square extends Shape, PenStroke {\r\n\t\t\t\t+ sideLength: number;\r\n\t\t\t+ }\r\n\t\t\t+ let square = {} as Square;\r\n\t\t\t+ square.color = \"blue\";\r\n\t\t\t+ square.sideLength = 10;\r\n\t\t\t+ square.penWidth = 5.0;\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Shape\r\n\t\t\t\t\t:p color\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t:interface PenStroke\r\n\t\t\t\t\t:p penWidth\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t:interface Square\r\n\t\t\t\t\t:extends Shape\r\n\t\t\t\t\t:extends PenStroke\r\n\t\t\t\t\t:p sideLength\r\n\t\t\t\t\t\t:number \r\n\t\t\t\tlet square\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t:as \r\n\t\t\t\t\t\t:ref Square\r\n\t\t\t\tset square.color = \"blue\"\r\n\t\t\t\tset square.sideLength = 10\r\n\t\t\t\tset square.penWidth = 5\r\n\t\r\n\titem\r\n\t\ttitle Hybrid Types\r\n\t\texpected\r\n\t\t\t+ interface Counter {\r\n\t\t\t\t+ (start: number): string;\r\n\t\t\t\t+ interval: number;\r\n\t\t\t\t+ reset(): void;\r\n\t\t\t+ }\r\n\t\t\t+ function getCounter(): Counter {\r\n\t\t\t\t+ let counter = function (start: number) { } as Counter;\r\n\t\t\t\t+ counter.interval = 123;\r\n\t\t\t\t+ counter.reset = function () { };\r\n\t\t\t\t+ return counter;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:interface Counter\r\n\t\t\t\t\t:call \r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam start\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t:p interval\r\n\t\t\t\t\t\t:number \r\n\t\t\t\t\t:m reset\r\n\t\t\t\t\t\t:void \r\n\t\t\t\tfunction getCounter\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:ref Counter\r\n\t\t\t\t\tlet counter\r\n\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t:ref Counter\r\n\t\t\t\t\t\tfunction \r\n\t\t\t\t\t\t\tparam start\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\tset counter.interval = 123\r\n\t\t\t\t\tset counter.reset =\r\n\t\t\t\t\t\tfunction \r\n\t\t\t\t\treturn counter\r\n\t\t\t\tlet c = getCounter()\r\n\t\t\t\t_ c(10)\r\n\t\t\t\t_ c.reset\r\n\t\t\t\tset c.interval = 5\r\n\t\r\n\titem\r\n\t\ttitle Class with private property\r\n\t\texpected\r\n\t\t\t+ class Control {\r\n\t\t\t\t+ private state: any;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tclass Control\r\n\t\t\t\tp state\r\n\t\t\t\t\t:private \r\n\t\t\t\t\t:any \r\n\t\t\t\r\n\titem\r\n\t\ttitle Interface extending class\r\n\t\texpected\r\n\t\t\t+ interface SelectableControl extends Control {\r\n\t\t\t\t+ select(): void;\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t:interface SelectableControl\r\n\t\t\t\t:extends Control\r\n\t\t\t\t:m select\r\n\t\t\t\t\t:void \r\n\t\t\t\r\n\titem\r\n\t\ttitle Derived class extending interface\r\n\t\texpected\r\n\t\t\t+ class Button extends Control implements SelectableControl {\r\n\t\t\t\t+ select() {}\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tclass Button\r\n\t\t\t\tsuper Control\r\n\t\t\t\t:implements SelectableControl\r\n\t\t\t\tm select\r\n\t\t\t\r\n\titem\r\n\t\ttitle Derived class\r\n\t\texpected\r\n\t\t\t+ class TextBox extends Control {\r\n\t\t\t\t+ select() {}\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tclass TextBox\r\n\t\t\t\tsuper Control\r\n\t\t\t\tm select\r\n\t\t\t\r\n\titem\r\n\t\ttitle Class extending interface\r\n\t\texpected\r\n\t\t\t+ // Error: Property 'state' is missing in type 'Image'.\r\n\t\t\t+ class Image implements SelectableControl {\r\n\t\t\t\t+ select() {}\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\tclass Image\r\n\t\t\t\t:implements SelectableControl\r\n\t\t\t\tm select"
      },
      "t/modules.ittf.ittf": {
        "type": "CODE",
        "contents": "element modules\r\n\ttag \r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Exporting a declaration\r\n\t\texpected\r\n\t\t\t+ /* Validation.ts */\r\n\t\t\t+ export interface StringValidator {\r\n\t\t\t\t+ isAcceptable(s: string): boolean;\r\n\t\t\t+ }\r\n\t\t\t+ /* ZipCodeValidator.ts */\r\n\t\t\t+ export const numberRegexp = /^[0-9]+$/;\r\n\t\t\t+ export class ZipCodeValidator implements StringValidator {\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return s.length === 5 && numberRegexp.test(s);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# Validation.ts\r\n\t\t\t\texport \r\n\t\t\t\t\t:interface StringValidator\r\n\t\t\t\t\t\t:m isAcceptable\r\n\t\t\t\t\t\t\t:boolean \r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t#\r\n\t\t\t\t\t# ZipCodeValidator.ts\r\n\t\t\t\texport \r\n\t\t\t\t\tconst numberRegexp = /^[0-9]+$/\r\n\t\t\t\texport \r\n\t\t\t\t\tclass ZipCodeValidator\r\n\t\t\t\t\t\t:implements StringValidator\r\n\t\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\treturn s.length === 5 && numberRegexp.test(s)\r\n\titem\r\n\t\ttitle Export statements\r\n\t\texpected\r\n\t\t\t+ class ZipCodeValidator implements StringValidator {\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return s.length === 5 && numberRegexp.test(s);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ export { ZipCodeValidator };\r\n\t\t\t+ export { ZipCodeValidator as mainValidator };\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tclass ZipCodeValidator\r\n\t\t\t\t\t:implements StringValidator\r\n\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\treturn s.length === 5 && numberRegexp.test(s)\r\n\t\t\t\texport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\texport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\t\tas mainValidator\r\n\titem\r\n\t\ttitle Re - exports\r\n\t\texpected\r\n\t\t\t+ /* ParseIntBasedZipCodeValidator.ts */\r\n\t\t\t+ export class ParseIntBasedZipCodeValidator {\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return s.length === 5 && parseInt(s).toString() === s;\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ // Export original validator but rename it\r\n\t\t\t+ export { ZipCodeValidator as RegExpBasedZipCodeValidator } from \"./ZipCodeValidator\";\r\n\t\t\t+ // Optionally, a module can wrap one or more modules and combine all their exports using export * from \"module\" syntax.\r\n\t\t\t+ /* AllValidators.ts */\r\n\t\t\t+ export * from \"./StringValidator\"; // exports interface 'StringValidator'\r\n\t\t\t+ export * from \"./LettersOnlyValidator\"; // exports class 'LettersOnlyValidator'\r\n\t\t\t+ export * from \"./ZipCodeValidator\";  // exports class 'ZipCodeValidator'\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# ParseIntBasedZipCodeValidator.ts\r\n\t\t\t\texport \r\n\t\t\t\t\tclass ParseIntBasedZipCodeValidator\r\n\t\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\treturn s.length === 5 && parseInt(s).toString() === s\r\n\t\t\t\texport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\t\tas RegExpBasedZipCodeValidator\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\t#\r\n\t\t\t\t\t# AllValidators.ts\r\n\t\t\t\texport *\r\n\t\t\t\t\tfrom \"./StringValidator\"\r\n\t\t\t\texport *\r\n\t\t\t\t\tfrom \"./LettersOnlyValidator\"\r\n\t\t\t\texport *\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\titem\r\n\t\ttitle Import a single export from a module\r\n\t\texpected\r\n\t\t\t+ import { ZipCodeValidator } from \"./ZipCodeValidator\";\r\n\t\t\t+ let myValidator = new ZipCodeValidator();\r\n\t\t\t+ /* imports can also be renamed */\r\n\t\t\t+ import { ZipCodeValidator as ZCV } from \"./ZipCodeValidator\";\r\n\t\t\t+ let myValidator = new ZCV();\r\n\t\t\t+ /* Import the entire module into a single variable, and use it to access the module exports */\r\n\t\t\t+ import * as validator from \"./ZipCodeValidator\";\r\n\t\t\t+ let myValidator = new validator.ZipCodeValidator();\r\n\t\t\t+ /* Import a module for side- effects only */\r\n\t\t\t+ import \"./my-module.js\";\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\timport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\tlet myValidator = new ZipCodeValidator()\r\n\t\t\t\t#\r\n\t\t\t\t\t# imports can also be renamed\r\n\t\t\t\timport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\t\tas ZCV\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\tlet myValidator = new ZCV()\r\n\t\t\t\t#\r\n\t\t\t\t\t# Import the entire module into a single variable, and use it to access the module exports\r\n\t\t\t\timport \r\n\t\t\t\t\tas validator\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\tlet myValidator = new validator.ZipCodeValidator()\r\n\t\t\t\t#\r\n\t\t\t\t\t# Import a module for side- effects only\r\n\t\t\t\timport \"./my-module.js\"\r\n\titem\r\n\t\ttitle Default exports\r\n\t\texpected\r\n\t\t\t+ /* JQuery.d.ts */\r\n\t\t\t+ declare let $: JQuery;\r\n\t\t\t+ export default $;\r\n\t\t\t+ /* App.ts */\r\n\t\t\t+ import $ from \"JQuery\";\r\n\t\t\t+ $(\"button.continue\").html(\"Next Step...\");\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# JQuery.d.ts\r\n\t\t\t\t:declare\r\n\t\t\t\t\tlet $\r\n\t\t\t\t\t\t:ref JQuery\r\n\t\t\t\texport-default $\r\n\t\t\t\t#\r\n\t\t\t\t\t# App.ts\r\n\t\t\t\timport $ from \"JQuery\"\r\n\t\t\t\t_ $(\"button.continue\").html(\"Next Step...\")\r\n\r\n\titem\r\n\t\ttitle Default exports of classes and functions\r\n\t\texpected\r\n\t\t\t+ /* ZipCodeValidator.ts */\r\n\t\t\t+ export default class ZipCodeValidator {\r\n\t\t\t\t+ static numberRegexp = /^[0-9]+$/;\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return s.length === 5 && ZipCodeValidator.numberRegexp.test(s);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ /* Test.ts */\r\n\t\t\t+ import validator from \"./ZipCodeValidator\";\r\n\t\t\t+ let myValidator = new validator();\r\n\t\t\t+ /* or StaticZipCodeValidator.ts */\r\n\t\t\t+ const numberRegexp = /^[0-9]+$/;\r\n\t\t\t+ export default function (s: string) {\r\n\t\t\t\t+ return s.length === 5 && numberRegexp.test(s);\r\n\t\t\t+ }\r\n\t\t\t+ /* Test.ts */\r\n\t\t\t+ import validate from \"./StaticZipCodeValidator\";\r\n\t\t\t+ let strings = [\"Hello\", \"98052\", \"101\"];\r\n\t\t\t+ // Use function validate\r\n\t\t\t+ strings.forEach(s => {\r\n\t\t\t\t+ console.log(`\"${s}\" ${validate(s) ? \" matches\" : \" does not match\"}`);\r\n\t\t\t+ });\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# ZipCodeValidator.ts\r\n\t\t\t\texport-default \r\n\t\t\t\t\tclass ZipCodeValidator\r\n\t\t\t\t\t\tp numberRegexp\r\n\t\t\t\t\t\t\tstatic\r\n\t\t\t\t\t\t\t:= /^[0-9]+$/\r\n\t\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\treturn s.length === 5 && ZipCodeValidator.numberRegexp.test(s)\r\n\t\t\t\t#\r\n\t\t\t\t\t# Test.ts\r\n\t\t\t\timport validator from \"./ZipCodeValidator\"\r\n\t\t\t\tlet myValidator = new validator()\r\n\t\t\t\t#\r\n\t\t\t\t\t# or\r\n\t\t\t\t\t# StaticZipCodeValidator.ts\r\n\t\t\t\tconst numberRegexp = /^[0-9]+$/\r\n\t\t\t\texport-default \r\n\t\t\t\t\tfunction \r\n\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\treturn s.length === 5 && numberRegexp.test(s)\r\n\t\t\t\t#\r\n\t\t\t\t\t# Test.ts\r\n\t\t\t\timport validate from \"./StaticZipCodeValidator\"\r\n\t\t\t\tlet strings\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"Hello\"\r\n\t\t\t\t\t\t@ \"98052\"\r\n\t\t\t\t\t\t@ \"101\"\r\n\t\t\t\t_ strings.forEach\r\n\t\t\t\t\t=> \r\n\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t_ console.log\r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ \"\r\n\t\t\t\t\t\t\t\t@ s\r\n\t\t\t\t\t\t\t\t+ \"\\b\r\n\t\t\t\t\t\t\t\tiif validate(s)\r\n\t\t\t\t\t\t\t\t\tthen \" matches\"\r\n\t\t\t\t\t\t\t\t\telse \" does not match\"\r\n\t\t\t\t\t\t\t\t+ \r\n\titem\r\n\t\ttitle Default exports can also be just values:\r\n\t\texpected\r\n\t\t\t+ /* default exports can also be just values: */\r\n\t\t\t+ /* OneTwoThree.ts */\r\n\t\t\t+ export default \"123\";\r\n\t\t\t+ /* Log.ts */\r\n\t\t\t+ import num from \"./OneTwoThree\";\r\n\t\t\t+ console.log(num); // \"123\"\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# OneTwoThree.ts\r\n\t\t\t\texport-default \"123\"\r\n\t\t\t\t#\r\n\t\t\t\t\t# Log.ts\r\n\t\t\t\timport num from \"./OneTwoThree\"\r\n\t\t\t\t_ console.log(num)\r\n\t\r\n\titem\r\n\t\ttitle export = and import = require()\r\n\t\texpected\r\n\t\t\t+ /* ZipCodeValidator.ts */\r\n\t\t\t+ let numberRegexp = /^[0-9]+$/;\r\n\t\t\t+ class ZipCodeValidator {\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return s.length === 5 && numberRegexp.test(s);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ export = ZipCodeValidator;\r\n\t\t\t+ /* Test.ts */\r\n\t\t\t+ import zip = require(\"./ZipCodeValidator\");\r\n\t\t\t+ // Some samples to try\r\n\t\t\t+ let strings = [\"Hello\", \"98052\", \"101\"];\r\n\t\t\t+ // Validators to use\r\n\t\t\t+ let validator = new zip();\r\n\t\t\t+ // Show whether each string passed each validator\r\n\t\t\t+ strings.forEach(s => {\r\n\t\t\t\t+ console.log(`\"${s}\" - ${validator.isAcceptable(s) ? \"matches\" : \"does not match\"}`);\r\n\t\t\t+ });\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# ZipCodeValidator.ts\r\n\t\t\t\tlet numberRegexp = /^[0-9]+$/\r\n\t\t\t\tclass ZipCodeValidator\r\n\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\treturn s.length === 5 && numberRegexp.test(s)\r\n\t\t\t\t:export ZipCodeValidator\r\n\t\t\t\t#\r\n\t\t\t\t\t# Test.ts\r\n\t\t\t\t:import zip\r\n\t\t\t\t\t:require \"./ZipCodeValidator\"\r\n\t\t\t\tlet strings\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"Hello\"\r\n\t\t\t\t\t\t@ \"98052\"\r\n\t\t\t\t\t\t@ \"101\"\r\n\t\t\t\tlet validator = new zip()\r\n\t\t\t\t_ strings.forEach\r\n\t\t\t\t\t=> \r\n\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t_ console.log\r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ \"\r\n\t\t\t\t\t\t\t\t@ s\r\n\t\t\t\t\t\t\t\t+ \" -\\b\r\n\t\t\t\t\t\t\t\tiif validator.isAcceptable(s)\r\n\t\t\t\t\t\t\t\t\tthen \"matches\"\r\n\t\t\t\t\t\t\t\t\telse \"does not match\"\r\n\t\t\t\t\t\t\t\t+ \r\n\t\r\n\titem\r\n\t\ttitle Code Generation for Modules\r\n\t\texpected\r\n\t\t\t+ import m = require(\"mod\");\r\n\t\t\t+ export let t = m.something + 1;\r\n\t\t\t+ /* AMD / RequireJS SimpleModule.js */\r\n\t\t\t+ define([\"require\", \"exports\", \"./mod\"], function (require, exports, mod_1) {\r\n\t\t\t\t+ exports.t = mod_1.something + 1;\r\n\t\t\t+ });\r\n\t\t\t+ /* CommonJS / Node SimpleModule.js */\r\n\t\t\t+ var mod_1 = require(\"./mod\");\r\n\t\t\t+ exports.t = mod_1.something + 1;\r\n\t\t\t+ /* UMD SimpleModule.js */\r\n\t\t\t+ (function (factory) {\r\n\t\t\t\t+ if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n\t\t\t\t\t+ var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n\t\t\t\t+ } else if (typeof define === \"function\" && define.amd) {\r\n\t\t\t\t\t+ define([\"require\", \"exports\", \"./mod\"], factory);\r\n\t\t\t\t+ }\r\n\t\t\t+ })(function (require, exports) {\r\n\t\t\t\t+ var mod_1 = require(\"./mod\");\r\n\t\t\t\t+ exports.t = mod_1.something + 1;\r\n\t\t\t+ });\r\n\t\t\t+ /* System SimpleModule.js */\r\n\t\t\t+ System.register([\"./mod\"], function (exports_1) {\r\n\t\t\t\t+ var mod_1;\r\n\t\t\t\t+ var t;\r\n\t\t\t\t+ return {\r\n\t\t\t\t\t+ setters: [\r\n\t\t\t\t\t\t+ function (mod_1_1) {\r\n\t\t\t\t\t\t\t+ mod_1 = mod_1_1;\r\n\t\t\t\t\t\t+ }],\r\n\t\t\t\t\t\t+ execute: function () {\r\n\t\t\t\t\t\t\t+ exports_1(\"t\", t = mod_1.something + 1);\r\n\t\t\t\t\t\t+ }\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ });\r\n\t\t\t+ /* Native ECMAScript 2015 modules SimpleModule.js */\r\n\t\t\t+ import { something } from \"./mod\";\r\n\t\t\t+ export var t = something + 1;\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:import m\r\n\t\t\t\t\t:require \"mod\"\r\n\t\t\t\texport \r\n\t\t\t\t\tlet t = m.something + 1\r\n\t\t\t\t#\r\n\t\t\t\t\t# AMD / RequireJS SimpleModule.js\r\n\t\t\t\t_ define\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"require\"\r\n\t\t\t\t\t\t@ \"exports\"\r\n\t\t\t\t\t\t@ \"./mod\"\r\n\t\t\t\t\tfunction \r\n\t\t\t\t\t\tparam require\r\n\t\t\t\t\t\tparam exports\r\n\t\t\t\t\t\tparam mod_1\r\n\t\t\t\t\t\tset exports.t = mod_1.something + 1\r\n\t\t\t\t#\r\n\t\t\t\t\t# CommonJS / Node SimpleModule.js\r\n\t\t\t\tvar mod_1 = require(\"./mod\")\r\n\t\t\t\tset exports.t = mod_1.something + 1\r\n\t\t\t\t#\r\n\t\t\t\t\t# UMD SimpleModule.js\r\n\t\t\t\tiife \r\n\t\t\t\t\tparam factory\r\n\t\t\t\t\tif typeof module === \"object\" && typeof module.exports === \"object\"\r\n\t\t\t\t\t\tvar v = factory(require, exports)\r\n\t\t\t\t\t\tif v !== undefined\r\n\t\t\t\t\t\t\tset module.exports = v\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif typeof define === \"function\" && define.amd\r\n\t\t\t\t\t\t\t_ define\r\n\t\t\t\t\t\t\t\t[ \r\n\t\t\t\t\t\t\t\t\t@ \"require\"\r\n\t\t\t\t\t\t\t\t\t@ \"exports\"\r\n\t\t\t\t\t\t\t\t\t@ \"./mod\"\r\n\t\t\t\t\t\t\t\t@ factory\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tfunction \r\n\t\t\t\t\t\t\tparam require\r\n\t\t\t\t\t\t\tparam exports\r\n\t\t\t\t\t\t\tvar mod_1 = require(\"./mod\")\r\n\t\t\t\t\t\t\tset exports.t = mod_1.something + 1\r\n\t\t\t\t#\r\n\t\t\t\t\t# System SimpleModule.js\r\n\t\t\t\t_ System.register\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"./mod\"\r\n\t\t\t\t\tfunction \r\n\t\t\t\t\t\tparam exports_1\r\n\t\t\t\t\t\tvar mod_1\r\n\t\t\t\t\t\tvar t\r\n\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t[ setters\r\n\t\t\t\t\t\t\t\t\tfunction \r\n\t\t\t\t\t\t\t\t\t\tparam mod_1_1\r\n\t\t\t\t\t\t\t\t\t\tset mod_1 = mod_1_1\r\n\t\t\t\t\t\t\t\t@ execute\r\n\t\t\t\t\t\t\t\t\tfunction \r\n\t\t\t\t\t\t\t\t\t\t_ exports_1\r\n\t\t\t\t\t\t\t\t\t\t\t@ \"t\"\r\n\t\t\t\t\t\t\t\t\t\t\tset t = mod_1.something + 1\r\n\t\t\t\t#\r\n\t\t\t\t\t# Native ECMAScript 2015 modules SimpleModule.js\r\n\t\t\t\timport \r\n\t\t\t\t\t@ something\r\n\t\t\t\t\tfrom \"./mod\"\r\n\t\t\t\texport \r\n\t\t\t\t\tvar t = something + 1\r\n\r\n\titem\r\n\t\ttitle Simple Example\r\n\t\texpected\r\n\t\t\t+ /* Validation.ts */\r\n\t\t\t+ export interface StringValidator {\r\n\t\t\t\t+ isAcceptable(s: string): boolean;\r\n\t\t\t+ }\r\n\t\t\t+ /* LettersOnlyValidator.ts */\r\n\t\t\t+ import { StringValidator } from \"./Validation\";\r\n\t\t\t+ const lettersRegexp = /^[A-Za-z]+$/;\r\n\t\t\t+ export class LettersOnlyValidator implements StringValidator {\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return lettersRegexp.test(s);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ /* ZipCodeValidator.ts */\r\n\t\t\t+ import { StringValidator } from \"./Validation\";\r\n\t\t\t+ const numberRegexp = /^[0-9]+$/;\r\n\t\t\t+ export class ZipCodeValidator implements StringValidator {\r\n\t\t\t\t+ isAcceptable(s: string) {\r\n\t\t\t\t\t+ return s.length === 5 && numberRegexp.test(s);\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\t\t\t+ /* Test.ts */\r\n\t\t\t+ import { StringValidator } from \"./Validation\";\r\n\t\t\t+ import { ZipCodeValidator } from \"./ZipCodeValidator\";\r\n\t\t\t+ import { LettersOnlyValidator } from \"./LettersOnlyValidator\";\r\n\t\t\t+ // Some samples to try\r\n\t\t\t+ let strings = [\"Hello\", \"98052\", \"101\"];\r\n\t\t\t+ // Validators to use\r\n\t\t\t+ let validators: { [s: string]: StringValidator; } = {};\r\n\t\t\t+ validators[\"ZIP code\"] = new ZipCodeValidator();\r\n\t\t\t+ validators[\"Letters only\"] = new LettersOnlyValidator();\r\n\t\t\t+ // Show whether each string passed each validator\r\n\t\t\t+ strings.forEach(s => {\r\n\t\t\t\t+ for (let name in validators) {\r\n\t\t\t\t\t+ console.log(`\"${s}\" - ${validators[name].isAcceptable(s) ? \"matches\" : \"does not match\"} ${name}`);\r\n\t\t\t\t+ }\r\n\t\t\t+ });\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# Validation.ts\r\n\t\t\t\texport \r\n\t\t\t\t\t:interface StringValidator\r\n\t\t\t\t\t\t:m isAcceptable\r\n\t\t\t\t\t\t\t:boolean \r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t#\r\n\t\t\t\t\t# LettersOnlyValidator.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ StringValidator\r\n\t\t\t\t\tfrom \"./Validation\"\r\n\t\t\t\tconst lettersRegexp = /^[A-Za-z]+$/\r\n\t\t\t\texport \r\n\t\t\t\t\tclass LettersOnlyValidator\r\n\t\t\t\t\t\t:implements StringValidator\r\n\t\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\treturn lettersRegexp.test(s)\r\n\t\t\t\t#\r\n\t\t\t\t\t# ZipCodeValidator.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ StringValidator\r\n\t\t\t\t\tfrom \"./Validation\"\r\n\t\t\t\tconst numberRegexp = /^[0-9]+$/\r\n\t\t\t\texport \r\n\t\t\t\t\tclass ZipCodeValidator\r\n\t\t\t\t\t\t:implements StringValidator\r\n\t\t\t\t\t\tm isAcceptable\r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\treturn s.length === 5 && numberRegexp.test(s)\r\n\t\t\t\t#\r\n\t\t\t\t\t# Test.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ StringValidator\r\n\t\t\t\t\tfrom \"./Validation\"\r\n\t\t\t\timport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\timport \r\n\t\t\t\t\t@ LettersOnlyValidator\r\n\t\t\t\t\tfrom \"./LettersOnlyValidator\"\r\n\t\t\t\tlet strings\r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ \"Hello\"\r\n\t\t\t\t\t\t@ \"98052\"\r\n\t\t\t\t\t\t@ \"101\"\r\n\t\t\t\tlet validators\r\n\t\t\t\t\t:{ \r\n\t\t\t\t\t\t:index \r\n\t\t\t\t\t\t\t:ref StringValidator\r\n\t\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t{ \r\n\t\t\t\tset validators[\"ZIP code\"] = new ZipCodeValidator()\r\n\t\t\t\tset validators[\"Letters only\"] = new LettersOnlyValidator()\r\n\t\t\t\t_ strings.forEach\r\n\t\t\t\t\t=> \r\n\t\t\t\t\t\tparam s\r\n\t\t\t\t\t\tfor let name in validators\r\n\t\t\t\t\t\t\t_ console.log\r\n\t\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t\t+ \"\r\n\t\t\t\t\t\t\t\t\t@ s\r\n\t\t\t\t\t\t\t\t\t+ \" -\\b\r\n\t\t\t\t\t\t\t\t\tiif validators[name].isAcceptable(s)\r\n\t\t\t\t\t\t\t\t\t\tthen \"matches\"\r\n\t\t\t\t\t\t\t\t\t\telse \"does not match\"\r\n\t\t\t\t\t\t\t\t\t+ \\b\r\n\t\t\t\t\t\t\t\t\t@ name\r\n\t\t\t\t\t\t\t\t\t+ \r\n\titem\r\n\t\ttitle Optional Module Loading\r\n\t\texpected\r\n\t\t\t+ /* Dynamic Module Loading in Node.js */\r\n\t\t\t+ declare function require(moduleName: string): any;\r\n\t\t\t+ import { ZipCodeValidator as Zip } from \"./ZipCodeValidator\";\r\n\t\t\t+ if (needZipValidation) {\r\n\t\t\t\t+ let ZipCodeValidator: typeof Zip = require(\"./ZipCodeValidator\");\r\n\t\t\t\t+ let validator = new ZipCodeValidator();\r\n\t\t\t\t+ if (validator.isAcceptable(\"...\")) { /* ... */ }\r\n\t\t\t+ }\r\n\t\t\t+ /* Sample: Dynamic Module Loading in require.js */\r\n\t\t\t+ declare function require(moduleNames: string[], onLoad: (...args: any[]) => void): void;\r\n\t\t\t+ import * as Zip from \"./ZipCodeValidator\";\r\n\t\t\t+ if (needZipValidation) {\r\n\t\t\t\t+ require([\"./ZipCodeValidator\"], (ZipCodeValidator: typeof Zip) => {\r\n\t\t\t\t\t+ let validator = new ZipCodeValidator.ZipCodeValidator();\r\n\t\t\t\t\t+ if (validator.isAcceptable(\"...\")) { /* ... */ }\r\n\t\t\t\t+ });\r\n\t\t\t+ }\r\n\t\t\t+ /* Sample: Dynamic Module Loading in System.js */\r\n\t\t\t+ declare const System: any;\r\n\t\t\t+ import { ZipCodeValidator as Zip } from \"./ZipCodeValidator\";\r\n\t\t\t+ if (needZipValidation) {\r\n\t\t\t\t+ System.import(\"./ZipCodeValidator\").then((ZipCodeValidator: typeof Zip) => {\r\n\t\t\t\t\t+ var x = new ZipCodeValidator();\r\n\t\t\t\t\t+ if (x.isAcceptable(\"...\")) { /* ... */ }\r\n\t\t\t\t+ });\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# Dynamic Module Loading in Node.js\r\n\t\t\t\t:declare\r\n\t\t\t\t\t:function require\r\n\t\t\t\t\t\tparam moduleName\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:any \r\n\t\t\t\timport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\t\tas Zip\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\tif needZipValidation\r\n\t\t\t\t\tlet ZipCodeValidator\r\n\t\t\t\t\t\t:typeof Zip\r\n\t\t\t\t\t\t_ require(\"./ZipCodeValidator\")\r\n\t\t\t\t\tlet validator = new ZipCodeValidator()\r\n\t\t\t\t\tif validator.isAcceptable(\"...\")\r\n\t\t\t\t#\r\n\t\t\t\t\t# Sample: Dynamic Module Loading in require.js\r\n\t\t\t\t:declare\r\n\t\t\t\t\t:function require\r\n\t\t\t\t\t\tparam moduleNames\r\n\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam onLoad\r\n\t\t\t\t\t\t\t:=> \r\n\t\t\t\t\t\t\t\t:void \r\n\t\t\t\t\t\t\t\tparam ...args\r\n\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:void \r\n\t\t\t\timport \r\n\t\t\t\t\tas Zip\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\tif needZipValidation\r\n\t\t\t\t\t_ require\r\n\t\t\t\t\t\t[ \r\n\t\t\t\t\t\t\t@ \"./ZipCodeValidator\"\r\n\t\t\t\t\t\t=> \r\n\t\t\t\t\t\t\tparam ZipCodeValidator\r\n\t\t\t\t\t\t\t\t:typeof Zip\r\n\t\t\t\t\t\t\tlet validator = new ZipCodeValidator.ZipCodeValidator()\r\n\t\t\t\t\t\t\tif validator.isAcceptable(\"...\")\r\n\t\t\t\t#\r\n\t\t\t\t\t# Sample: Dynamic Module Loading in System.js\r\n\t\t\t\t:declare\r\n\t\t\t\t\tconst System\r\n\t\t\t\t\t\t:any \r\n\t\t\t\timport \r\n\t\t\t\t\t@ ZipCodeValidator\r\n\t\t\t\t\t\tas Zip\r\n\t\t\t\t\tfrom \"./ZipCodeValidator\"\r\n\t\t\t\tif needZipValidation\r\n\t\t\t\t\t_ System.import(\"./ZipCodeValidator\").then\r\n\t\t\t\t\t\t=> \r\n\t\t\t\t\t\t\tparam ZipCodeValidator\r\n\t\t\t\t\t\t\t\t:typeof Zip\r\n\t\t\t\t\t\t\tvar x = new ZipCodeValidator()\r\n\t\t\t\t\t\t\tif x.isAcceptable(\"...\")\r\n\r\n\titem\r\n\t\ttitle Ambient Modules\r\n\t\texpected\r\n\t\t\t+ /* node.d.ts(simplified excerpt) */\r\n\t\t\t+ declare module \"url\" {\r\n\t\t\t\t+ export interface Url {\r\n\t\t\t\t\t+ protocol?: string;\r\n\t\t\t\t\t+ hostname?: string;\r\n\t\t\t\t\t+ pathname?: string;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ export function parse(urlStr: string, parseQueryString?, slashesDenoteHost?): Url;\r\n\t\t\t+ }\r\n\t\t\t+ declare module \"path\" {\r\n\t\t\t\t+ export function normalize(p: string): string;\r\n\t\t\t\t+ export function join(...paths: any[]): string;\r\n\t\t\t\t+ export var sep: string;\r\n\t\t\t+ }\r\n\t\t\t+ /* Now we can /// <reference> node.d.ts and then load the modules using import url = require(\"url\"); or import * as URL from \"url\". */\r\n\t\t\t+ /// <reference path=\"node.d.ts\"/>\r\n\t\t\t+ import * as URL from \"url\";\r\n\t\t\t+ let myUrl = URL.parse(\"http://www.typescriptlang.org\");\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# node.d.ts(simplified excerpt)\r\n\t\t\t\t:declare\r\n\t\t\t\t\t:module \"url\"\r\n\t\t\t\t\t\texport \r\n\t\t\t\t\t\t\t:interface Url\r\n\t\t\t\t\t\t\t\t:p protocol\r\n\t\t\t\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p hostname\r\n\t\t\t\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:p pathname\r\n\t\t\t\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\texport \r\n\t\t\t\t\t\t\t:function parse\r\n\t\t\t\t\t\t\t\tparam urlStr\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\tparam parseQueryString\r\n\t\t\t\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t\t\tparam slashesDenoteHost\r\n\t\t\t\t\t\t\t\t\t:optional \r\n\t\t\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t\t\t:ref Url\r\n\t\t\t\t\t:module \"path\"\r\n\t\t\t\t\t\texport \r\n\t\t\t\t\t\t\t:function normalize\r\n\t\t\t\t\t\t\t\tparam p\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\texport \r\n\t\t\t\t\t\t\t:function join\r\n\t\t\t\t\t\t\t\tparam ...paths\r\n\t\t\t\t\t\t\t\t\t:[ \r\n\t\t\t\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\texport \r\n\t\t\t\t\t\t\tvar sep\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t#\r\n\t\t\t\t\t# Now we can /// <reference> node.d.ts and then load the modules using import url = require(\"url\"); or import * as URL from \"url\".\r\n\t\t\t\timport \r\n\t\t\t\t\tas URL\r\n\t\t\t\t\tfrom \"url\"\r\n\t\t\t\tlet myUrl = URL.parse(\"http://www.typescriptlang.org\")\r\n    \r\n\titem\r\n\t\ttitle Shorthand ambient modules\r\n\t\texpected\r\n\t\t\t+ /*declarations.d.ts */\r\n\t\t\t+ declare module \"hot-new-module\";\r\n\t\t\t+ /* All imports from a shorthand module will have the any type. */\r\n\t\t\t+ import x, { y } from \"hot-new-module\";\r\n\t\t\t+ x(y);\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# declarations.d.ts\r\n\t\t\t\t:declare\r\n\t\t\t\t\t:module \"hot-new-module\"\r\n\t\t\t\t#\r\n\t\t\t\t\t# All imports from a shorthand module will have the any type.\r\n\t\t\t\timport x\r\n\t\t\t\t\t@ y\r\n\t\t\t\t\tfrom \"hot-new-module\"\r\n\t\t\t\t_ x(y)\r\n\r\n\titem\r\n\t\ttitle Wildcard module declarations\r\n\t\texpected\r\n\t\t\t+ declare module \"*!text\" {\r\n\t\t\t\t+ const content: string;\r\n\t\t\t\t+ export default content;\r\n\t\t\t+ }\r\n\t\t\t+ // Some do it the other way around.\r\n\t\t\t+ declare module \"json!*\" {\r\n\t\t\t\t+ const value: any;\r\n\t\t\t\t+ export default value;\r\n\t\t\t+ }\r\n\t\t\t+ /* Now you can import things that match \"*!text\" or \"json!*\". */\r\n\t\t\t+ import fileContent from \"./xyz.txt!text\";\r\n\t\t\t+ import data from \"json!http://example.com/data.json\";\r\n\t\t\t+ console.log(data, fileContent);\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:declare\r\n\t\t\t\t\t:module \"*!text\"\r\n\t\t\t\t\t\tconst content\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\texport-default content\r\n\t\t\t\t\t:module \"json!*\"\r\n\t\t\t\t\t\tconst value\r\n\t\t\t\t\t\t\t:any \r\n\t\t\t\t\t\texport-default value\r\n\t\t\t\t#\r\n\t\t\t\t\t# Now you can import things that match \"*!text\" or \"json!*\".\r\n\t\t\t\timport fileContent from \"./xyz.txt!text\"\r\n\t\t\t\timport data from \"json!http://example.com/data.json\"\r\n\t\t\t\t_ console.log(data, fileContent)\r\n\r\n\titem\r\n\t\ttitle UMD modules\r\n\t\texpected\r\n\t\t\t+ /* math-lib.d.ts */\r\n\t\t\t+ export function isPrime(x: number): boolean;\r\n\t\t\t+ export as namespace mathLib;\r\n\t\t\t+ /* The library can then be used as an import within modules: */\r\n\t\t\t+ import { isPrime } from \"math-lib\";\r\n\t\t\t+ isPrime(2);\r\n\t\t\t+ mathLib.isPrime(2); // ERROR: can't use the global definition from inside a module\r\n\t\t\t+ /* It can also be used as a global variable, but only inside of a script. (A script is a file with no imports or exports.) */\r\n\t\t\t+ mathLib.isPrime(2);\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t#\r\n\t\t\t\t\t# math-lib.d.ts\r\n\t\t\t\texport \r\n\t\t\t\t\t:function isPrime\r\n\t\t\t\t\t\tparam x\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t:boolean \r\n\t\t\t\t:export-ns mathLib\r\n\t\t\t\t#\r\n\t\t\t\t\t# The library can then be used as an import within modules:\r\n\t\t\t\timport \r\n\t\t\t\t\t@ isPrime\r\n\t\t\t\t\tfrom \"math-lib\"\r\n\t\t\t\t_ isPrime(2)\r\n\t\t\t\t_ mathLib.isPrime(2)\r\n\t\t\t\t#\r\n\t\t\t\t\t# It can also be used as a global variable, but only inside of a script. (A script is a file with no imports or exports.)\r\n\t\t\t\t_ mathLib.isPrime(2)\r\n\r\n\titem\r\n\t\ttitle Export as close to top-level as possible\r\n\t\texpected\r\n\t\t\t+ MyClass.ts */\r\n\t\t\t+ export default class SomeType {\r\n\t\t\t\t+ constructor() {}\r\n\t\t\t+ }\r\n\t\t\t+ /* MyFunc.ts */\r\n\t\t\t+ export default function getThing() { return \"thing\"; }\r\n\t\t\t+ /* Consumer.ts */\r\n\t\t\t+ import t from \"./MyClass\";\r\n\t\t\t+ import f from \"./MyFunc\";\r\n\t\t\t+ let x = new t();\r\n\t\t\t+ console.log(f());\r\n\t\t\t+ /* MyThings.ts */\r\n\t\t\t+ export class SomeType { /* ... */ }\r\n\t\t\t+ export function someFunc() { /* ... */ }\r\n\t\t\t+ /* Consumer.ts */\r\n\t\t\t+ import { SomeType, someFunc } from \"./MyThings\";\r\n\t\t\t+ let x = new SomeType();\r\n\t\t\t+ let y = someFunc();\r\n\t\t\t+ /* MyLargeModule.ts */\r\n\t\t\t+ export class Dog { }\r\n\t\t\t+ export class Cat { }\r\n\t\t\t+ export class Tree { }\r\n\t\t\t+ export class Flower { }\r\n\t\t\t+ /* Consumer.ts */\r\n\t\t\t+ import * as myLargeModule from \"./MyLargeModule.ts\";\r\n\t\t\t+ let x = new myLargeModule.Dog();\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\texport-default \r\n\t\t\t\t\tclass SomeType\r\n\t\t\t\t\t\tctor \r\n\t\t\t\t#\r\n\t\t\t\t\t# MyFunc.ts\r\n\t\t\t\texport-default \r\n\t\t\t\t\tfunction getThing\r\n\t\t\t\t\t\treturn \"thing\"\r\n\t\t\t\t#\r\n\t\t\t\t\t# Consumer.ts\r\n\t\t\t\timport t from \"./MyClass\"\r\n\t\t\t\timport f from \"./MyFunc\"\r\n\t\t\t\tlet x = new t()\r\n\t\t\t\t_ console.log(f())\r\n\t\t\t\t#\r\n\t\t\t\t\t# This is optimal for consumers.\r\n\t\t\t\t\t# They can name your type whatever they want (t in this case) and don’t have to do any excessive dotting to find your objects.\r\n\t\t\t\t\t# If you’re exporting multiple objects, put them all at top- level\r\n\t\t\t\t\t# MyThings.ts\r\n\t\t\t\texport \r\n\t\t\t\t\tclass SomeType\r\n\t\t\t\texport \r\n\t\t\t\t\tfunction someFunc\r\n\t\t\t\t#\r\n\t\t\t\t\t# Conversely when importing:\r\n\t\t\t\t\t# Explicitly list imported names\r\n\t\t\t\t\t# Consumer.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ SomeType\r\n\t\t\t\t\t@ someFunc\r\n\t\t\t\t\tfrom \"./MyThings\"\r\n\t\t\t\tlet x = new SomeType()\r\n\t\t\t\tlet y = someFunc()\r\n\t\t\t\t#\r\n\t\t\t\t\t# Use the namespace import pattern if you’re importing a large number of things\r\n\t\t\t\t\t# MyLargeModule.ts\r\n\t\t\t\texport \r\n\t\t\t\t\tclass Dog\r\n\t\t\t\texport \r\n\t\t\t\t\tclass Cat\r\n\t\t\t\texport \r\n\t\t\t\t\tclass Tree\r\n\t\t\t\texport \r\n\t\t\t\t\tclass Flower\r\n\t\t\t\t#\r\n\t\t\t\t\t# Consumer.ts\r\n\t\t\t\timport \r\n\t\t\t\t\tas myLargeModule\r\n\t\t\t\t\tfrom \"./MyLargeModule.ts\"\r\n\t\t\t\tlet x = new myLargeModule.Dog()\r\n\r\n\r\n\titem\r\n\t\ttitle Re -export to extend\r\n\t\texpected\r\n\t\t\t+ export class Calculator {\r\n\t\t\t\t+ private current = 0;\r\n\t\t\t\t+ private memory = 0;\r\n\t\t\t\t+ private operator: string;\r\n\t\t\t\t+ protected processDigit(digit: string, currentValue: number) {\r\n\t\t\t\t\t+ if (digit >= \"0\" && digit <= \"9\") {\r\n\t\t\t\t\t\t+ return currentValue * 10 + (digit.charCodeAt(0) - \"0\".charCodeAt(0));\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t\t+ protected processOperator(operator: string) {\r\n\t\t\t\t\t+ if ([\"+\", \"-\", \"*\", \"/\"].indexOf(operator) >= 0) {\r\n\t\t\t\t\t\t+ return operator;\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t\t+ protected evaluateOperator(operator: string, left: number, right: number): number {\r\n\t\t\t\t\t+ switch (this.operator) {\r\n\t\t\t\t\t\t+ case \"+\": return left + right;\r\n\t\t\t\t\t\t+ case \"-\": return left - right;\r\n\t\t\t\t\t\t+ case \"*\": return left * right;\r\n\t\t\t\t\t\t+ case \"/\": return left / right;\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t\t+ private evaluate() {\r\n\t\t\t\t\t+ if (this.operator) {\r\n\t\t\t\t\t\t+ this.memory = this.evaluateOperator(this.operator, this.memory, this.current);\r\n\t\t\t\t\t+ } else {\r\n\t\t\t\t\t\t+ this.memory = this.current;\r\n\t\t\t\t\t+ }\r\n\t\t\t\t\t+ this.current = 0;\r\n\t\t\t\t+ }\r\n\t\t\t\t+ public handleChar(char: string) {\r\n\t\t\t\t\t+ if (char === \"=\") {\r\n\t\t\t\t\t\t+ this.evaluate();\r\n\t\t\t\t\t\t+ return;\r\n\t\t\t\t\t+ } else {\r\n\t\t\t\t\t\t+ let value = this.processDigit(char, this.current);\r\n\t\t\t\t\t\t+ if (value !== undefined) {\r\n\t\t\t\t\t\t\t+ this.current = value;\r\n\t\t\t\t\t\t\t+ return;\r\n\t\t\t\t\t\t+ } else {\r\n\t\t\t\t\t\t\t+ let value = this.processOperator(char);\r\n\t\t\t\t\t\t\t\t+ if (value !== undefined) {\r\n\t\t\t\t\t\t\t\t\t+ this.evaluate();\r\n\t\t\t\t\t\t\t\t\t+ this.operator = value;\r\n\t\t\t\t\t\t\t\t\t+ return;\r\n\t\t\t\t\t\t\t\t+ }\r\n\t\t\t\t\t\t\t+ }\r\n\t\t\t\t\t\t+ }\r\n\t\t\t\t\t\t+ throw new Error(`Unsupported input: '${char}'`);\r\n\t\t\t\t\t+ }\r\n\t\t\t\t\t+ public getResult() {\r\n\t\t\t\t\t\t+ return this.memory;\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t\t+ export function test(c: Calculator, input: string) {\r\n\t\t\t\t\t+ for (let i = 0; i < input.length; i++) {\r\n\t\t\t\t\t\t+ c.handleChar(input[i]);\r\n\t\t\t\t\t+ }\r\n\t\t\t\t\t+ console.log(`result of '${input}' is '${c.getResult()}'`);\r\n\t\t\t\t+ }\r\n\t\t\t\t+ /* Here is a simple test for the calculator using the exposed test function. */\r\n\t\t\t\t+ /* TestCalculator.ts */\r\n\t\t\t\t+ import { Calculator, test } from \"./Calculator\";\r\n\t\t\t\t+ let c = new Calculator();\r\n\t\t\t\t+ test(c, \"1+2*33/11=\"); // prints 9\r\n\t\t\t\t+ /* Now to extend this to add support for input with numbers in bases other than 10, let’s create ProgrammerCalculator.ts\r\n\t\t\t\t+ /* ProgrammerCalculator.ts */\r\n\t\t\t\t+ import { Calculator } from \"./Calculator\";\r\n\t\t\t\t+ class ProgrammerCalculator extends Calculator {\r\n\t\t\t\t\t+ static digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\r\n\t\t\t\t\t+ constructor(public base: number) {\r\n\t\t\t\t\t\t+ super();\r\n\t\t\t\t\t\t+ const maxBase = ProgrammerCalculator.digits.length;\r\n\t\t\t\t\t\t+ if (base <= 0 || base > maxBase) {\r\n\t\t\t\t\t\t\t+ throw new Error(`base has to be within 0 to ${maxBase} inclusive.`);\r\n\t\t\t\t\t\t+ }\r\n\t\t\t\t\t+ }\r\n\t\t\t\t\t+ protected processDigit(digit: string, currentValue: number) {\r\n\t\t\t\t\t\t+ if (ProgrammerCalculator.digits.indexOf(digit) >= 0) {\r\n\t\t\t\t\t\t\t+ return currentValue * this.base + ProgrammerCalculator.digits.indexOf(digit);\r\n\t\t\t\t\t\t+ }\r\n\t\t\t\t\t+ }\r\n\t\t\t\t+ }\r\n\t\t\t\t+ // Export the new extended calculator as Calculator\r\n\t\t\t\t+ export { ProgrammerCalculator as Calculator };\r\n\t\t\t\t+ // Also, export the helper function\r\n\t\t\t\t+ export { test } from \"./Calculator\";\r\n\t\t\t\t+ /* TestProgrammerCalculator.ts */\r\n\t\t\t\t+ import { Calculator, test } from \"./ProgrammerCalculator\";\r\n\t\t\t\t+ let c = new Calculator(2);\r\n\t\t\t\t+ test(c, \"001+010=\"); // prints 3\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\texport \r\n\t\t\t\t\tclass Calculator\r\n\t\t\t\t\t\tp current\r\n\t\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t\t:= 0\r\n\t\t\t\t\t\tp memory\r\n\t\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t\t:= 0\r\n\t\t\t\t\t\tp operator\r\n\t\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tm processDigit\r\n\t\t\t\t\t\t\t:protected \r\n\t\t\t\t\t\t\tparam digit\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\tparam currentValue\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\tif digit >= \"0\" && digit <= \"9\"\r\n\t\t\t\t\t\t\t\treturn currentValue * 10 + (digit.charCodeAt(0) - \"0\".charCodeAt(0))\r\n\t\t\t\t\t\tm processOperator\r\n\t\t\t\t\t\t\t:protected \r\n\t\t\t\t\t\t\tparam operator\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\tif \r\n\t\t\t\t\t\t\t\ttest\r\n\t\t\t\t\t\t\t\t\t>= \r\n\t\t\t\t\t\t\t\t\t\t[ \r\n\t\t\t\t\t\t\t\t\t\t\t@ \"+\"\r\n\t\t\t\t\t\t\t\t\t\t\t@ \"-\"\r\n\t\t\t\t\t\t\t\t\t\t\t@ \"*\"\r\n\t\t\t\t\t\t\t\t\t\t\t@ \"/\"\r\n\t\t\t\t\t\t\t\t\t\t\t._ indexOf\r\n\t\t\t\t\t\t\t\t\t\t\t\t@ operator\r\n\t\t\t\t\t\t\t\t\t\t+ 0\r\n\t\t\t\t\t\t\t\treturn operator\r\n\t\t\t\t\t\tm evaluateOperator\r\n\t\t\t\t\t\t\t:protected \r\n\t\t\t\t\t\t\tparam operator\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\tparam left\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\tparam right\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\t:return\r\n\t\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t\tswitch this.operator\r\n\t\t\t\t\t\t\t\tcase \"+\"\r\n\t\t\t\t\t\t\t\t\treturn left + right\r\n\t\t\t\t\t\t\t\tcase \"-\"\r\n\t\t\t\t\t\t\t\t\treturn left - right\r\n\t\t\t\t\t\t\t\tcase \"*\"\r\n\t\t\t\t\t\t\t\t\treturn left * right\r\n\t\t\t\t\t\t\t\tcase \"/\"\r\n\t\t\t\t\t\t\t\t\treturn left / right\r\n\t\t\t\t\t\tm evaluate\r\n\t\t\t\t\t\t\t:private \r\n\t\t\t\t\t\t\tif this.operator\r\n\t\t\t\t\t\t\t\tset this.memory = this.evaluateOperator(this.operator, this.memory, this.current)\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tset this.memory = this.current\r\n\t\t\t\t\t\t\tset this.current = 0\r\n\t\t\t\t\t\tm handleChar\r\n\t\t\t\t\t\t\t:public \r\n\t\t\t\t\t\t\tparam char\r\n\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t\tif char === \"=\"\r\n\t\t\t\t\t\t\t\t_ this.evaluate\r\n\t\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tlet value = this.processDigit(char, this.current)\r\n\t\t\t\t\t\t\t\tif value !== undefined\r\n\t\t\t\t\t\t\t\t\tset this.current = value\r\n\t\t\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tlet value = this.processOperator(char)\r\n\t\t\t\t\t\t\t\t\tif value !== undefined\r\n\t\t\t\t\t\t\t\t\t\t_ this.evaluate\r\n\t\t\t\t\t\t\t\t\t\tset this.operator = value\r\n\t\t\t\t\t\t\t\t\t\treturn \r\n\t\t\t\t\t\t\tthrow \r\n\t\t\t\t\t\t\t\tnew Error\r\n\t\t\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t\t\t+ Unsupported input: '\r\n\t\t\t\t\t\t\t\t\t\t@ char\r\n\t\t\t\t\t\t\t\t\t\t+ '\r\n\t\t\t\t\t\tm getResult\r\n\t\t\t\t\t\t\t:public \r\n\t\t\t\t\t\t\treturn this.memory\r\n\t\t\t\texport \r\n\t\t\t\t\tfunction test\r\n\t\t\t\t\t\tparam c\r\n\t\t\t\t\t\t\t:ref Calculator\r\n\t\t\t\t\t\tparam input\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tfor let i = 0; i < input.length; i++\r\n\t\t\t\t\t\t\t_ c.handleChar(input[i])\r\n\t\t\t\t\t\t_ console.log\r\n\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t+ result of '\r\n\t\t\t\t\t\t\t\t@ input\r\n\t\t\t\t\t\t\t\t+ ' is '\r\n\t\t\t\t\t\t\t\t_ c.getResult\r\n\t\t\t\t\t\t\t\t+ '\r\n\t\t\t\t#\r\n\t\t\t\t\t# Here is a simple test for the calculator using the exposed test function.\r\n\t\t\t\t#\r\n\t\t\t\t\t# TestCalculator.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ Calculator\r\n\t\t\t\t\t@ test\r\n\t\t\t\t\tfrom \"./Calculator\"\r\n\t\t\t\tlet c = new Calculator()\r\n\t\t\t\t_ test(c, \"1+2*33/11=\")\r\n\t\t\t\t#\r\n\t\t\t\t\t# Now to extend this to add support for input with numbers in bases other than 10, let’s create ProgrammerCalculator.ts\r\n\t\t\t\t\t# ProgrammerCalculator.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ Calculator\r\n\t\t\t\t\tfrom \"./Calculator\"\r\n\t\t\t\tclass ProgrammerCalculator\r\n\t\t\t\t\tsuper Calculator\r\n\t\t\t\t\tp digits\r\n\t\t\t\t\t\tstatic\r\n\t\t\t\t\t\t[ \r\n\t\t\t\t\t\t\t@ \"0\"\r\n\t\t\t\t\t\t\t@ \"1\"\r\n\t\t\t\t\t\t\t@ \"2\"\r\n\t\t\t\t\t\t\t@ \"3\"\r\n\t\t\t\t\t\t\t@ \"4\"\r\n\t\t\t\t\t\t\t@ \"5\"\r\n\t\t\t\t\t\t\t@ \"6\"\r\n\t\t\t\t\t\t\t@ \"7\"\r\n\t\t\t\t\t\t\t@ \"8\"\r\n\t\t\t\t\t\t\t@ \"9\"\r\n\t\t\t\t\t\t\t@ \"A\"\r\n\t\t\t\t\t\t\t@ \"B\"\r\n\t\t\t\t\t\t\t@ \"C\"\r\n\t\t\t\t\t\t\t@ \"D\"\r\n\t\t\t\t\t\t\t@ \"E\"\r\n\t\t\t\t\t\t\t@ \"F\"\r\n\t\t\t\t\tctor \r\n\t\t\t\t\t\tparam base\r\n\t\t\t\t\t\t\t:public \r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\t_ super\r\n\t\t\t\t\t\tconst maxBase = ProgrammerCalculator.digits.length\r\n\t\t\t\t\t\tif base <= 0 || base > maxBase\r\n\t\t\t\t\t\t\tthrow \r\n\t\t\t\t\t\t\t\tnew Error\r\n\t\t\t\t\t\t\t\t\t`lit \r\n\t\t\t\t\t\t\t\t\t\t+ base has to be within 0 to\\b\r\n\t\t\t\t\t\t\t\t\t\t@ maxBase\r\n\t\t\t\t\t\t\t\t\t\t+ \\binclusive.\r\n\t\t\t\t\tm processDigit\r\n\t\t\t\t\t\t:protected \r\n\t\t\t\t\t\tparam digit\r\n\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\tparam currentValue\r\n\t\t\t\t\t\t\t:number \r\n\t\t\t\t\t\tif ProgrammerCalculator.digits.indexOf(digit) >= 0\r\n\t\t\t\t\t\t\treturn currentValue * this.base + ProgrammerCalculator.digits.indexOf(digit)\r\n\t\t\t\texport \r\n\t\t\t\t\t@ ProgrammerCalculator\r\n\t\t\t\t\t\tas Calculator\r\n\t\t\t\texport \r\n\t\t\t\t\t@ test\r\n\t\t\t\t\tfrom \"./Calculator\"\r\n\t\t\t\t#\r\n\t\t\t\t\t# The new module ProgrammerCalculator exports an API shape similar to that of the original Calculator module,\r\n\t\t\t\t\t# but does not augment any objects in the original module. Here is a test for our ProgrammerCalculator class:\r\n\t\t\t\t\t# TestProgrammerCalculator.ts\r\n\t\t\t\timport \r\n\t\t\t\t\t@ Calculator\r\n\t\t\t\t\t@ test\r\n\t\t\t\t\tfrom \"./ProgrammerCalculator\"\r\n\t\t\t\tlet c = new Calculator(2)\r\n\t\t\t\t_ test(c, \"001+010=\")"
      },
      "t/var.ittf.ittf": {
        "type": "CODE",
        "contents": "element variables\r\n\ttag \r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Boolean\r\n\t\texpected\r\n\t\t\t+ let isDone: boolean = false;\r\n\t\tittf\r\n\t\t\tlet isDone\r\n\t\t\t\t:boolean \r\n\t\t\t\t:= false\r\n\titem\r\n\t\ttitle Number\r\n\t\texpected\r\n\t\t\t+ let decimal: number = 6;\r\n\t\tittf\r\n\t\t\tlet decimal\r\n\t\t\t\t:number \r\n\t\t\t\t:= 6\r\n\titem\r\n\t\ttitle String\r\n\t\texpected\r\n\t\t\t+ let color: string = \"blue\";\r\n\t\tittf\r\n\t\t\tlet color\r\n\t\t\t\t:string \r\n\t\t\t\t:= \"blue\"\r\n\titem\r\n\t\ttitle String literal 1\r\n\t\texpected\r\n\t\t\t+ let fullName: string = `Bob Bobbington`;\r\n\t\tittf\r\n\t\t\tlet fullName\r\n\t\t\t\t:string \r\n\t\t\t\t`lit \r\n\t\t\t\t\t+ Bob Bobbington\r\n\titem\r\n\t\ttitle String literal 2\r\n\t\texpected\r\n\t\t\t+ let sentence: string = `Hello, my name is ${fullName}`;\r\n\t\tittf\r\n\t\t\tlet sentence\r\n\t\t\t\t:string \r\n\t\t\t\t`lit \r\n\t\t\t\t\t+ Hello, my name is\\b\r\n\t\t\t\t\t@ fullName\r\n\t\t\t\t\t+ \r\n\titem\r\n\t\ttitle String literal 3\r\n\t\texpected\r\n\t\t\t+ let sentence: string = \"Hello, my name is \" + fullName + \".\\n\\n\" + \"I'll be \" + (age + 1) + \" years old next month.\";\r\n\t\tittf\r\n\t\t\tlet sentence\r\n\t\t\t\t:string \r\n\t\t\t\tset \"Hello, my name is \" + fullName + \".\\n\\n\" + \"I'll be \" + (age + 1) + \" years old next month.\"\r\n\t\r\n\titem\r\n\t\ttitle Array 1\r\n\t\texpected\r\n\t\t\t+ let list: number[] = [1, 2, 3];\r\n\t\tittf\r\n\t\t\tlet list\r\n\t\t\t\t:[ \r\n\t\t\t\t\t:number \r\n\t\t\t\t[ \r\n\t\t\t\t\t@ 1\r\n\t\t\t\t\t@ 2\r\n\t\t\t\t\t@ 3\r\n\t\r\n\titem\r\n\t\ttitle Array 2\r\n\t\texpected\r\n\t\t\t+ let list: Array&lt;number&gt; = [1, 2, 3];\r\n\t\tittf\r\n\t\t\tlet list\r\n\t\t\t\t:ref Array\r\n\t\t\t\t\t:param number\r\n\t\t\t\t[ \r\n\t\t\t\t\t@ 1\r\n\t\t\t\t\t@ 2\r\n\t\t\t\t\t@ 3\r\n\t\r\n\titem\r\n\t\ttitle Tuple\r\n\t\texpected\r\n\t\t\t+ let x: [string, number];\r\n\t\tittf\r\n\t\t\tlet x\r\n\t\t\t\t:tuple \r\n\t\t\t\t\t:string \r\n\t\t\t\t\t:number \r\n\r\n\titem\r\n\t\ttitle Enum\r\n\t\texpected\r\n\t\t\t+ enum Color { Red, Green, Blue }\r\n\t\t\t+ let c: Color = Color.Green;\r\n\t\t\t+ enum Color { Red = 1, Green, Blue }\r\n\t\t\t+ let c: Color = Color.Green;\r\n\t\t\t+ enum Color { Red = 1, Green = 2, Blue = 4 }\r\n\t\t\t+ let c: Color = Color.Green;\r\n\t\t\t+ enum Color { Red = 1, Green, Blue }\r\n\t\t\t+ let colorName: string = Color[2];\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:enum Color\r\n\t\t\t\t\t@ Red\r\n\t\t\t\t\t@ Green\r\n\t\t\t\t\t@ Blue\r\n\t\t\t\tlet c\r\n\t\t\t\t\t:ref Color\r\n\t\t\t\t\t:= Color.Green\r\n\t\t\t\t:enum Color\r\n\t\t\t\t\t@ Red 1\r\n\t\t\t\t\t@ Green\r\n\t\t\t\t\t@ Blue\r\n\t\t\t\tlet c\r\n\t\t\t\t\t:ref Color\r\n\t\t\t\t\t:= Color.Green\r\n\t\t\t\t:enum Color\r\n\t\t\t\t\t@ Red 1\r\n\t\t\t\t\t@ Green 2\r\n\t\t\t\t\t@ Blue 4\r\n\t\t\t\tlet c\r\n\t\t\t\t\t:ref Color\r\n\t\t\t\t\t:= Color.Green\r\n\t\t\t\t:enum Color\r\n\t\t\t\t\t@ Red 1\r\n\t\t\t\t\t@ Green\r\n\t\t\t\t\t@ Blue\r\n\t\t\t\tlet colorName\r\n\t\t\t\t\t:string \r\n\t\t\t\t\t:= Color[2]\r\n\r\n\titem\r\n\t\ttitle Any, Void, Null, Undefined\r\n\t\texpected\r\n\t\t\t+ let notSure: any = 4;\r\n\t\t\t+ notSure = \"maybe a string instead\";\r\n\t\t\t+ notSure = false; // okay, definitely a boolean\r\n\t\t\t+ let notSure: any = 4;\r\n\t\t\t+ notSure.ifItExists(); // okay, ifItExists might exist at runtime\r\n\t\t\t+ notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)\r\n\t\t\t+ let prettySure: Object = 4;\r\n\t\t\t+ prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.\r\n\t\t\t+ let list: any[] = [1, true, \"free\"];\r\n\t\t\t+ list[1] = 100;\r\n\t\t\t+ function warnUser(): void {\r\n\t\t\t\t+ console.log(\"This is my warning message\");\r\n\t\t\t+ }\r\n\t\t\t+ let unusable: void = undefined;\r\n\t\t\t+ let u: undefined = undefined;\r\n\t\t\t+ let n: null = null;\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tlet notSure\r\n\t\t\t\t\t:any \r\n\t\t\t\t\t:= 4\r\n\t\t\t\tset notSure = \"maybe a string instead\"\r\n\t\t\t\tset notSure = false\r\n\t\t\t\tlet notSure\r\n\t\t\t\t\t:any \r\n\t\t\t\t\t:= 4\r\n\t\t\t\t_ notSure.ifItExists\r\n\t\t\t\t_ notSure.toFixed\r\n\t\t\t\tlet prettySure\r\n\t\t\t\t\t:ref Object\r\n\t\t\t\t\t:= 4\r\n\t\t\t\t_ prettySure.toFixed\r\n\t\t\t\tlet list\r\n\t\t\t\t\t:[ \r\n\t\t\t\t\t\t:any \r\n\t\t\t\t\t[ \r\n\t\t\t\t\t\t@ 1\r\n\t\t\t\t\t\t@ true\r\n\t\t\t\t\t\t@ \"free\"\r\n\t\t\t\tset list[1] = 100\r\n\t\t\t\tfunction warnUser\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:void \r\n\t\t\t\t\t_ console.log(\"This is my warning message\")\r\n\t\t\t\tlet unusable\r\n\t\t\t\t\t:void \r\n\t\t\t\t\t:= undefined\r\n\t\t\t\tlet u\r\n\t\t\t\t\t:void \r\n\t\t\t\t\t:= undefined\r\n\t\t\t\tlet n\r\n\t\t\t\t\t:null \r\n\t\t\t\t\t:= null\r\n\t\r\n\titem\r\n\t\ttitle Never\r\n\t\texpected\r\n\t\t\t+ function error(message: string): never {\r\n\t\t\t\t+ throw new Error(message);\r\n\t\t\t+ }\r\n\t\t\t+ function fail() {\r\n\t\t\t\t+ return error(\"Something failed\");\r\n\t\t\t+ }\r\n\t\t\t+ function infiniteLoop(): never {\r\n\t\t\t\t+ while (true) {\r\n\t\t\t\t+ }\r\n\t\t\t+ }\r\n\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\tfunction error\r\n\t\t\t\t\tparam message\r\n\t\t\t\t\t\t:string \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:never \r\n\t\t\t\t\tthrow new Error(message)\r\n\t\t\t\tfunction fail\r\n\t\t\t\t\treturn error(\"Something failed\")\r\n\t\t\t\tfunction infiniteLoop\r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:never \r\n\t\t\t\t\twhile true\r\n    \r\n\titem\r\n\t\ttitle Object\r\n\t\texpected\r\n\t\t\t+ declare function create(o: object | null): void;\r\n\t\t\t+ let strLength: number = (someValue as string).length;\r\n\t\tittf\r\n\t\t\t+\r\n\t\t\t\t:function create\r\n\t\t\t\t\tparam o\r\n\t\t\t\t\t\t:union \r\n\t\t\t\t\t\t\t:object \r\n\t\t\t\t\t\t\t:null \r\n\t\t\t\t\t:return\r\n\t\t\t\t\t\t:void \r\n\t\t\t\tlet strLength\r\n\t\t\t\t\t:number \r\n\t\t\t\t\t:= \r\n\t\t\t\t\t\t( \r\n\t\t\t\t\t\t\t@id someValue\r\n\t\t\t\t\t\t\t\t:as \r\n\t\t\t\t\t\t\t\t\t:string \r\n\t\t\t\t\t\t. length\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/vtt.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema vtt\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element vtt\r\n\ttag vtt\r\n\tast \r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle Simple cue\r\n\t\tittf\r\n\t\t\tvtt\r\n\t\t\t\tcue 1 10\r\n\t\t\t\t\t+ And now\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/vue.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema vue\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element vue base\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle simple vue component\r\n\t\tittf\r\n            vue\r\n                template\r\n                    - schema html syntax\r\n                    . item\r\n                        # greetings\r\n                        + Hello\r\n                    \r\n                script\r\n                    # schema js syntax\r\n                    function hey\r\n                        param name\r\n                        _ document.querySelector('#greatings').innerHTML = 'Hello ' + name\r\n\r\n                    _ hey('Steave')\r\n                    \r\n                style\r\n                    - schema css syntax\r\n                    . item\r\n                        color red\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/xml.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema xml\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element xml base\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle\r\n\t\tittf\r\n\t\t\tperson\r\n\t\t\t\t@ name Judy\r\n\t\t\t\t@ age 45\r\n\t\t\t\tfriends\r\n\t\t\t\t\tfriend\r\n\t\t\t\t\t\t@ name Mary\r\n\t\t\t\t\tfriend\r\n\t\t\t\t\t\t@ name Edward\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/cheatsheets/models/yaml.model",
    "mainIttf": "index.ittf.ittf",
    "wizziSchema": "ittf",
    "packiFiles": {
      "index.ittf.ittf": {
        "type": "CODE",
        "contents": "meta\r\n\tschema yaml\r\n\t$include base"
      },
      "t/base.ittf.ittf": {
        "type": "CODE",
        "contents": "element yaml base\r\n\ttag\r\n\tast\r\n\tcategory\r\n\t\r\n\titem\r\n\t\ttitle\r\n\t\tittf\r\n            # this is a comment\r\n            : name 'stefi'\r\n            : age 62\r\n            : order\r\n                - first\r\n                - second\r\n            surname: bassoli\r\n            title: dott"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"ittf\"\n            path \"stfnbssl/ittf\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/concepts.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    \r\n    $\r\n        var art = {\r\n            title: 'Concepts'\r\n        };\r\n\r\n    html/_layouts/docs-layout(&art)\r\n\r\n        $include wizzifactory\r\n        $include vision\r\n        $include maincomponents\r\n        $include ittfdocument\r\n        $include wfschema\r\n        $include wizzimodel\r\n        $include modeltransformer\r\n        $include artifactgenerator\r\n        $include wizzijob\r\n        $include wizziplugin\r\n        $include wizzifier"
      },
      "t/artifactgenerator.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Artifact generators'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp An artifact generator transforms a context object, usually a Wizzi model, into a software artifact.\r\n\t\t\r\n\t\tp Software artifacts are text streams that may consist of imperative code targeting a programming language or \r\n\t\t\t\\b declarative data structures (JSON, XML, YAML, … et cetera).\r\n\r\n\t\tp An artifact generator is an API exported by a plugin and must respect the plugin interface.\r\n\t\t\t\\b Its implementation is free and usually the implementor is a javascript program that receives\r\n\t\t\t\\b in input a Wizzi Model and returns the text of the generated artifact.\r\n\r\n\t\tp An artifact generation can be declared in a Wizzi Job or executed invoking a method of the Wizzi Factory API.\t"
      },
      "t/ittfdocument.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'ITTF documents'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n        p ITTF documents are the source files of the Wizzi Factory. ITTF stands for Indented Text Tree Format, \r\n            \\b a human-friendly text format for representing \r\n            \\b a tree data structure of node names and values. \r\n\r\n        ittf-panel\r\n            title Sample ITTF document\r\n            schema html\r\n            ittf\r\n                html\r\n                    body\r\n                        ul\r\n                            li\r\n                                a The Wizzi Factory\r\n                                    href https://wizzifactory.github.io\r\n\r\n        p Every line is a node consisting of a name-value pair.\r\n            \\b The name is the first string of chars of the line and is separated\r\n            \\b from the value by a space or a tab.\r\n\r\n        p Child nodes are indented to their parent.                    \r\n\r\n        p An ITTF document can include or merge others ITTF documents.\r\n\r\n        ittf-panel\r\n            schema html\r\n            ittf\r\n                html\r\n                    body\r\n                        $raw header(&page)\r\n                        $raw content(&page)\r\n                        ${'$'}include footer\r\n\r\n        p The root node can be a mixer or includer.\r\n\r\n        ittf-panel\r\n            title Root node that mixes its container.\r\n            schema html\r\n            ittf\r\n                $raw layout( Welcome to my site )\r\n                    ${'$'}append appbar\r\n                        ul\r\n                            ${'$'}foreach item in menulist\r\n                                li \r\n                                    a ${'$'}{item.name}\r\n                                        href ${'$'}{item.path}\r\n                    . wrapper\r\n                        . content\r\n\r\n\r\n        p An ITTF document is a template and can be merged and interpolated with context data.\r\n        ittf-panel\r\n            schema html\r\n            ittf\r\n                ul\r\n                    ${'$'}foreach item in site.TopMenu.items\r\n                        li\r\n                            a ${'$'}{item.label}\r\n                                href ${'$'}{item.url}\r\n\r\n        p Scripts can be used to manipulate nodes.\r\n        ittf-panel\r\n            schema html\r\n            ittf\r\n                div\r\n                    ${'$'} var i = 0\r\n                    ${'$'}while i < 5\r\n                        p Hello number ${'$'}{i}\r\n                        ${'$'} i++\r\n\r\n        p &nbsp;\r\n        \r\n        ittf-panel\r\n            title Sample container ITTF document\r\n            schema html\r\n            ittf\r\n                html\r\n                    ${'$'}params title\r\n                    head\r\n                        title ${'$'}{title}\r\n                    body\r\n                        header\r\n                            h1 ${'$'}{title}\r\n                            ${'$'}hook appbar\r\n                        section\r\n                            ${'$'}hook\r\n\r\n        p &nbsp;\r\n        ul ITTF documents are of three kinds\r\n            li Primary: the document is the entry item of an ITTF processing.\r\n            li Mix: the document can receive parameters and my have hook nodes where to append child nodes of the merger document.\r\n            li Include: the document is inserted as is and cannot receive parameters.\r\n\r\n        ittf-panel\r\n            title A sample 'mix' ITTF document.\r\n            schema html\r\n            ittf\r\n                li\r\n                    ${'$'}params text, href\r\n                    a ${'$'}{text}\r\n                        href ${'$'}{href}\r\n\r\n        ittf-panel\r\n            title A sample 'include' ITTF Document.\r\n            schema html\r\n            ittf\r\n                div License MIT\r\n                    span copy Stefano Bassoli.\r\n\r\n        h4 JsWizzi\r\n        p The template engine of the wizzi factory uses a customized\r\n            \\b subset of the ECMA-262 javascript standard, sandboxed, and tailored\r\n            \\b for ITTF processing.\r\n            \\b JsWizzi is built on the <a href=\"http://esprima.org/\">esprima</a> parser\r\n            \\b and is run by a custom javascript engine (JsWizziRunner).\r\n\r\n        h4 mTrees\r\n        p A document may have semantic and template nodes. Semantic nodes, that can contain interpolation variables,\r\n            \\b are the document data. Template nodes drive the document composition and its merging with context data\r\n            \\b and disappear in the final tree structure.\r\n            \\b The ITTF Processor is agnostic about the content of semantic nodes. It processes template nodes and interpolates semantic node names and values.\r\n            \\b The result of an ITTF process is a tree data structure of semantic nodes that must have a single root node.\r\n        p The tree data structure resulting from an ITTF processing is a javascript object \r\n            \\b named `mTree`.\r\n\r\n        h4 Document types\r\n        p Documents become usefull when they target a specific domain.\r\n            \\b Domain specific schemas can be applied to the result of an ITTF processing, see <a href=\"#concept-4\">Wizzi Schemas</a>.\r\n            \\b The name of the Wizzi Schema that is applyed to an ITTF Document is said to be the type of the document.\r\n            \\b An ITTF document of type `js` is a document designed to be validated by the `js` Wizzi Schema.\r\n        p Each development team may create its own document types or use those already availables, see <a href=\"#concept-9\">Wizzi Plugins</a>.\r\n\r\n        h4 Document file name and extension\r\n        p An ITTF document must have extension '.ittf' and the extension must be preceded by '.' the name of\r\n            \\b the Wizzi Schema that describes the document or by '.ittf' again if the document is not typed.\r\n\r\n"
      },
      "t/languageschema.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\th4 Language Wizzi schemas\r\n\r\n\tp The most part of artifact generators \r\n\t\t\\b targets imperative programming languages (PLs).\r\n\t\t\\b The Wizzi Factory apply the power of ITTF Processing to PLs also.\r\n\r\n\tp A language Wizzi Schema describes a tree data structure\r\n\t\t\\b that an artifact generator can transform\r\n\t\t\\b targeting the syntax of a PL grammar.\r\n\t\t\r\n\tp It can be viewd as a profile of a PL grammar that is implemented partially,\r\n\t\t\\b with some of its symbols stereotyped.\r\n\r\n\tp The schema developer should try to find the optimal balance\r\n\t\t\\b between convenience and completeness and\r\n\t\t\\b define the proper approximation of the schema in respect to the PL grammar.\r\n\t\t\\b The purpose of a language schema is not to map a PL grammar but to make pieces of code\r\n\t\t\\b templeatable and computable when convenient.\r\n\r\n\tp The Wizzi Factory is entirely coded using the `js` Wizzi Schema implemented\r\n\t\t\\b by the `wizzi-js` plugin.\r\n\r\n    ittf-panel\r\n        title Sample `js` ITTF Document\r\n        schema js\r\n        ittf\r\n            module\r\n                kind jsfile\r\n                class Horse\r\n                    super Animal\r\n                    ctor\r\n                        param name\r\n                        base name\r\n                    m say\r\n                        log 'Hiiii i am ' + this.name\r\n            \r\n                    m create\r\n                        static\r\n                        param name\r\n                        return\r\n                            new Horse\r\n                                @ name"
      },
      "t/maincomponents.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Main components'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tul\r\n\t\t\tli ITTF documents\r\n\t\t\tli Wizzi schemas and Wizzi model types\r\n\t\t\tli Wizzi models\r\n\t\t\tli Model transformers\r\n\t\t\tli Artifact generators\r\n\t\t\tli Plugins\r\n\t\t\tli Wizzi jobs\r\n"
      },
      "t/modeltransformer.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Model transformers'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Sometimes models require manipulations for special purposes. \r\n\t\t\t\\b Model transformers can be applied to Wizzi Models every time a Wizzi Model is used as a context object.\r\n\r\n\t\tp A model trasformer is an API exported by a plugin and must respect the plugin interface.\r\n\t\t\t\\b Its internal implementation is free. Usually the implementor is a javascript program that receives\r\n\t\t\t\\b in input a Wizzi Model and returns a transformed model or a POJO object.\r\n\r\n\t\tp A model transformation can be declared in a Wizzi Job or executed invoking a method of the Wizzi Factory API."
      },
      "t/vision.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Vision'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Nowadays computing has advanced tremendously thank to many new open and interoperable tools and programming languages. \r\n\t\t\r\n\t\tp Computing handles data structures and is itself described by data. \r\n\t\t\t\\b A program source is a human friendly representation of an Abstract Syntax Tree (AST), a data structure that \r\n\t\t\t\\b represents its computations. \r\n\t\t\t\\b Programming is a combination of data produced by programmers and tools.\r\n\r\n\t\tp The Wizzi Factory is a new tool for describing and composing data structures.\r\n\t\t\t\\b It is aimed at those tasks, in the development process, where programming can be driven by data.\r\n\r\n\t\tp In the Wizzi Factory human friendly representations of data drive model transformations and code generations.\r\n\t\t\t\\b The Wizzi Factory uses a minimal and universal text format and a template processor for composing tree data structures. \r\n\t\t\t\r\n\t\tp After composition, domain specific schematas can be applied to data nodes, creating dynamic models that become context objects\r\n\t\t\t\\b for code generations or cascading new data compositions.\r\n\r\n"
      },
      "t/wfschema.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi schemas and Wizzi model types'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp A Wizzi schema is a data definition of the nodes of a tree data structure inspired by XML Schemas.\r\n            \\b It declares element types, attributes and their relations.\r\n\t\t\r\n\t\tp It can declare element methods to perform manipulations or extractions.\r\n\t\t\r\n\t\tp A Wizzi Schema is used to generate the javascript code of a Wizzi model DOM, an \r\n\t\t\t\\b object model that can load, validate, manipulate and retrieve the data of a processed ITTF Document.\r\n\t\t\r\n\t\tp A Wizzi Model DOM can contain autogenerated and user defined methods. Autogenerated methods perform validations and initializations. \r\n\t\t\t\\b User methods can traverse, filter and manipulate the model data.\r\n\t\t\r\n\t\tp Each Wizzi schema generates its own Wizzi Model DOM.\r\n\r\n\t\tp A Wizzi Schema is itself described by an ITTF Document of type `wfschema`,\r\n\t\t\t\\b implemented in the `wizzi-core` plugin.\r\n\r\n        ittf-panel\r\n            title Sample Wizzi schema\r\n            schema wfschema\r\n            ittf\r\n                wfschema rdbms\r\n                    require inflect\r\n                    e catalog\r\n                        r table/s\r\n                    e table\r\n                        r column/s\r\n                        r index/es\r\n                        m getPluralName\r\n                            return inflect.pluralize(this.wzName)\r\n                    e column\r\n                        a type\r\n                        a caption\r\n                        a defaultValue\r\n                            tag default\r\n                    e index\r\n                        a primary\r\n                            type boolean\r\n                        a unique\r\n                            type boolean\r\n                        r column/s\r\n\r\n\t\t$include languageschema\r\n\r\n\r\n\r\n"
      },
      "t/wizzifactory.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Concepts'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n        p The Wizzi Factory is a general purpose and language agnostic artifact generator.\r\n        \r\n        p It is model driven and regard software as a data structure that is generated processing data structures.\r\n            \\b Its inputs and outputs are printable and human readable streams of characters.\r\n            \r\n        p It is an open tool for the development environment, with no runtime."
      },
      "t/wizzifier.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzifiers'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Ittf documents represent code as a tree data structure to make source code templeatable\r\n\t\t\t+ and computable when convenient. They are normally edited by programmers but sometimes\r\n\t\t\t+ would be usefull the translation of existing code into an ITTF document type and then\r\n\t\t\t+ add template nodes and scripts.\r\n\r\n\t\tp Some Wizzi schemas of the default Wizzi Factory plugins have a related wizzifier tool that translates\r\n\t\t\t+ PL code into an ITTF Document of its type.\r\n\r\n\t\tp\r\n\t\t\ta See the Wizzifiers documentation\r\n\t\t\t\thref ./wizzifiers.html\r\n\t\t\t+ \\b for more details."
      },
      "t/wizzijob.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi jobs'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The execution of a Wizzi job is the main operation of the Wizzi Factory.\r\n\t\t\r\n\t\tp A Wizzi Job is an ITTF document that declares how to load context models, execute model transformations, generate artifacts \r\n\t\t\t\\b and persist them in their destination paths. \r\n\t\t\t\r\n\t\tp A core Wizzi schema of the Wizzi Factory (wfJob) describes the types of a Wizzi Job declaration. \r\n\r\n        ittf-panel\r\n            title Sample Wizzi job\r\n            schema wfjob\r\n            ittf\r\n                wfjob wizzi-docs-concepts\r\n                    ${'$'}\r\n                        var models_folder     = path.join(__dirname, 'models');\r\n                        var html_folder       = path.join(__dirname, 'html');\r\n                        var dest_folder       = \"c:/my/wizzi/v5/github/wizzifactory.github.io\";\r\n                    models-base-folder ${'$'}{models_folder}\r\n                    model concepts\r\n                        src concepts.docs.ittf\r\n                        schema docs\r\n\r\n                    line html\r\n                        cwd-folder ${'$'}{html_folder}\r\n                        $raw wfjob/artifact-html( concepts.html.ittf )\r\n                            model-ref concepts\r\n                                transformer docs/preprint\r\n                    production\r\n                        dest-folder ${'$'}{dest_folder}\r\n                        line-ref html"
      },
      "t/wizzimodel.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi models'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp A Wizzi Model is an instance of a Wizzi Model DOM that has been loaded with the tree data structure\r\n\t\t\t\\b resulting from a processed ITTF Document. \r\n\r\n\t\tp Wizzi models act as context objects during ITTF document processing, model transformations and artifact generations.\r\n\r\n\t\tp Wizzi models are described in terms of elements, attributes, methods\r\n\t\t\t\\b and relations. An element is a classifier and\r\n\t\t\t\\b a relation is a relationship between elements.\r\n\r\n\t\tul In a Wizzi Model:\r\n\t\t\tli An element may have one super element (abstraction) and many derived elements (specializations),\r\n\t\t\t\t\\b may be abstract or concrete and may have a name, attributes and methods. \r\n\t\t\tli Relationships are one-to-many (default) and one-to-one. They\r\n\t\t\t\t\\b do not have attributes. Both imply ownership of contained (child) elements:\r\n\t\t\t\t\\b arrays (one-to-many) and single child (one-to-one).\r\n\t\t\tli An attribute has a name and a value of a primitive type.\r\n\r\n\t\tul The tree structure of a Wizzi Model is mapped to a javascript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript\"> class</a>, where:\r\n\t\t\tli Elements are classes.\r\n\t\t\tli Attributes are properties of element classes.\r\n            li Methods are properties of element classes. \r\n\t\t\tli One-to-many relationships are arrays of element classes on the related element class.\r\n\t\t\tli One-to-one relationships are element classes on the related element class.\r\n\t\t\tli Attributes and relationships are inherited from super elements."
      },
      "t/wizziplugin.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi plugins'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The Wizzi Factory is made of a few kernel modules and an ecosystem of plugins.\r\n\t\t\r\n\t\tp A plugin implements one or more Wizzi schemas and their generation components:\r\n\t\tul \r\n\t\t\tli Wizzi models and their factories;\r\n\t\t\tli Model transformers;\r\n\t\t\tli Artifact generators.\r\n\r\n\t\tp It must have a standard folder structure and must export the \\b\r\n\t\t\ta createFactoryPlugin\r\n\t\t\t\thref api.html#wizzi-plugin.createFactoryPlugin\r\n\t\t\tspan \r\n\t\t\t\t\\b method in its entry point.\r\n\t\tp\r\n\t\t\ta Plugins documentation\r\n\t\t\t\thref ./plugins.html"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/ittfdocuments.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'Ittf documents'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n\r\n        $include ./introduction\r\n        $include ./ittf-notation\r\n        $include ./xml-comparision\r\n        $include ./ittf-composition\r\n        $include ./ittf-templates"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf documents'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n        p Ittf, Indented Text Tree Format, is a document type for\r\n            \\b declaring a textual representation of\r\n            \\b a tree structure of name-valued nodes.\r\n\r\n        p Ittf documents are building blocks, made to be loaded and composed into a \r\n            \\b javascript tree structure, named mTree.\r\n\r\n        p A single ittf document, when loaded, becomes an mTreeBrick, a composition element\r\n            \\b that can include or mix other mTreeBricks and can in turn be included or mixed. \r\n\r\n        p Ittf documents also can be templates or pieces of templates. They can contain \r\n            \\b conditional or repeat template node commands and can use context objects,\r\n            \\b passed to the mTree load function, for creating new nodes of the composed mTree.\r\n\r\n        p Further ittf documents may be seen as code units. They can codify statements and expressions using \r\n            \\b a sandboxed subset of the ECMA-262 javascript standard named 'jsWizzi'. Statements can create,\r\n            \\b and modify, variables (in the evaluation context of an mTreeBrick or in the global\r\n            \\b evaluation context) that template node commands can use to select or create nodes.\r\n\r\n\r\n"
      },
      "t/ittf-codeunits.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf documents as code units'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Primary and fragment ittf documents have their own local (document scoped) evaluation context.\r\n\t\t\t+ An mTree loading also has a global evaluation context that may contain\r\n\t\t\tul\r\n\t\t\t\tli built-in javascript components that jswizzi can safely access\r\n\t\t\t\tli context objects passed to the wizzi-mtree.loader.loadMTree function\r\n\t\t\t\tli variables declared in ittf documents using the command `$global `\r\n\r\n\t\tp Template node commands and expressions contained in node names and node values can\r\n\t\t\t+ access the global context and their local context.\r\n\r\n\t\tp Two ittf commands can declare statements that modify or create variables\r\n\t\t\t+ in both the evaluation contexts.\r\n\r\n\t\th3 The '$' node command\r\n\t\tp Can be used to declare single line or multi-line jswizzi-statements, that\r\n\t\t\t+ during the evaluation step, are executed in the scope  of the fragment\r\n\t\t\t+ to which the node command belongs.\r\n\t\tp They may declare and modify variables that have local fragment scope, and\r\n\t\t\t+ modify variables that have global scope.\r\n\t\th4 Single line format\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $ jswizzi-statement\r\n\t\th4 Example\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $ var names = ['stefi', 'annie'];\r\n\t\t\t\r\n\t\th4 Multi-line format\r\n\t\tittf\r\n\t\t\t- $\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- ...\r\n\t\t\r\n\t\th4 Example\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $\r\n\t\t\t\t\t- var names = ['stefi', 'annie'];\r\n\t\t\t\t\t- var j = 0;\r\n\r\n\t\t\t\r\n\t\th3 The $global code node command\r\n\t\tp Can be used to declare single line or multi-line jswizzi-statements, that\r\n\t\t\t+ are executed in the global scope.\r\n\t\tp They may modify variables that have local scope, and\r\n\t\t\t+ create and modify variables that have global scope.\r\n\r\n\t\th4 Single line format\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $global jswizzi-statement\r\n\t\t\r\n\t\th4 Multi-line format\r\n\t\tittf\r\n\t\t\t- $global\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- ...\r\n\r\n\r\n"
      },
      "t/ittf-commandnodes.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf node commands'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\th3 $include\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $include fragment-path\r\n\t\tp The node value (fragment-path) is the relative path to the ittf \r\n\t\t\t+ fragment that must be included. The folder uri of the \r\n\t\t\t+ includer document is the base path for the path resolution\r\n\t\t\t+ of composed documents.\r\n\t\tp The included fragment will be included as is, replacing\r\n\t\t\t+ the $include node command, and its nodes will become part of the\r\n\t\t\t+ jsWizzi scope of the includer.\r\n\t\tp An $include node command cannot have children nodes. The included\r\n\t\t\t+ fragment cannot have the $params node (cannot have composition parameters).\r\n\r\n\r\n\r\n\t\th3 Mix\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- fragment-path( arg-1 [, arg-2 ... [, arg-n]] )\r\n\t\t\t\t\t- [ optional child ittf node ]\r\n\t\tp A mix command is recognized by the ittf parser when a node name \r\n\t\t\t+ ends with an open parenthesis. The chars before the open parenthesis\r\n\t\t\t+ are the relative path to the mixed ittf document. The folder uri of \r\n\t\t\t+ the mixer ittf document is the base path.\r\n\t\t\t+ No whitechar must separate the mixed fragment path and the open paren.\r\n\t\tp The mixed fragment is inserted in the mixer document replacing\r\n\t\t\t+ the mix node command. If the mix node has children,\r\n\t\t\t+ by default they are appended to the root node of the mixed fragment.\r\n\t\t\t+ But if the mixed fragment has a descendant node that is a '$hook'\r\n\t\t\t+ node command of name 'default', than the children of the mix node\r\n\t\t\t+ will replace it.\r\n\r\n\t\tp Example of ittf fragment with an $hook node command where children\r\n\t\t\t+ of the mix node will be appended. The hook-name is not declared,\r\n\t\t\t+ so it is assumed to be 'default').\r\n\t\tittf\r\n\t\t\t- table\r\n\t\t\t\t- $hook\r\n\r\n\r\n\t\tp The root node of a mixed ittf document can be a mixin inclusion node command.\r\n\t\t\t+ A fragment can mix its container and append nodes to its hooks:\r\n\t\tittf\r\n\t\t\t- mylayout( home )\r\n\t\t\t\t- $append scripts\r\n\t\t\t\t\t- js dialogs.js\r\n\t\t\t\t- div My content\r\n\r\n\t\th3 $params\r\n\t\tittf\r\n\t\t\t- rootnode\r\n\t\t\t\t- $params param1 [,param2 [,param-n]]\r\n\t\t\r\n\t\tp Ittf fragments designed to be mixed can declare composition parameters.\r\n\t\t\t+ The `$params` node must be the first child of the root node.\r\n\r\n\t\tp A parameter has format: [&]name[:type][|default]\r\n\t\ttable\r\n\t\t\ttr( &    , Optional. A paramater name prededed by `&` means an object passed by reference )\r\n\t\t\ttr( name , the name of the parameter to be used in jsWizzi expressions )\r\n\t\t\ttr( type , the parameter type\r\n\t\t\t\tp one-of: string(default), integer, float, boolean, date, object (implicit\r\n\t\t\t\t\t+ when '&' declared), macro (implicit, detected from IttfMacro delimiters\r\n\t\t\t\t\t+ contained in the default value)\r\n\t\t\ttr( default, typed-value | @@null | @@undefined )\r\n\t\t\t\tp warning! `title|null` becomes title = \"null\" (the quoted string null).\r\n\t\t\t\t+ If you want title to be null then : `title|@@null`\r\n\t\t\ttr( string, quotes are optional, example: `title|\"my way\"` and `title|my way` are the same )\r\n\t\t\ttr( boolean, true | false)\r\n\t\t\ttr( date, yyyy/mm/dd )\r\n\t\t\ttr( macro, \r\n\t\t\t\tp an IttfMacro can be passed as a parameter to a mixin, when the parameter\r\n\t\t\t\t\t+ is referenced we have a double macro substitution \r\n\r\n\t\t\r\n\t\tp This list item fragment, lia.html.ittf, ...\r\n\t\tittf\r\n\t\t\t- li\r\n\t\t\t\t- $params text, href\r\n\t\t\t\t- a ${'$'}{text}\r\n\t\t\t\t\t- href ${'$'}{href}\r\n\t\tp .. can be mixed in this way\r\n\t\tittf\r\n\t\t\t- ul\r\n\t\t\t\t- lia( my home page, http://hello.it )\r\n\r\n\t\th3 $hook\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $hook name\r\n\t\tp An $hook node command is a named insertion point where node branches can\r\n\t\t\t+ be appended. The name is optional, when missing its value is 'default'.\r\n\t\tp It has to be replaced and must not have children nodes.\r\n\t\tp See the statements `Mix` and `$Append`, for how to append\r\n\t\t\t+ node branches to an $hook node.\r\n\r\n\t\th3 $append\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $append hook-name\r\n\t\t\t\t\t- ... node branch ...\r\n\t\tp An $append node command is the root of a node branch that will be\r\n\t\t\t+ appended to an ancestor $hook of name hook-name.\r\n\t\t\t+ The children nodes of $append will replace the $hook node.\r\n\r\n\t\th3 $group\r\n\t\tittf\r\n\t\t\t- $group empty-value\r\n\t\t\t\t- ... node branch ...\r\n\t\tp An ittf document must have one and only one root node.\r\n\t\tp The $group node command is a convenience node that may be used as the root of \r\n\t\t\t+ a fragment that must have more than one root node.\r\n\t\tp The $group node has no meaningful value. It disappear in the builded mTree.\r\n\r\n\t\th3 $if, $elif, $else\r\n\t\tp Children nodes of these node commands are included/excluded from the builded mTree\r\n\t\t\t+ depending on the value of the expression.\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $if jswizzi-expression\r\n\t\t\t\t\t- ... node branch ...\r\n\t\t\t\t- $elif jswizzi-expression\r\n\t\t\t\t\t- ... node branch ...           \r\n\t\t\t\t- $else empty-value                    \r\n\t\t\t\t\t- ... node branch ...           \r\n\r\n\t\th3 $foreach and $backeach\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $foreach item-name in collection-name\r\n\t\t\t\t\t- ... node branch ...\r\n\t\tp Descendant nodes of this node command are a repeat template; item-name\r\n\t\t\t+ is user defined and collection-name is a jswizzi expression that evaluates\r\n\t\t\t+ to an iterable javascript object, that must be in scope in the fragment or in the global\r\n\t\t\t+ jsWizziContext.\r\n\t\tp The var statement that declares item-name is auto-generated.\r\n\t\tp Descendant nodes are repeated having item-name as a value in scope.\r\n\t\tp The $backeach command iterates the collection backword.\r\n\r\n\t\th3 $break, $continue\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t\t- $break empty-value\r\n\t\t\t\t\t- ...\r\n\t\t\t\t\t- $continue empty-value\r\n\t\tp This statements have the same meaning than in javascript but operate breaking or continuing\r\n\t\t\t+ the template repetition.\r\n\t\tp A label for continuation is not implemented.\r\n\r\n\t\th3 $while\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $while jswizzi-expression\r\n\t\t\t\t\t- ... node branch ...\r\n\t\t\t\t\t- $ jswizzi-exit-condition-change\r\n\t\tp This is a repeat template statement where descendant nodes are repeated \r\n\t\t\t+ until the jswizzi-expression evaluates to false.\r\n\t\tp $ or $global node commands must be used to modify the context values of the exit condition.\r\n\t\t\t+ There is a limit of 10,000 iterations to guard against accidental loops, after that an exception is raised.\r\n\r\n\t\tp Example\r\n\t\tittf \r\n\t\t\t- ...\r\n\t\t\t\t- $ i = 0\r\n\t\t\t\t- $while i < 256\r\n\t\t\t\t\t- p Item ${'$'}{i}\r\n\t\t\t\t\t- $ i++\r\n\r\n\t\th3 $ \r\n\t\tp Single line format:\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $ jswizzi-statement\r\n\t\t\t\r\n\t\tp Multi-line format:\r\n\t\t\t\r\n\t\tittf\r\n\t\t\t- $\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- ...\r\n\r\n\t\tp Descendant nodes of this command can contain jswizzi statements that,\r\n\t\t\t+ during the evaluation step, are executed in the fragment scope \r\n\t\t\t+ to wich the node command belongs.\r\n\t\tp They may declare and modify variables that have fragment scope, and\r\n\t\t\t+ modify variables that have global scope.\r\n\t\t\t\r\n\t\th3 $global\r\n\t\tp Single line format:\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- $global jswizzi-statement\r\n\t\tp Multi-line format:\r\n\t\tittf\r\n\t\t\t- $global\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- jswizzi-statement\r\n\t\t\t\t- ...\r\n\t\tp Descendant nodes of this command can contain jswizzi statements that,\r\n\t\t\t+ during the evaluation step, are executed in the global scope of the jsWizziContext.\r\n\t\t\t+ They may declare or modify variables in the global scope.\r\n\r\n\t\th3 ${'$'}.\r\n\t\tp The text container node\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- ${'$'}.\r\n\t\t\t\t\t- free content\r\n\t\t\t\t\t- free content\r\n\t\t\t\t\t- ...\r\n\r\n\t\th3 ${'$'}${'$'}\r\n\t\tp The single line comment\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- ul\r\n\t\t\t\t\t- ${'$'}${'$'} <rest-of-line is comment>\r\n\t\t\t\t\t- li item ${'$'}${'$'} <rest-of-line is comment>\r\n\r\n\t\th3 ${'$'}${'*'} ... ${'*'}${'$'}\r\n\t\tp The multiline comment\r\n\t\tittf\r\n\t\t\t- ...\r\n\t\t\t\t- ${'$'}${'*'}\r\n\t\t\t\t- ul\r\n\t\t\t\t\t- li\r\n\t\t\t\t- ${'*'}${'$'}\r\n\r\n"
      },
      "t/ittf-composition.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf documents composition'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp An ittf document, when loaded, becomes a javascript object called `mTreeBrick`.\r\n\t\t\r\n\t\tp mTreeBricks are composition units. They can mix, or include, other bricks and can\r\n\t\t\t\\b be mixed, or included. \r\n\t\t\t\\b The mix or include operation is declared on a node of the mixer or includer brick,\r\n\t\t\t\\b that will be replaced from the nodes of the mixed or included one. \r\n\r\n\t\tp An mTree loading begins loading a primary ittf document, that become the primary\r\n\t\t\t\\b mTreeBrick, the starting point of the composition. Included and mixed\r\n\t\t\t\\b ittf documents become composed\r\n\t\t\t\\b mTreeBricks.\r\n\r\n\t\tp A single mTreeBrick can be composed many times in different positions of\r\n\t\t\t\\b the builded mTree. It is loaded once, and cloned for composition.\r\n\t\t\t\r\n\t\tp Include and mix operations have a different behaviour. When included, cloned mTreeBricks,\r\n\t\t\t\\b become part of the includer brick and their nodes acquire its brick key and\r\n\t\t\t\\b its brick evaluation context. Instead, mixed mTreeBricks, are inserted in the \r\n\t\t\t\\b node structure of the mixer, but each of them mantains its original brick key\r\n\t\t\t\\b and brick evaluation context. When coding an ittf document, that will become a \r\n\t\t\t\\b mixed mTreeBrick, created variables will have a scope limited to the nodes declared \r\n\t\t\t\\b in the document, even if they will be merged in the mixer brick.\r\n\r\n\t\tp Summarizing: primary and fragment mTreeBricks have their own evaluation context, included\r\n\t\t\t\\b mTreeBricks use the evaluation context of their includer.\r\n\r\n\t\tp In case of a mixed mTreeBrick the mixer node can have children nodes that in turn\r\n\t\t\t\\b can replace 'hook' nodes of the mixed brick. See the '$hook' and '$append'\r\n\t\t\t\\b ittf command nodes for the composition rules of a mix operation.\r\n\r\n"
      },
      "t/ittf-notation.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf notation'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Documents are made of text lines separated by a:\r\n\t\t\tul\r\n\t\t\t\tli x'000a' char or\r\n\t\t\t\tli x'000d' char or\r\n\t\t\t\tli x'000a' \\b x'000d' couple of chars\r\n\t\t\r\n\t\tp A line is made of a node-name and a node-value separated by a\r\n\t\t\t\\b white-char (space or tab).\r\n\r\n\t\tittf-panel\r\n            schema ittf\r\n            ittf\r\n                name value\r\n                    name value\r\n\t\t\r\n\t\tp Node-values always are trimmed, you cannot have a node-value\r\n\t\t\t\\b that starts or ends with a white-char sequence.\r\n\r\n\t\tp When loaded, both these nodes will containg the 'value' string in the node-value.\r\n\t\tittf-panel\r\n            schema ittf\r\n            ittf\r\n                name1 value\r\n                    name2      value\r\n\r\n\t\tp The node hierarchy is built calculating the indentation of node-names\r\n\t\t\t\\b in a text line. Every tab or every 4 space chars preeceding a node-name\r\n\t\t\t\\b count for one level of indentation.\r\n\r\n\t\tp The node-name of the first line (the root node-name) must have indentation zero.\r\n\t\t\t\\b The root node-name must start at column 1 (1-based) of the first row.\r\n\r\n\t\tp An ittf document cannot have more than one root node. If the semantic of a\r\n\t\t\t\\b document require more than one root node, a convenience '$group'\r\n\t\t\t\\b node command can be used. It must be the root node of a composed document (included\r\n\t\t\t\\b or mixed) and is ignored during the mTree build up, so that all its childs become\r\n\t\t\t\\b root nodes of the included document.\r\n\r\n\t\tp Example. Ittf document with two root nodes.\r\n\t\tittf-panel\r\n            schema ittf\r\n            title Sample ITTF document with two root nodes.\r\n            ittf\r\n                ${'$'}group\r\n                    root1 value1\r\n                    root2 value2\r\n\r\n\t\tp A line becomes a node which parent is the first preceeding line with a lesser\r\n\t\t\t\\b indentation. \r\n\r\n\t\tp Phisical text lines may have line continuatios and a 'logical' line\r\n\t\t\t\\b may contain many phisical lines. There are three pre-defined\r\n\t\t\t\\b node-names that allow line continuation:\r\n\t\t\tul\r\n\t\t\t\tli '\\' means that the node-value is joined to the node-value\r\n\t\t\t\t\t\\b of the parent node without separation.\r\n\t\t\t\tli '\\b' means that the node-value is joined to the node-value\r\n\t\t\t\t\t\\b of the parent node with one space char separator.\r\n\t\t\t\tli '\\n' means that the node-value is joined to the node-value\r\n\t\t\t\t\t\\b of the parent node with one Line Feed char separator.\r\n\r\n\t\tittf-panel\r\n            schema ittf\r\n            title Line continuation sample.  Both 'name1' and 'name2' have the same value.\r\n            ittf\r\n                - root\r\n                    - name1 I am\r\n                        - \\b a single\r\n                        - \\b line\r\n                    - name2 I am a single line\r\n\r\n\t\tp Node names and values are text strings by design, and never require quotes\r\n\t\t\t\\b (they are unquoted by the lexer). The wizzi factory is a text manipulator.\r\n\t\t\t\\b If the semantic of a node-value require that it is treated as a different type\r\n\t\t\t\\b (boolean, integer, float or date), that can be done using wizzi schemas, \r\n\t\t\t\\b that apply types to the tree structure resulting from loading an ittf \r\n\t\t\t\\b document (see mTrees).\r\n\t\t\r\n\t\tp One exception to this rule is when an argument is passed to a mixed ittf document,\r\n\t\t\t\\b and will become part of its evaluation context. Types different from string\r\n\t\t\t\\b can be usefull in jswizzi statements and expessions. The '$params' node command, that\r\n\t\t\t\\b declares the parameters received by a mixed ittf document, may assign a type to\r\n\t\t\t\\b passed arguments.\r\n\r\n\t\tp In any case the lexer do not detect types. When needed they must be declared.\r\n\r\n\r\n\r\n"
      },
      "t/ittf-templates.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf templates'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Ittf main documents and fragments are composable templates, and their nodes can contain template node commands\r\n\t\t\t\\b and jswizzi expressions, that will be processed in the evaluation step\r\n\t\t\t\\b of the mTree loading.\r\n\r\n\t\tp The buildup of the resulting mTree can create new nodes using repeat node commands\r\n\t\t\t\\b like '$foreach', '$backeach' and '$while' and can include or exclude node branches\r\n\t\t\t\\b using '$if', '$elif' and '$else' conditional node commands.\r\n\r\n\t\tp jswizzi statements and expression are executed in the fragment evaluation context\r\n\t\t\t\\b and may access global context variables.\r\n\r\n\t\th3 $foreach repeat node command\r\n\t\tittf-panel\r\n            schema ittf\r\n            ittf\r\n                - ...\r\n                    - $foreach item-name in collection-name\r\n                        - ... node branch ...\r\n\t\tp Descendant nodes of this node command are a repeat template; item-name\r\n\t\t\t\\b is user defined and collection-name is a jswizzi expression that evaluates\r\n\t\t\t\\b to an iterable javascript object, in scope in the local or global\r\n\t\t\t\\b jsWizziContext.\r\n\t\tp The var statement that declares item-name is auto-generated.\r\n\t\tp Descendant nodes are repeated having item-name as a value in scope.\r\n\r\n\t\th3 $while repeat node command\r\n\t\tp This is a repeat template statement where descendant nodes are repeated \r\n\t\t\t\\b until the jswizzi-expression evaluates to false.\r\n\t\tp $ or $global node commands must be used to modify the context values of the exit condition.\r\n\t\t\t\\b There is a limit of 10000 iterations to guard against accidental loops, after that an exception is raised.\r\n\t\tp TODO make the limit of 10000 iterations configurable and an optional parameter of the loadMTree function.\r\n\t\tittf-panel\r\n            schema ittf\r\n            ittf\r\n                - ...\r\n                    - $while jswizzi-expression\r\n                        - ... node branch ...\r\n                        - $ jswizzi-exit-condition-change\r\n\r\n\t\th3 $break, $continue repeat node commands\r\n\t\tp This statements have the same meaning than in javascript but operate\r\n\t\t\t\\b breaking or continuing the template repetition.\r\n\t\tp A label for continuation is not implemented.\r\n\t\tittf-panel\r\n            schema ittf\r\n            ittf\r\n                - ...\r\n                    - $foreach ... | $while ...\r\n                        - $break empty-value\r\n                        - ...\r\n                        - $continue empty-value\r\n\r\n\r\n\r\n"
      },
      "t/pathresolution.html.ittf": {
        "type": "CODE",
        "contents": "concept Path resolution of composed documents\r\n\r\n\tsummary\r\n\t\tp The path resolution algoritm for retrieving mixed and included ittf fragments starts from the \r\n\t\t\t+ composer node.\r\n\t\t\t+ The folder uri, of the document containing the composer node, gives the base path.\r\n\t\t\t+ The node value of the mix or include node command gives the relative path.\r\n\r\n\t\tp At first is searched the path resulting from joining base and relative path using the\r\n\t\t\t+ nodejs function path.resolve(...).\r\n\r\n\t\tp If this match fails, then the 't' folder rule is applied, starting from the base path\r\n\t\t\t+ and going down one step first, and then going up on the folder tree. The rule is\r\n\t\t\t+ the same followed by nodejs to locate packages. The wizzi factory uses\r\n\t\t\t+ folders named 't' as nodejs uses folders named 'node_modules'.\r\n\r\n\t\tp The search for a composed document proceeds as follow:\r\n\t\tul\r\n\t\t\tli search path.resolve(base-path, relative-path)\r\n\t\t\tli search path.resolve(base-path, 't', relative-path)\r\n\t\t\tli search path.resolve(path.dirname(base-path), 't', relative-path)\r\n\t\t\tli search path.resolve(path.dirname(path.dirname(base-path)), 't', relative-path)\r\n\t\t\tli ...\r\n\t\tp until the document is found or the base-path of the wizzi factory repository, declared\r\n\t\t\t+ in the config file, is reached. In the last case the search fails and we \r\n\t\t\t+ have an IttfNotFound error.\r\n\r\n\t\tp Example. Given this folder structure\r\n\t\tittf\r\n\t\t\t- folder-a\r\n\t\t\t\t- t\r\n\t\t\t\t\t- layouts\r\n\t\t\t\t\t\t- site-layout.html.ittf\r\n\t\t\t\t- folder-a1\r\n\t\t\t\t\t- t\r\n\t\t\t\t\t\t- dialog.html.ittf\r\n\t\t\t\t\t- my-home-page.html.ittf\r\n\r\n\t\tp The ittf document my-home-page.html.ittf could contain these two composition node commands:\r\n\t\tittf\r\n\t\t\t- layouts/site-layout( home )\r\n\t\t\t\t- $include dialog( )\r\n\t\t\r\n\t\tp For both commands the base-path is 'folder-a/folder-a1'.\r\n\t\t\r\n\t\tp For the include node command the relative path is 'dialog.html.ittf' and the \r\n\t\tp document is found by: path.resolve(base-path, 't', relative-path).\r\n\t\t\r\n\t\tp For the mix node command the relative path is 'layouts/site-layout' and the \r\n\t\tp document is found by: path.resolve(path.dirname(base-path), 't', relative-path).\r\n\t\t\t\t\r\n"
      },
      "t/xml-comparision.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Xml document comparision'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\th4 Content model\r\n\t\tp XML differentiates two types: elements containing only \r\n\t\t\t\\b element content (no character data) and mixed content\r\n\t\t\t\\b (elements that may contain character data, optionally \r\n\t\t\t\\b interspersed with child elements). \r\n\t\tp Ittf documents have no mixed content. They have ittf nodes only.\r\n\t\t\t\\b They do not have the concept of element or attribute or\r\n\t\t\t\\b text. \r\n\t\tp Only the application of a wizzi schema to an mTree, when loading a Wizzi Model,\r\n\t\t\t\\b can trasform an ittf node in an element or attribute or text, depending\r\n\t\t\t\\b on the schema declarations.\r\n\r\n\t\th4 Document types and document type definitions\r\n\t\tp A wizzi schema is actually a documemnt type definition, but it applies to loaded mTrees\r\n\t\t\t\\b not to ittf documents. Ittf documents creators must design their\r\n\t\t\t\\b documents to obtain a valid mTree after composition and evaluation,\r\n\t\t\t\\b just before loading it in a Wizzi Model.\r\n\t\tp An ittf document, when created for composing an mTree for a specific wizzi schema,\r\n\t\t\t\\b can be considered to have the type of that wizzi schema. The type of an\r\n\t\t\t\\b ittf document must be recognizable from its name, that must end with\r\n\t\t\t\\b '.`schema`.ittf'. Example of ittf document of type 'js': 'index.js.ittf'.\r\n\r\n\t\th4 Markup declaration and markup model\r\n\t\tp In XML a markup declaration is a syntactical construct within a DTD declaring \r\n\t\t\t\\b an entity or defining a markup structure.\r\n\t\tp Wizzi schemas do not need to declare entities, because ittf document can contain\r\n\t\t\t\\b expressions and template commands. But, like DTDs, they declare an elements and\r\n\t\t\t\\b attributes structure, and like DTDs they define a model (Wizzi Model) of\r\n\t\t\t\\b an mTree content.\r\n\t\tp In the wizzi factory, Wizzi Models are implemented as \r\n\t\t\t\\b javascript module, generated from a\r\n\t\t\t\\b wizzi schema declaration. They can load \r\n\t\t\t\\b valid mTrees, and may be used as a context object by the mTree loader,\r\n\t\t\t\\b model transformers and artifact generators.\r\n\r\n\t\th4 Elements and element types\r\n\t\tp Wizzi schema elements and XML DTD element types have the same goal.\r\n\t\t\t\\b Wizzi model elements are such only after the mTree loading of an ittf document.\r\n\t\t\t\\b In ittf documents we have potential model elements, attributes and texts.\r\n\r\n\t\th4 Valid characters\r\n\t\tp Ittf documents accept any character. The wizzi factory ignores the content\r\n\t\t\t\\b of documents and has no concept of data type.\r\n\t\t\t\\b Wizzi schemas only can constrain node names and values.\r\n\t\tp When generating the javascript of a Wizzi Model\r\n\t\t\t\\b the names of classes and attributes are checked and invalid chars for\r\n\t\t\t\\b javascript names are replaced with the '_' char. Class names colliding\r\n\t\t\t\\b with javascript keywords are prefixed with the letter 'x'.\r\n"
      },
      "t/t/tr.docs.ittf": {
        "type": "CODE",
        "contents": "tr\r\n\t$params name, value|@@null\r\n\ttd ${name}\r\n\ttd\r\n\t\t$if value != null\r\n\t\t\t+ ${value}\r\n\t\t$hook"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/jswizzi.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'JsWizzi'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n    \r\n        $include ./introduction\r\n"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'JsWizzi'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\t\t\r\n        p JsWizzi is a subset of the ECMA-262 javascript standard used by \r\n\t\t\t+ the wizzi factory for processing ittf documents and build mTrees.\r\n\t\t\t+ JsWizzi uses the quite efficent <a href=\"http://esprima.org/\">esprima</a> parser\r\n\t\t\t+ and is run by a custom javascript engine (JsWizziRunner).\r\n\r\n\t\tp Ittf documents may contain Js-Wizzi statements in\r\n\t\t\tul\r\n\t\t\t\tli The value part of nodes (ittf node values are interpolated)\r\n                    ittf-panel\r\n\t\t\t\t\t    ittf\r\n\t\t\t\t\t\t    caption ${'$'}{ name.capitalize() }\r\n\t\t\t\tli Conditional expression of $if, $elif, $while command nodes\r\n                    ittf-panel\r\n\t\t\t\t\t    ittf\r\n    \t\t\t\t\t\t${'$'}if name.substring(1,2) === 'is'\r\n\r\n\t\t\t\tli Collection name of $foreach command node\r\n                    ittf-panel\r\n\t\t\t\t\t    ittf\r\n    \t\t\t\t\t\t${'$'}foreach item in model.getCollection('alfa')\r\n\r\n                li Body of $ and $global command nodes\r\n                    ittf-panel\r\n\t\t\t\t\t    ittf\r\n        \t\t\t\t\t${'$'} var beta = 100\r\n\r\n        ittf-panel\r\n            schema html\r\n            title Sample JsWizzi expressions and statements\r\n            ittf\r\n                ul\r\n                    ${'$'} var i = 0;\r\n                    ${'$'}while i < 10\r\n                        li counting ${'$'}{i}\r\n                        ${'$'} i++;\r\n\r\n\t\tp The esprima syntax tree format is expected to be compatible \r\n\t\t\t+ with the Mozilla SpiderMonkey Parser API. \r\n\t\t\r\n\t\tul Node types implemented by JsWizzi:\r\n\t\t\tli VariableDeclaration\r\n\t\t\tli Statements\r\n\t\t\t\tul\r\n\t\t\t\t\tli EmptyStatement\r\n\t\t\t\t\tli ExpressionStatement\r\n\t\t\t\t\tli IfStatement\r\n\t\t\t\t\tli WhileStatement\r\n\t\t\t\t\tli DoWhileStatement\r\n\t\t\t\t\tli ForStatement\r\n\t\t\t\t\tli ForInStatement\r\n\t\t\t\t\tli BreakStatement\r\n\t\t\t\t\tli ContinueStatement\r\n\t\t\t\t\tli ReturnStatement\r\n\t\t\t\t\tli TODO SwitchStatement\r\n\t\t\t\r\n\t\t\tli Expressions\r\n\t\t\t\tul\r\n\t\t\t\t\tli UnaryExpression: !\r\n\t\t\t\t\tli BinaryExpression: +. -, *, /, ==, ===, !=, !==, >=, >, <=, <\r\n\t\t\t\t\tli UpdateExpressions: ++, --\r\n\t\t\t\t\tli LogicalExpression: &&, ||\r\n\t\t\t\t\tli ConditionalExpression: test ? consequent : alternate\r\n\t\t\t\t\tli CallExpression\r\n\t\t\t\t\tli MemberExpression\r\n\t\t\t\t\tli AssignmentExpression: =, *=, /=, %=, +=, -=, <<=, >>=, >>>=, &=, ^=, |= \r\n\t\t\t\t\tli ArrayExpression\r\n\t\t\t\t\tli ObjectExpression\r\n\t\t\t\t\tli FunctionCall\r\n\t\t\t\r\n\t\t\tli FunctionDeclaration\r\n\t\t\t\tdiv Simple function declaration. No prototypes. No function\r\n\t\t\t\t\t+ objects; functions cannot be built by code and used like objects.    \r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/mtrees.html",
    "mainIttf": "mtrees.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "mtrees.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'mTrees'\r\n        };\r\n    \r\n    _layouts/docs-layout(&art)\r\n    \r\n        $include ./introduction\r\n"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'mTrees'\r\n        };\r\n\r\n    section(&sect)\r\n\t\t\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/styles/article.css",
    "mainIttf": "index.css.ittf",
    "wizziSchema": "css",
    "packiFiles": {
      "index.css.ittf": {
        "type": "CODE",
        "contents": "css\r\n    $include base\r\n    $include header\r\n    $include search\r\n    $include aside-right\r\n    $include news\r\n\r\n    < article\r\n        background-color ${wzCtx.Colors.bg_dark_medium}\r\n        border-radius 10px\r\n        padding 20px\r\n        margin 0 5px 3px 5px\r\n        box-shadow 0 3px 5px rgba(0,0,0,0.1)\r\n        font-size 16px\r\n\r\n    media (min-width: 768px)\r\n        < article\r\n            padding 40px 40px 30px\r\n            font-size 21px\r\n            margin 0 10px 10px 10px\r\n            box-shadow 0 5px 10px rgba(0,0,0,0.1)\r\n    \r\n    . doc-container\r\n        margin 0 auto\r\n        width 60%\r\n        display flex\r\n\r\n    . w-1-5\r\n        width 20%\r\n    \r\n    . w-4-5\r\n        width 80%\r\n\r\n    . doc-title\r\n        font-size 1.5rem\r\n        font-weight 600\r\n        border-bottom 1px solid #999\r\n\r\n    . ittf-panel\r\n        $$ background-color #aaa\r\n        $$ padding 20px\r\n        margin-bottom 20px\r\n\r\n    . ittf-panel-title\r\n        font-size 1rem\r\n        font-weight 700\r\n        margin-bottom 2px\r\n\r\n    media (min-width: 768px)\r\n        . ittf-panel-title\r\n            font-size 19px\r\n            font-weight 700\r\n            margin-bottom 4px\r\n\r\n\r\n    . link\r\n        float 'right'\r\n        paddingLeft '10px'\r\n    \r\n    . cheatsheet\r\n    . cheatsheet-page\r\n        display flex\r\n        padding 25px\r\n        position fixed\r\n        height 100vh\r\n        width 100%\r\n    \r\n    . cheatsheet-sidebar\r\n        display flex\r\n        min-width 300px\r\n        margin 5px\r\n        flex-direction column\r\n        overflow auto\r\n\r\n    . cheatsheet-sidebar-schemas\r\n        display flex\r\n        flex-direction column\r\n        border 1px solid gray\r\n        margin-bottom 5px\r\n    \r\n    . cheatsheet-sidebar-element-title\r\n        padding-left 15px\r\n        font-weight 600\r\n\r\n    . cheatsheet-sidebar-items\r\n        border 1px solid gray\r\n\r\n    . cheatsheet-content\r\n        flex 1 1 auto\r\n        margin 5px\r\n        overflow auto\r\n\r\n    . cheatsheet-item\r\n        display flex\r\n        background-color #3e5a6d\r\n\r\n    . cheatsheet-ittf\r\n        padding 10px\r\n        border 1px solid gray\r\n        margin 5px\r\n        width 50%\r\n        < pre\r\n            width 100%\r\n            padding 10px\r\n\r\n    . cheatsheet-generated\r\n        padding 10px\r\n        border 1px solid gray\r\n        margin 5px\r\n        width 50%\r\n        background-color #dedede\r\n        < pre\r\n            width 100%\r\n            padding 10px\r\n\r\n    . cheatsheet-element-title\r\n        background-color #bbb\r\n        width 100%\r\n        padding 15px 5px 15px 15px\r\n        margin 20px 0 10px 0\r\n        font-size 1.2rem\r\n        font-weight 600\r\n\r\n    . cheatsheet-item-title\r\n        padding 5px 10px 0px 10px\r\n        font-weight 700\r\n\r\n    $include highlight\r\n\r\n    $ var opt = pkg.Fonts\r\n    css/fonts(&opt)\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"css\"\n            path \"stfnbssl/css\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/styles/home.css",
    "mainIttf": "index.css.ittf",
    "wizziSchema": "css",
    "packiFiles": {
      "index.css.ittf": {
        "type": "CODE",
        "contents": "css\r\n\r\n\t$include base\r\n    < body\r\n\t\ttext-align center\r\n    $include header\r\n    $include search\r\n\r\n\t< img\r\n\t\tdisplay block\r\n\t\twidth 100%\r\n\t\theight auto\r\n\r\n\t< h1, h2, h3\r\n\t\tmargin 0\r\n\t\tpadding 1em 0\r\n\r\n\t< p\r\n\t\tmargin 0\r\n\t\tpadding 1em 0\r\n\r\n\t. btn\r\n\t\tdisplay inline-block\r\n\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n\t\tmargin .5em 0\r\n\t\tpadding 1em 2em\r\n\t\ttext-decoration none\r\n\t\tborder 1px solid #666\r\n\r\n\t. btn:hover\r\n\t\tbackground-color #eaeaea\r\n\t\tcolor ${wzCtx.Colors.bg_dark_medium}\r\n\r\n\t# main\r\n        width 80%\r\n        margin 0 auto\r\n\r\n    # showcase\r\n\t\tmin-height 350px\r\n        width 60%\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n\t\ttext-align center\r\n        margin 0 auto\r\n\t\r\n    # showcase .bg-logo\r\n\t\tposition absolute\r\n\t\tbackground ${wzCtx.Colors.bg_dark_medium} url('${wzCtx.Params.baseUrl}/images/logo.svg')\r\n\t\tbackground-position center\r\n\t\tbackground-repeat no-repeat\r\n\t\tbackground-size cover\r\n\t\twidth 60%\r\n\t\theight 350px\r\n\t\tz-index -1\r\n\t\topacity 0.6\r\n\r\n\t# showcase .bg-image\r\n\t\tposition absolute\r\n\t\tbackground ${wzCtx.Colors.bg_dark_medium} url(${wzCtx.Params.baseUrl}/images/showcase.png)\r\n\t\tbackground-position center\r\n\t\tbackground-repeat no-repeat\r\n\t\tbackground-size cover\r\n\t\twidth 60%\r\n\t\theight 350px\r\n\t\tz-index -1\r\n\t\topacity 0.2\r\n\r\n\t# showcase h1\r\n\t\tpadding-top 100px\r\n\t\tpadding-bottom 0\r\n\r\n\t# showcase .content-wrap,\r\n\t\t\\b #section-a .content-wrap,\r\n\t\t\\b #section-a2 .content-wrap,\r\n\t\t\\b #section-a3 .content-wrap,\r\n\t\t\\b #section-a4 .content-wrap\r\n\t\tpadding 0 1.5em 1.5em 0\r\n\r\n    . showcase-sub-title\r\n        margin 50px 0\r\n        font-size 24px\r\n\r\n\t# section-a\r\n\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n        margin 0 auto\r\n        width 70%\r\n        border-radius 5px\r\n        box-shadow inset 0 1px 10px rgba(0,0,0,.3), 0 1px 0 rgba(255,255,255,.1), 0 -1px 0 rgba(0,0,0,.5)\r\n\r\n\r\n\t# section-a2\r\n\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n        margin 0 auto\r\n        width 70%\r\n        border-radius 5px\r\n        box-shadow inset 0 1px 10px rgba(0,0,0,.3), 0 1px 0 rgba(255,255,255,.1), 0 -1px 0 rgba(0,0,0,.5)\r\n\r\n\t# section-a3\r\n\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n        margin 0 auto\r\n        width 70%\r\n        border-radius 5px\r\n        box-shadow inset 0 1px 10px rgba(0,0,0,.3), 0 1px 0 rgba(255,255,255,.1), 0 -1px 0 rgba(0,0,0,.5)\r\n\r\n\t# section-a4\r\n\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n        margin 0 auto\r\n        width 70%\r\n        border-radius 5px\r\n        box-shadow inset 0 1px 10px rgba(0,0,0,.3), 0 1px 0 rgba(255,255,255,.1), 0 -1px 0 rgba(0,0,0,.5)\r\n\r\n\t# section-b\r\n\t\tpadding 2em 1em 1em\r\n\r\n\t\t< ul\r\n\t\t\tlist-style none\r\n\t\t\tmargin 0\r\n\t\t\tpadding 0\r\n\r\n\t\t\t< li\r\n\t\t\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\t\t\tmargin-bottom 1em\r\n\t\t\t\tcolor ${wzCtx.Colors.c_dark}\r\n                border-radius 5px\r\n                box-shadow inset 0 1px 10px rgba(0,0,0,.3), 0 1px 0 rgba(255,255,255,.1), 0 -1px 0 rgba(0,0,0,.5)\r\n                < h3\r\n                    color ${wzCtx.Colors.h3_c_dark}\r\n\r\n\t# section-b2\r\n\t\tpadding 2em 1em 1em\r\n\r\n\t\t< ul\r\n\t\t\tlist-style none\r\n\t\t\tmargin 0\r\n\t\t\tpadding 0\r\n\r\n\t\t\t< li\r\n\t\t\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\t\t\tmargin-bottom 1em\r\n\t\t\t\tcolor ${wzCtx.Colors.c_dark}\r\n                border-radius 5px\r\n                box-shadow inset 0 1px 10px rgba(0,0,0,.3), 0 1px 0 rgba(255,255,255,.1), 0 -1px 0 rgba(0,0,0,.5)\r\n                < h3\r\n                    color ${wzCtx.Colors.h3_c_dark}\r\n\r\n\t# section-b3\r\n\t\tpadding 2em 1em 1em\r\n\t\tfont-size 0.8em\r\n\r\n\t\t< ul\r\n\t\t\tlist-style none\r\n\t\t\tmargin 0\r\n\t\t\tpadding 0\r\n\r\n\t\t\t< li\r\n\t\t\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\t\t\tmargin-bottom 1em\r\n\t\t\t\tcolor ${wzCtx.Colors.c_dark}\r\n                border-radius 10px\r\n                box-shadow 0 3px 5px rgba(0,0,0,0.1)\r\n                < h3\r\n                    color ${wzCtx.Colors.h3_c_dark}\r\n\t\r\n    # section-b4\r\n\t\tpadding 2em 1em 1em\r\n\r\n\t\t< ul\r\n\t\t\tlist-style none\r\n\t\t\tmargin 0\r\n\t\t\tpadding 0\r\n\r\n\t\t\t< li\r\n\t\t\t\tbackground-color ${wzCtx.Colors.bg_dark_medium}\r\n\t\t\t\tmargin-bottom 1em\r\n\t\t\t\tcolor ${wzCtx.Colors.c_dark}\r\n                border-radius 10px\r\n                box-shadow 0 3px 5px rgba(0,0,0,0.1)\r\n                < h3\r\n                    color ${wzCtx.Colors.h3_c_dark}\r\n\r\n\t. card-content\r\n\t\tpadding 1em\r\n\r\n    . content-title\r\n        color ${wzCtx.Colors.h3_c_dark}\r\n\r\n\t# section-c\r\n\t\tbackground-color ${wzCtx.Colors.c_dark}\r\n\t\tcolor ${wzCtx.Colors.bg_dark_medium}\r\n\t\tpadding 2em\r\n\r\n\t# section-d .box\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n\t\tpadding 2em\r\n\r\n\t# section-d .box:first-child\r\n\t\tbackground-color #2690d4\r\n\r\n\t# main-footer\r\n\t\tpadding 2em\r\n\t\tbackground-color ${wzCtx.Colors.bg_f_0}\r\n\t\tcolor ${wzCtx.Colors.c_dark}\r\n\t\ttext-align center\r\n\r\n\t# main-footer a\r\n\t\tcolor #2690d4\r\n\t\ttext-decoration none\r\n\r\n\tmedia min-width: 700px \r\n        $*\r\n\t\t. grid \r\n\t\t\tdisplay grid\r\n\t\t\tgrid-template-columns 1fr repeat(2, minmax(auto, 25em)) 1fr\r\n\r\n\t\t*$\r\n        . grid2 \r\n\t\t\tdisplay grid\r\n\t\t\tgrid-template-columns 1fr repeat(2, minmax(auto, 40em)) 1fr\r\n\r\n        # section-a .content-text\r\n\t\t\tcolumns 1\r\n\t\t\tcolumn-gap 2em\r\n\t\t\t< p\r\n\t\t\t\tpadding-top 0\r\n\r\n\t\t# section-a2 .content-text\r\n\t\t\tcolumns 1\r\n\t\t\tcolumn-gap 2em\r\n\t\t\t< p\r\n\t\t\t\tpadding-top 0\r\n\r\n\t\t# section-a3 .content-text\r\n\t\t\tcolumns 1\r\n\t\t\tcolumn-gap 2em\r\n\t\t\t< p\r\n\t\t\t\tpadding-top 0\r\n\r\n\t\t# section-a4 .content-text\r\n\t\t\tcolumns 1\r\n\t\t\tcolumn-gap 2em\r\n\t\t\t< p\r\n\t\t\t\tpadding-top 0\r\n\r\n\t\t. content-wrap, #section-b ul\r\n\t\t\tgrid-column 2/4\r\n\r\n\t\t. content-wrap, #section-b2 ul\r\n\t\t\tgrid-column 2/4\r\n\r\n\t\t. content-wrap, #section-b3 ul\r\n\t\t\tgrid-column 2/4\r\n\r\n\t\t. content-wrap, #section-b4 ul\r\n\t\t\tgrid-column 2/4\r\n\r\n\t\t. box, #main-footer div\r\n\t\t\tgrid-column span 2\r\n\r\n\t\t# section-b\r\n\t\t\t< ul\r\n\t\t\t\tdisplay flex\r\n\t\t\t\tjustify-content space-around\r\n\t\t\t\t< li\r\n\t\t\t\t\twidth 19%\r\n\t\t\t\r\n\t\t# section-b2\r\n\t\t\t< ul\r\n\t\t\t\tdisplay flex\r\n\t\t\t\tjustify-content space-around\r\n\t\t\t\t< li\r\n\t\t\t\t\twidth 31%\r\n\r\n\t\t# section-b3\r\n\t\t\t< ul\r\n\t\t\t\tdisplay flex\r\n\t\t\t\tjustify-content space-around\r\n\t\t\t\t< li\r\n\t\t\t\t\twidth 12%\r\n\r\n\t\t# section-b4\r\n\t\t\t< ul\r\n\t\t\t\tdisplay flex\r\n\t\t\t\tjustify-content space-around\r\n\t\t\t\t< li\r\n\t\t\t\t\twidth 23%"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"css\"\n            path \"stfnbssl/css\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/styles/main.css",
    "mainIttf": "index.css.ittf",
    "wizziSchema": "css",
    "packiFiles": {
      "index.css.ittf": {
        "type": "CODE",
        "contents": "css\r\n    \r\n    $include css/_layouts/page-layout\r\n\r\n    $include css/home/header/index\r\n    $include css/home/content/index\r\n    $include css/home/footer/index\r\n\r\n    $$ No More (see _layouts/page-layout) $include base\r\n    $include css/docs/aside-right\r\n\r\n    < article\r\n        background-color ${wzCtx.Colors.bg_dark_medium}\r\n        border-radius 10px\r\n        padding 20px\r\n        margin 0 5px 3px 5px\r\n        box-shadow 0 3px 5px rgba(0,0,0,0.1)\r\n        font-size 16px\r\n\r\n    media (min-width: 768px)\r\n        < article\r\n            padding 40px 40px 30px\r\n            font-size 21px\r\n            margin 0 10px 10px 10px\r\n            box-shadow 0 5px 10px rgba(0,0,0,0.1)\r\n    \r\n    . doc-container\r\n        margin 0 auto\r\n        width 60%\r\n        display flex\r\n\r\n    . w-1-5\r\n        width 20%\r\n    \r\n    . w-4-5\r\n        width 80%\r\n\r\n    . doc-title\r\n        font-size 1.5rem\r\n        font-weight 600\r\n        border-bottom 1px solid #999\r\n\r\n    . ittf-panel\r\n        $$ background-color #aaa\r\n        $$ padding 20px\r\n        margin-bottom 20px\r\n\r\n    . ittf-panel-title\r\n        font-size 1rem\r\n        font-weight 700\r\n        margin-bottom 2px\r\n\r\n    media (min-width: 768px)\r\n        . ittf-panel-title\r\n            font-size 19px\r\n            font-weight 700\r\n            margin-bottom 4px\r\n\r\n\r\n    . link\r\n        float 'right'\r\n        paddingLeft '10px'\r\n    \r\n    . cheatsheet\r\n    . cheatsheet-page\r\n        display flex\r\n        padding 25px\r\n        position fixed\r\n        height 100vh\r\n        width 100%\r\n    \r\n    . cheatsheet-sidebar\r\n        display flex\r\n        min-width 300px\r\n        margin 5px\r\n        flex-direction column\r\n        overflow auto\r\n\r\n    . cheatsheet-sidebar-schemas\r\n        display flex\r\n        flex-direction column\r\n        border 1px solid gray\r\n        margin-bottom 5px\r\n    \r\n    . cheatsheet-sidebar-element-title\r\n        padding-left 15px\r\n        font-weight 600\r\n\r\n    . cheatsheet-sidebar-items\r\n        border 1px solid gray\r\n\r\n    . cheatsheet-content\r\n        flex 1 1 auto\r\n        margin 5px\r\n        overflow auto\r\n\r\n    . cheatsheet-item\r\n        display flex\r\n        background-color #3e5a6d\r\n\r\n    . cheatsheet-ittf\r\n        padding 10px\r\n        border 1px solid gray\r\n        margin 5px\r\n        width 50%\r\n        < pre\r\n            width 100%\r\n            padding 10px\r\n\r\n    . cheatsheet-generated\r\n        padding 10px\r\n        border 1px solid gray\r\n        margin 5px\r\n        width 50%\r\n        background-color #dedede\r\n        < pre\r\n            width 100%\r\n            padding 10px\r\n\r\n    . cheatsheet-element-title\r\n        background-color #bbb\r\n        width 100%\r\n        padding 15px 5px 15px 15px\r\n        margin 20px 0 10px 0\r\n        font-size 1.2rem\r\n        font-weight 600\r\n\r\n    . cheatsheet-item-title\r\n        padding 5px 10px 0px 10px\r\n        font-weight 700\r\n    \r\n    $include css/docs/highlight\r\n\r\n    $ var opt = wzCtx.Fonts\r\n    css/fonts(&opt)\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"css\"\n            path \"stfnbssl/css\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/wizzifactory.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'mTrees'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n    \r\n        $include ./introduction\r\n"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi factory class'\r\n        };\r\n\r\n    section(&sect)\r\n\t\t\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/wizzijobs.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'Wizzi jobs'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n    \r\n        $include ./introduction\r\n        $include ./wfjob\r\n        $include ./runnerServer"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi jobs'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Wizzi jobs are the task manager of the Wizzi factory.\r\n            \\b They execute a sequence of \\b\r\n            html/docs/to-docs( Wizzi model )\r\n            span \\b loadings and \\b\r\n            html/docs/to-docs( artifact generations )\r\n            span .\r\n\r\n        p They are configured using `wfjob` ITTF documents, and are execute using\r\n            \\b the `executeWizziJob` method of a \r\n            html/docs/to-docs( wizzi.WizziFactory )\r\n            span \\b instance or the `wizzi`\r\n                \\b command of the `\r\n            html/docs/to-plugin( wizzi-cli )\r\n            span ` CLI package."
      },
      "t/productionmanager.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The production manager'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n        p The production of complex software systems can\r\n            \\b require a great number of model processing, transformations\r\n            \\b and artifact generations.\r\n\r\n        p The wizzi.production.productionManager class implements an\r\n            \\b api for scheduling complex jobs. It is the wizzi factory\r\n            \\b task manager.\r\n\r\n        p A Wizzi Model type implemented by the 'wizzi-core' plugin , the 'wfjob' schema,\r\n            \\b can be used to describe wizzi factory jobs. A 'wfjob' model organizes models processing\r\n            \\b and artifact generations in production lines that are executed in \r\n            \\b sequence, so that a line can prepare models and artifacts for the next one.\r\n\r\n        p A job is executed calling the following method of the \r\n            \\b wizzi.WizziFactory instance class.\r\n\r\n        ittf-panel\r\n            schema js\r\n            ittf\r\n                ...\r\n                    m executeJob\r\n                        { jobRequest\r\n                            string name\r\n                                # for info and error messages\r\n                            string path\r\n                                # path to the 'wfjob' ittf document that the wizzi.production.productionManager will load.\r\n                            { productionOptions\r\n                                boolean verbose\r\n                                    # not implemented yet\r\n                            { globalContext\r\n                                optional\r\n                        callback\r\n\r\n\r\n\r\n"
      },
      "t/runnerServer.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The \"runnerServer\"'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp When the Wizzi factory is used in a server application,\r\n\t\t\t\\b or in a long running process where many jobs are \r\n\t\t\t\\b executed, it is useful to access factory\r\n\t\t\t\\b services, prepared at startup, directly from the\r\n\t\t\t\\b JsWizzi code inside ITTF documents.\r\n\r\n\t\tp There are two jswizzi global functions for this\r\n\t\t\t\\b purpose.\r\n\t\t\r\n        ul\r\n\t\t\t\r\n\t\t\tli $.api( functionName, ... arguments ... )\r\n\t\t\t\tp Allow to call a user function declared on start up.\r\n\t\t\t\r\n\t\t\tli $.loadModel( modelName )\r\n\t\t\t\tp Allow the retrieval of a Wizzi Model preloaded on start up.\r\n\r\n\t\th3 The wizzifile.js\r\n\t\tp ... TODO ...\r\n\t\t\r\n\t\th4 Event handler wizzifile.onConfig( config )\r\n\t\tp This event is raised before creating the runnerServer instance.\r\n\t\t\t\\b At this point we can call the config.get(propertyName) and\r\n\t\t\t\\b config.set(propertyName, value) methods on the config object.\r\n\r\n\t\th4 Event handler wizzifile.onStart( runnerServerInstance, config )\r\n\t\tp This event is raised before the initialization of the wizzi factory\r\n\t\t\t\\b contained in the runner server. At this point we can call the\r\n\t\t\t\\b runnerServerInstance.registerApi(name, function) method, the\r\n\t\t\t\\b runnerServerInstance.registerPlugin(pluginNameOrPath) method\r\n\t\t\t\\b and the runnerServerInstance.registerGlobalContext(object) method.\r\n\t\t\r\n\t\th4 Event handler wizzifile.onPrepare( runnerServerInstance, config )\r\n\t\tp This event is raised when the wizzi factory contained in the runner server\r\n\t\t\t\\b has benn initialized. Now it is forbidden to call the\r\n\t\t\t\\b registerPlugin and registerGlobalContext methods but we \r\n\t\t\t\\b can call the runnerServerInstance.loadModel and\r\n\t\t\t\\b runnerServerInstance.transformModel methods.\r\n\r\n\r\n"
      },
      "t/wfjob.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The \"wfjob\" schema'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The `wfjob` Wizzi schema, implemented by the `wizzi-core` plugin,\r\n\t\t\t\\b is the configuration schema of a Wizzi job.\r\n\r\n\t\tittf-panel\r\n            title Sample `wfjob` ITTF document.\r\n            ittf\r\n                wfjob wizzi-docs-concepts\r\n                    $\r\n                        var models_folder     = path.join(__dirname, 'models');\r\n                        var html_folder       = path.join(__dirname, 'html');\r\n                        var dest_folder       = \"c:/my/wizzi/v5/github/wizzifactory.github.io\";\r\n                    \r\n                    models-base-folder ${'$'}{models_folder}\r\n                    \r\n                    model concepts\r\n                        src wizzi-jobs.docs.ittf\r\n                        schema docs\r\n\r\n                    line html\r\n                        cwd-folder ${'$'}{html_folder}\r\n                        $raw wfjob/art-wo-html( docs.html.ittf )\r\n                            model-ref concepts\r\n                                transformer docs/preprint\r\n                    \r\n                    production\r\n                        dest-folder ${'$'}{dest_folder}\r\n                        line-ref html            \r\n\r\n\t\tul The `wfjob` Wizzi schema elements are\r\n\t\t\tli Wfjob\r\n\t\t\tli Model\r\n\t\t\tli ModelRef\r\n\t\t\tli Line\r\n\t\t\tli LineRef\r\n\t\t\tli Artifact\r\n\t\t\tli Production\r\n\r\n\t\th3 The WfJob element\r\n\t\tittf-panel\r\n            ittf\r\n                wfjob {wzName}\r\n                    string title `short-description`\r\n                        # For info and error messages\r\n                    string models-base-folder `path`\r\n                        # The base path to use when the 'src' attribute of models is a relative path\r\n                    string dest-base-folder `path`\r\n                        # The base path of the destination folder of artifacts generated by this job\r\n                        # Can be overridden by the 'dest-folder' attribute of Line elements\r\n                    [ models\r\n                    [ lines\r\n                    [ productions\r\n\r\n\t\th3 Model element\r\n\t\t\r\n\t\tp A model can be:\r\n\t\tul\r\n\t\t\tli An ITTF document of a Wizzi schema exposed by a plugin\r\n\t\t\t\t\\b loaded in the wizzi.WizziFactory instance that is executing the job.\r\n\t\t\tli A POJO module coded in one of these known formats: 'json', 'nodejs' \r\n\t\t\t\t\\b module exporting the function 'toModel'.\r\n\t\t\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    model `model-name`\r\n                        string src `path`\r\n                            # The source path of the ittf document or POJO module.\r\n                            # When relative the base path is the 'models-base-folder' attribute of the\r\n                            # WfJob element.\r\n                        string schema `schema-name`\r\n                            # The name of the Wizzi Model type (wfschema) that will load the\r\n                            # mTree defined in the source ittf document.\r\n                            # Is alternative to the 'format' attribute.\r\n                        string format `format-name`\r\n                            One-of 'json', 'nodejs'\r\n                            # Is alternative to 'schema' attribute.\r\n                        string dump-file `path`\r\n                        [ modelRefs\r\n                            # References to the models to be used, as properties of the mTreeBuildUpContext\r\n                            # parameter, passed to the wizzi-mtree.loader.loadMTree function,\r\n                            # for loading the model mTree.\r\n\r\n\t\th3 ModelRef element\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    model-ref `model-name`\r\n                        string export-name `name`\r\n                        [ transformers\r\n\t\t\r\n\t\th3 Line element\r\n\t\tp Production lines declare artifacts that are processed asynchronously and\r\n\t\t\t\\b concurrently. \r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    line `line-name`\r\n                        string cwd-folder `path`\r\n                        string dest-folder `path`\r\n                        [ artifacts\r\n\r\n\t\th3 Artifact element\r\n\t\tp An Artifact element declares one artifact production that is driven by a\r\n\t\t\t\\b source model. Each production has one driver model, but an Artifact element\r\n\t\t\t\\b can result in many production because the 'src' attribute of this element\r\n\t\t\t\\b may refer to:\r\n\t\t\tul\r\n\t\t\t\tli one single source model\r\n\t\t\t\tli a group of source models described by a glob pattern\r\n\t\t\t\tli one single source model which Model element declares a model collection\r\n\t\t\t\t\t\\b property, meaning that each item of the collection is a source model\r\n\t\t\t\t\t\\b of the production and produces one artifact.\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    artifact `artifact-name`\r\n                        # For info and errors messages.\r\n                        string src `path` | `glob-pattern`\r\n                            # Can be:\r\n                            # . the path of a final artifact that must be simply copied in the destination path.   \r\n                            # . the glob-pattern of final artifacts that must be simply copied in the destination path.   \r\n                            # . the path of a source ittf document\r\n                            # . the glob-pattern of sources ittf documents\r\n\r\n                        schema `schema-name`\r\n                            # When the 'src' attribute is the path of an ittf document, is the wizzi\r\n                            # model type (wfschema) that will load and validate the document.\r\n                            # Is alternative to the 'format' attribute.\r\n                            # Can be null if the artifact is a final artifact.\r\n                        \r\n                        ignore `path` | `glob-pattern`\r\n                            # Files returned by the 'src' attribute glob-pattern that are to be ignored.\r\n                            # Can be a glob pattern.\r\n\r\n                        generation `artifact-generator-name`\r\n                            # The name of the artifact generator that will produce the artifact.\r\n                            # When the artifact is a final artifact must be omitted.\r\n                        \r\n                        dest-path `artifact-file-path`\r\n                            # The 'src' attribute is the default \r\n                            # relative destination path of the generated artifact, \r\n                            # but, when set, this attribute overrides the default. \r\n                            # It may be an absolute path.\r\n                        \r\n                        extension `artifact-file-extension`\r\n                            # The path extension of the generated artifact. \r\n                            # Optional. The default is the 'src' atribute path extension without \r\n                            # the ending '.ittf' string.\r\n                        \r\n                        # Child elements\r\n                        [ modelRefs\r\n\r\n\t\th3 Production element\r\n\t\tp Production elements contain a list of references to previously declared\r\n\t\t\t\\b production lines that must be sequentially executed.\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    production 'production-name'\r\n                        string dest-folder `path`\r\n                        [ lineRefs\r\n\r\n\t\th3 LineRef element\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    line-ref `line-name`\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/wizzimodels.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    \r\n    $\r\n        var art = {\r\n            title: 'Wizzi models'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n\r\n        $include ./introduction\r\n        $include ./generation\r\n        $include ./modelmodule\r\n        $include ./factorymodule\r\n\r\n"
      },
      "t/factorymodule.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi model factory module'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The javascript module `schema-name`-factory.g.js exports the method\r\n\t\t\t\\b 'createLoadModel', that is an HOF that returns the 'loadModel' function.\r\n\t\t\t\\b It must be called passing the 'wizzi' object.\r\n\r\n\t\th4 The `schema-name`-factory.g.js API\r\n\t\tp We have seen already this api in the 'plugin' documentation. \r\n        ittf-panel\r\n            schema js\r\n            ittf\r\n                {\r\n                    func createLoadModel\r\n                        # HOF : returns the loadModel function for the given factory\r\n                        { wizziObject\r\n                            func loadMTree\r\n                                api-ref wizzi-mtree.loader.loadMTree\r\n                                # This function is prepared by the wizzi.WizziFactory instance class\r\n                                # and has repository access functions and load options in its closure.\r\n                            { file\r\n                                api-ref wizzi.util.file\r\n                            { errors\r\n                                api-ref wizzi.errors\r\n                        ...\r\n                        return\r\n                            func loadModel\r\n                                # This returned function require a complex 'loadContext' \r\n                                # parameter with a lot of interfaces passed.\r\n                                # It will be called by the wizzi.WizziFactory instance and\r\n                                # not directly from client code.\r\n                                string ittfDocumentUri\r\n                                    # The path to the primary ittf document from which\r\n                                    # the mTree will be loaded\r\n                                { loadContext\r\n                                    { __productionManager\r\n                                        api-ref wizzi.production.productionManager\r\n                                        { productionContext\r\n                                            api-ref wizzi.production.productionContext\r\n                                            { aclstat\r\n                                                api-ref wizzi.production.aclstat\r\n                                    { __ittfDocumentStore\r\n                                        api-ref wizzi-repo.ittfDocumentStore\r\n                                    { mTreeBuildUpContext\r\n                                        optional\r\n                                        | api-ref wizzi-plugin.wizziModel\r\n                                        | POJO\r\n                                callback\r\n\r\n"
      },
      "t/generation.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi models generation'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Wizzi models are generated calling the 'generateModelTypes' method of an \r\n\t\t\t\\b instance of the wizzi.WizziFactory class, instantiated with the `\r\n            html/docs/to-plugin( wizzi-core )\r\n            span `, \\b\r\n            html/docs/to-plugin( wizzi-js )\r\n            span `, \\b\r\n            html/docs/to-plugin( wizzi-web )\r\n            span ` plugins.\r\n\r\n\t\tittf-panel\r\n            schema api\r\n            title The wizzi.WizziFactory.generateModelTypes method.\r\n            ittf\r\n                ...\r\n                    m generateModelTypes\r\n                        string wfschemaIttfDocumentUri\r\n                            # The full path to the primary ITTF document of the `wfschema` declaration.\r\n                        string outputPackagePath\r\n                            # The full path of the package folder where the generated artifacts will be written \r\n                        string wfschemaName\r\n                            # The schema name, for composing the names of the generated artifacts\r\n                        { mTreeBuildUpContext\r\n                            # An object that will be the evaluation context object\r\n                            # during the mTree processing of the `wfschema` ITTF document\r\n                        callback\r\n                            # Returns error or null"
      },
      "t/modelmodule.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The Wizzi Model module'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp A Wizzi model module contains a javascript class for each\r\n\t\t\t\\b element defined in its 'wfschema' and some standard base\r\n\t\t\t\\b classes.\r\n\r\n\t\th4 Wizzi model classes\r\n\t\ttable\r\n\t\t\ttr\r\n\t\t\t\ttd wzSourceLineInfo\r\n\t\t\t\ttd source map item with source file path, row, col of a node\r\n\t\t\ttr\r\n\t\t\t\ttd {schema-name}Exception\r\n\t\t\t\ttd exception object for this Wizzi Model\r\n\t\t\ttr\r\n\t\t\t\ttd {schema-name}Context\r\n\t\t\t\ttd context object for the methods wzInitialize and wzVerify\r\n\t\t\ttr\r\n\t\t\t\ttd {schema-name}Base\r\n\t\t\t\ttd base class for all element classes\r\n\t\t\ttr\r\n\t\t\t\ttd {element-name}\r\n\t\t\t\ttd one class for each element of the `wfschema`\r\n\r\n\t\tp &nbsp;\r\n        \r\n        ittf-panel\r\n            title The wzSourceLineInfo API\r\n\t\t    ittf \r\n                class wzSourceLineInfo\r\n                    ctor \r\n                        integer row\r\n                            # 1-based row position of the source ittf node\r\n                        integer col\r\n                            # 1-based column position position of the source ittf node\r\n                        string sourceKey\r\n                            # Key to the source ittf document infos stored in the 'loadHistory' object\r\n                            # The 'loadHistory' is a property of the root element\r\n                    m toString\r\n                        { elementInstance?\r\n\r\n\t\tittf-panel\r\n            title The `schema-name`Exception API\r\n            ittf \r\n                class `schema-name`Exception\r\n                    ctor\r\n                        string message\r\n                        { ittfNode\r\n                        { elementInstance\r\n\r\n\t\tittf-panel\r\n            title The `schema-name`Context API\r\n\t\t    ittf \r\n\t\t\t    class `schema-name`Context\r\n\t\t\t\t    boolean schemaIsValid\r\n\t\t\t\t    m addError\r\n\t\t\t\t\t    string message\r\n                        { mTreeNode\r\n                    m verifyEnum\r\n                        string valueType\r\n                        string valueName\r\n                        string value\r\n                        [ allowed\r\n                            string allowedValue\r\n                        { mTreeNode\r\n\r\n\t\tittf-panel\r\n            title The `schema-name`Base API\r\n\t\t    ittf \r\n\t\t\t    class `schema-name`Base\r\n\t\t\t\t\r\n                    string wzName\r\n                    string wzTag\r\n                    [ wzChildren\r\n                    \r\n                    ctor\r\n                        string name\r\n                            # the node-value of the source mTreeNode\r\n                            # that becomes the 'wzName' of the newly created element \r\n                        { sourceLineInfo\r\n                            api-ref wizzimodel.wzSourceLineInfo\r\n                        \r\n                    m wzRoot\r\n                        # Return the model root element instance\r\n                    \r\n                    m wzSourceFilepath\r\n                        # Returns the filepath of an ittf source document given its 'sourceKey'\r\n                        string sourceKey\r\n                    \r\n                    m wzAddChild\r\n                        # Add a child node to the wzChildren collection\r\n                        { elementInstance\r\n\r\n                    m wzLoadToChildColl\r\n                        # Creates a new element instance given the type of its source mTreeNode\r\n                        # Append it to the collection passed as parameter.\r\n                        # Call the loadFromNode method of the newly created element\r\n                        # with the source mTreeNode as argument.\r\n                        { mTreeNode\r\n                            # the mTreeNode that we are loading\r\n                        { type\r\n                            # the javascript class of the Wizzi Model element \r\n                            # that is the type for mTreeNode given its node-name\r\n                        { coll\r\n                            # the collection to which the newly created element should be appended\r\n\r\n                    m wzLoadToChildren\r\n                        # Creates a new element instance given the type of its source mTreeNode\r\n                        # Append it to the wzChildren collection.\r\n                        # Call the loadFromNode method of the newly created element\r\n                        # with the source mTreeNode as argument.\r\n                        { mTreeNode\r\n                        { type\r\n                    \r\n                    m wzLoadOneToOne\r\n                        # Creates a new element instance given the type of its source mTreeNode\r\n                        # Assign it to the `fieldName` property.\r\n                        # Call the loadFromNode method of the newly created element\r\n                        # with the source mTreeNode as argument.\r\n                        { mTreeNode\r\n                        { type\r\n                        string fieldName\r\n                    \r\n                    m error\r\n                        # throw a `schema-name`Exception\r\n                        string message\r\n                        { mTreeNode\r\n\r\n\t\tittf-panel\r\n            title The `element-name` API\r\n            ittf \r\n                class `element-name`\r\n                    \r\n                    m loadChild\r\n                        # Tests if the mTreeNode name is a valid child element or attribute.\r\n                        # If yes call the proper add method and return true.\r\n                        # If no return false.\r\n                        { mTreeNode\r\n                    \r\n                    m loadFromNode\r\n                        # Calls the loadChild method on this element\r\n                        # for each child node of the mTreeNode to load.\r\n                        { mTreeNode\r\n                    \r\n                    m wzInitialize\r\n                        # Initialize the element\r\n                        # Called after the source mTree has been succesfully loaded.\r\n                        param ctx\r\n                            api-ref `schema-name`Context\r\n                    \r\n                    m wzVerify\r\n                        # Verify if the element is valid\r\n                        # Called after the wzInitialize method.\r\n                        { ctx\r\n                            api-ref `schema-name`Context"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi models'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Wizzi models are javascript objects, inspired by Xml document objects,\r\n\t\t\t\\b that can load \\b\r\n            html/docs/to-docs( mTrees )\r\n            span , applying a type to their nodes.\r\n\r\n\t\tp To be loaded in a Wizzi model an mTree node structure must be conformant to the \\b\r\n            html/docs/to-docs( Wizzi schema )\r\n\t\t\tspan \\b of the model.\r\n\r\n\t\t$*\r\n        p A Wizzi schema is declared by an ITTF Document of type `wfschema`,\r\n\t\t\t\\b implemented by the \\b\r\n\t\t\ta `wizzi-core`\r\n\t\t\t\thref ${wzCtx.Github.baseUrl}/packages/wizzi-core\r\n\t\t\tspan \\b plugin. A wizzi schema is a Wizzi model description.\r\n        *$\r\n\r\n\t\tp Wizzi models are software artifacts generated by artifact generators\r\n\t\t\t\\b of the `wizzi-core` plugin. From a 'wfschema' are generated:\r\n\t\t\tul\r\n\t\t\t\tli a Wizzi Model javascript module\r\n\t\t\t\tli a Wizzi model factory javascript module\r\n\t\t\t\tli a JSON documentation file.\r\n\t\t\t\r\n\t\th4 Wizzi model artifact generators and links to source code\r\n\t\ttable \r\n\t\t\tclass pretty-table\r\n\t\t\ttr\r\n\t\t\t\tth artifact\r\n\t\t\t\tth output file name\r\n\t\t\t\tth source code\r\n\t\t\t\t\t@ colspan 2\r\n\t\t\ttr\r\n\t\t\t\ttd wfschema/factory\r\n\t\t\t\ttd {schema-name}-factory.g.js\r\n\t\t\t\ttd\r\n\t\t\t\t\ta \\b    ittf    \\b\r\n\t\t\t\t\t\thref ${wzCtx.Github.wizziCorePath}/.wizzi/ittf/lib/artifacts/wfschema/factory/gen/main.js.ittf\r\n\t\t\t\ttd\r\n\t\t\t\t\ta \\b    javascript    \\b    \r\n\t\t\t\t\t\thref ${wzCtx.Github.wizziCorePath}/dist/lib/artifacts/wfschema/factory/gen/main.js\r\n\t\t\ttr\r\n\t\t\t\ttd wfschema/model\r\n\t\t\t\ttd {schema-name}-model.g.js\r\n\t\t\t\ttd\r\n\t\t\t\t\ta \\b    ittf    \\b\r\n\t\t\t\t\t\thref ${wzCtx.Github.wizziCorePath}/.wizzi/ittf/lib/artifacts/wfschema/model/gen/main.js.ittf\r\n\t\t\t\ttd\r\n\t\t\t\t\ta \\b    javascript    \\b    \r\n\t\t\t\t\t\thref ${wzCtx.Github.wizziCorePath}/dist/lib/artifacts/wfschema/model/gen/main.js\r\n\t\t\ttr\r\n\t\t\t\ttd wfschema/json_docs\r\n\t\t\t\ttd {schema-name}-schema.g.json\r\n\t\t\t\ttd\r\n\t\t\t\t\ta \\b    ittf    \\b\r\n\t\t\t\t\t\thref ${wzCtx.Github.wizziCorePath}/.wizzi/ittf/lib/artifacts/wfschema/json_docs/gen/main.js.ittf\r\n\t\t\t\ttd\r\n\t\t\t\t\ta \\b    javascript    \\b    \r\n\t\t\t\t\t\thref ${wzCtx.Github.wizziCorePath}/dist/lib/artifacts/wfschema/json_docs/gen/main.js\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/wizziplugins.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    $\r\n        var art = {\r\n            title: 'Plugins'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n    \r\n        $include ./introduction\r\n        $include ./architect\r\n        $include ./api\r\n        $include ./core\r\n        $include ./default\r\n        $include ./npm\r\n        $include ./local"
      },
      "t/api.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The wizzi-plugin.FactoryPlugin API'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp This api must be implemented by any Wizzi plugin.\r\n\t\t\r\n\t\tp The methods of the api will be called by the\r\n            html/docs/high-code( wizzi.PluginsManager )\r\n            span instance class\r\n\t\t\t    \\b  on requests received by the \\b\r\n            html/docs/to-docs( wizzi.WizziFactory )\r\n            span \\b instance.\r\n\t\t\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    #\r\n                        # Retrieve a Wizzi Model factory by its schema name\r\n                        # Searching in this wizzi package. No search up in \"node_modules\" folders.\r\n                    m getModelFactory\r\n                        string schemaName\r\n                        ...\r\n                    -\r\n                    #\r\n                        # Retrieve a model transformer by its name\r\n                        # Searching in this wizzi package. No search up in \"node_modules\" folders.\r\n                    m getModelTransformer\r\n                        string transformerName\r\n                        ...\r\n                    -\r\n                    # \r\n                        # Retrieve an artifact generator by its name\r\n                        # Searching in this wizzi package. No search up in \"node_modules\" folders.\r\n                    m getArtifactGenerator\r\n                        string generationName\r\n                    -\r\n                    #\r\n                        # Retrieve a wizzi schema definition in JSON format\r\n                        # Searching in this wizzi package. No search up in \"node_modules\" folders.\r\n                    m getSchemaDefinition\r\n                        string schemaName\r\n\r\n\t\th4 Object returned by the getModelFactory method\r\n\r\n\t\tp This api is requested to the wizzi.PluginsManager from the\r\n\t\t\t\\b  wizzi.WizziFactory when a client needs to load a\r\n            html/docs/to-docs( Wizzi model )\r\n            span . The wizzi.WizziFactory, and not the client, will call the\r\n                html/docs/high-code( createLoadModel )\r\n\t\t\t    span and \r\n                html/docs/high-code( loadModel )\r\n                span functions.\r\n\t\t\r\n\t\tittf-panel\r\n            ittf\r\n                {\r\n                    func createLoadModel\r\n                        # HOF : returns the loadModel function for the given factory\r\n                        { wizziObject\r\n                            func loadMTree\r\n                                api-ref wizzi-mtree.loader.loadMTree\r\n                                # This function is prepared by the wizzi.WizziFactory instance class\r\n                                # and has repository access functions and load options in its closure.\r\n                            { file\r\n                                api-ref wizzi.util.file\r\n                                # TODO this object should be a virtual file system service provided by\r\n                                # store implementations.\r\n                            { errors\r\n                                api-ref wizzi.errors\r\n                        ...\r\n                        return\r\n                            func loadModel\r\n                                # This function require a complex 'loadContext' \r\n                                # parameter.\r\n                                # It will be called by the wizzi.WizziFactory instance and\r\n                                # not directly from client code.\r\n                                string ittfDocumentUri\r\n                                    # The path to the primary ittf document from which\r\n                                    # the mTree will be loaded\r\n                                { loadContext\r\n                                    { __productionManager\r\n                                        api-ref wizzi.production.productionManager\r\n                                        { productionContext\r\n                                            api-ref wizzi.production.productionContext\r\n                                            { aclstat\r\n                                                api-ref wizzi.production.aclstat\r\n                                    { __ittfDocumentStore\r\n                                        api-ref wizzi-repo.ittfDocumentStore\r\n                                    { mTreeBuildUpContext\r\n                                        optional\r\n                                        | api-ref wizzi-plugin.wizziModel\r\n                                        | POJO\r\n                                callback\r\n\r\n\t\th4 Object returned by the getModelTransformer method\r\n        ittf-panel\r\n            ittf\r\n                {\r\n                    func trans\r\n                        { model\r\n                            | api-ref wizzi-plugin.wizziModel\r\n                            | POJO\r\n                        { ctx\r\n                            api-ref wizzi.artifact.genContext\r\n                        callback\r\n\r\n\t\th4 Object returned by the getArtifactGenerator method\r\n        ittf-panel\r\n            ittf\r\n                {\r\n                    func gen\r\n                        { model\r\n                            | api-ref wizzi-plugin.wizziModel\r\n                            | POJO\r\n                        { ctx\r\n                            api-ref wizzi.artifact.genContext\r\n                        callback\r\n\r\n\t\th4 Object returned by the getSchemaDefinition method\r\n\t\tp The object returned is a JSON representation of the\r\n\t\t\t\\b  requested schema. See the\r\n            a `wfjob` JSON schema definition\r\n                href https://github.com/wizzifactory/wizzi/blob/master/packages/wizzi-core/dist/lib/wizzi/models/wfjob-schema.g.json\r\n            span .\r\n\r\n\t\th4 View the code\r\n\t\tp Have a look at how the\r\n            html/docs/high-code( wizzi-plugin.FactoryPlugin )\r\n            span API is implemented in the \\b\r\n\t\t\ta `wizzi-js` plugin\r\n\t\t\t\thref ${wzCtx.Github.baseUrl}/packages/wizzi-js/dist/index.js\r\n            span . See the \\b\r\n\t\t\ta ITTF source\r\n\t\t\t\thref https://github.com/wizzifactory/wizzi/blob/master/packages/wizzi-js/.wizzi/ittf/root/index.js.ittf\r\n            span \\b also.\r\n"
      },
      "t/architect.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Plugin management'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Wizzi uses a class that implements the\r\n            html/docs/high-code( wizzi.PluginsManager )\r\n            span Api to resolve and load plugins.\r\n\t\t\r\n\t\tp Wizzi plugins can be nodejs packages installed locally or globally or can be\r\n\t\t\t\\b folders in packages that make a private use of them.\r\n\t\t\r\n\t\tp Plugins used by the\r\n            html/docs/to-docs( wizzi.WizziFactory )\r\n            span class must be requested at initialization time and cannot be changed. \r\n\t\t\t    \\b To use a different plugin set a new instance of \r\n                \\b the Wizzi factory class must be created.\r\n\r\n\t\tittf-panel\r\n            title ITTF pseudo-code of the wizzi.WizziFactory.initialize method\r\n            ittf\r\n                ...\r\n                    m initialize\r\n                        { options\r\n                            { repo\r\n                                ...\r\n                            { plugins\r\n                                [ items\r\n                                    string pluginNameOrFile\r\n                                string pluginsBaseFolder\r\n                                    default process.cwd()\r\n                            { test\r\n                                ...\r\n\t\tp The \r\n            html/docs/high-code( items )\r\n            span property of the\r\n            html/docs/high-code( options.plugins )\r\n            span object is an array of:\r\n\t\t\tul\r\n\t\t\t\tli Package names, when plugins are contained in npm installed nodejs packages\r\n\t\t\t\tli Relative paths to plugins index module, when plugins are contained\r\n\t\t\t\t\t\\b in private folders.\r\n\t\tspan In the case of relative paths the property\r\n            html/docs/high-code( pluginsBaseFolder )\r\n\t\t\tspan of the\r\n            html/docs/high-code( options.plugins )\r\n            span object must contains the base folder of the plugin.\r\n\r\n\t\th4 View the code\r\n\t\tp Have a look at how the\r\n            html/docs/high-code( wizzi.PluginsManager )\r\n            span is implemented in the \\b\r\n\t\t\ta `wizzi` package\r\n\t\t\t\thref ${wzCtx.Github.baseUrl}/packages/wizzi/dist/lib/services/pluginsManager.js"
      },
      "t/core.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Core plugins',\r\n            id: 'coreplugins'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The Wizzi Factory is a content agnostic data processor and is not aimed at any particular domain.\r\n\t\t\t\\b The plugins are domain specific and content aware. The plugins do the real work.\r\n\r\n\t\tp Anyhow the Wizzi Factory has one core plugin, the `\r\n            html/docs/to-plugin( wizzi-core )\r\n            span ` plugin, that is integrated in its API.\r\n"
      },
      "t/default.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Default plugins',\r\n            id: 'defaultplugins'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Default plugins are starter plugins to help the creation of the firsts domain specific generations.\r\n            \r\n            \r\n        h4 Currently available default plugins\r\n        ul \r\n            li\r\n                html/docs/to-plugin( wizzi-js )\r\n            li\r\n                html/docs/to-plugin( wizzi-web )\r\n            li\r\n                html/docs/to-plugin( wizzi-lab )\r\n\r\n        p The `wizzi-js` and `wizzi-web` plugin at the moment are integrated in the Wizzi API.\r\n\r\n"
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi plugins'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Wizzi is a generation framework\r\n\t\t\t\\b implemented by plugins.\r\n\t\t\t\t\r\n\t\tp Kernel modules themself have a \r\n\t\t\t\\b pluggable architecture. The \\b\r\n            html/docs/to-plugin( wizzi-mtree )\r\n            span \\b package is a plugin\r\n                \\b that implements an api for building \\b\r\n                html/docs/to-docs( tree structures )\r\n                span \\b from \\b\r\n                    html/docs/to-docs( ITTF documents)\r\n                    span .\r\n                        \\b The \\b\r\n                        html/docs/to-plugin( wizzi-repo )\r\n                        span \\b package is a plugin that implements\r\n                            \\b an api for locating and retrieving ITTF documents.\r\n\t\t\t\r\n\t\tp A Wizzi plugin exposes to the Wizzi factory the methods for retrieving its:\r\n\t\tul \r\n\t\t\tli Wizzi schema definitions\r\n\t\t\tli Wizzi models and their factories\r\n\t\t\tli Wizzi model transformers\r\n\t\t\tli Artifact generators\r\n\r\n\t\tp A plugin package must export the\r\n            html/docs/high-code( createFactoryPlugin )\r\n            span method in its\r\n            html/docs/high-code( index.js )\r\n            span file. The\r\n                html/docs/high-code( FactoryPlugin )\r\n                span class instance returned to the caller\r\n\t\t\t        \\b must implement the\r\n                html/docs/high-code( wizzi-plugin.factoryPlugin )\r\n                span \\b API (see below).\r\n\r\n\t\tittf-panel\r\n            title ITTF pseudo-code implementation of the createFactoryPlugin method\r\n            ittf\r\n                set module.exports\r\n                    {\r\n                        ...\r\n                        @ createFactoryPlugin\r\n                            function\r\n                                { wizziPackage\r\n                                { options\r\n                                    [ items\r\n                                        string pluginNameOrFile\r\n                                    string pluginsBaseFolder\r\n                                        default process.cwd()\r\n                                callback\r\n                                ...\r\n                                return\r\n                                    _ callback\r\n                                        @ null\r\n                                        { factoryPlugin\r\n                                            api-ref wizzi-plugin.factoryPlugin\r\n\r\n\r\n\t\tp A Wizzi plugin should have a standard folder structure so that\r\n\t\t    \\b modules can be located given the short public name of\r\n\t\t\t\\b the required item.\r\n\r\n\t\tittf-panel\r\n            title Wizzi plugin standard folder structure\r\n            ittf\r\n                ...\r\n                    {package-name}\r\n                        package.json\r\n                        ...\r\n                        lib\r\n                            artifacts\r\n                                {schema-name}\r\n                                    {artifact-name}\r\n                                        gen\r\n                                            main.js\r\n                                    ...\r\n                                    {transformer-name}\r\n                                        trans\r\n                                            main.js\r\n                                    ...\r\n                                ...\r\n                            utils\r\n                                ...\r\n                            wizzi\r\n                                models\r\n                                    {schema-name}-model.g.js\r\n                                    {schema-name}-factory.g.js\r\n                                    {schema-name}-schema.g.json\r\n                                    ...\r\n                        index.js"
      },
      "t/local.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Local plugins',\r\n            id: 'localplugins'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Local plugins can be located anywhere on the user drive and the plugin folder path is declared to the Wizzi factory\r\n\t\t\t\\b instead of the plugin name.\r\n\r\n        p The \r\n            html/docs/high-code( package.json )\r\n            span file is not required. The plugin interface must be exposed in the\r\n            html/docs/high-code( index.js )\r\n            span file located in the plugin folder.\r\n\r\n\t\tittf-panel\r\n            title Sample Wizzi factory instantiation with local plugins\r\n            ittf\r\n                ...\r\n                    _ wizzi.fsnoaclFactory\r\n                        { plugins\r\n                            [ items\r\n                                @ './packages/wizzi-core/dist/index.js'\r\n                                @ './packages/wizzi-js/dist/index.js'\r\n                                @ './packages/wizzi-web/dist/index.js'\r\n                            @ pluginsBaseFolder\r\n                                _ path.resolve\r\n                                    @ __dirname\r\n                                    @ '..'\r\n                                    @ '..'\r\n                                    @ '..'\r\n                        @ globalContext: globalContext || {}\r\n                        =>\r\n                            param err\r\n                            param wizziFactory\r\n                            if err\r\n                                throw ...\r\n                            _ wizziFactory.loadModelAndGenerateArtifact\r\n                                ...\r\n\r\n"
      },
      "t/npm.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Npm plugins',\r\n            id: 'npmplugins'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n        p Npm plugins are public Wizzi plugins published in the npm registry.\r\n        p They should be prefixed with\r\n            html/docs/high-code( wizzi-plugin- )\r\n            span .\r\n        p Create your first Wizzi plugin using the\r\n            html/docs/to-starter( wizzi-plugin )\r\n            span starter.\r\n\r\n\r\n"
      },
      "t/package.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi factory plugin package'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp ArtifactProductions are packaged in node.js/npm modules\r\n\t\t\t\\b containing:\r\n\t\tul\r\n\t\t\tli WizziSchemas\r\n\t\t\tli WizziModels\r\n\t\t\tli WizziModelFactories\r\n\t\t\tli WizziModelTransformers\r\n\t\t\tli ArtifactGenerators\r\n\r\n\t\tp A Wizzi factory plugin package has this folder structure\r\n\t\tittf-panel\r\n            ittf\r\n                node_modules\r\n                    &lt;package-name&gt\r\n                        lib\r\n                            artifacts\r\n                                &lt;wfschema-name&gt\r\n                                    &lt;artifact-name&gt\r\n                                        gen\r\n                                            ittf\r\n                                                [0..n]&lt;ittfdocument-name&gt.&lt;language-wizzi-schema&gt.ittf\r\n                                            main.js\r\n                                            [0..n]&lt;helper-module&gt.js\r\n                                    &lt;transformer-name&gt\r\n                                        trans\r\n                                            main.js\r\n                                            [0..n]&lt;helper-module&gt.js\r\n                            wizzi\r\n                                models\r\n                                    &lt;wfschema-name&gt;-model.js\r\n                                    &lt;wfschema-name&gt;-factory.js\r\n                                schemas\r\n                                    &lt;wfschema-name&gt;.wfschema.ittf\r\n                        index.js\r\n\r\n\t\tp The index.js module of the package exports the functions:\r\n\t\t\tli getWizziModelFactory(wizziSchemaName) \r\n\t\t\tli getModelTransformer(transformerPath) \r\n\t\t\tli getArtifactGenerator(artifactPath) \r\n\r\n\r\n\t\t\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "docs/wizzischemas.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $global\r\n        var dollar = '$';\r\n    \r\n    $\r\n        var art = {\r\n            title: 'Wizzi schemas'\r\n        };\r\n    \r\n    html/_layouts/docs-layout(&art)\r\n\r\n        $include ./introduction\r\n        $include ./wfschema\r\n        $include ./pseudoschemas\r\n        $include ./json\r\n        $include ./xml\r\n        $include ./text\r\n        $include ./ittf        "
      },
      "t/introduction.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Wizzi schemas'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp A Wizzi schema applies a type definition to the nodes of an \\b\r\n            a mTree\r\n                href ${wzCtx.Params.baseUrl}/docs/mtrees.html\r\n            span \\b and describes the classes of a \\b\r\n            a Wizzi model\r\n                href ${wzCtx.Params.baseUrl}/docs/wizzimodels.html\r\n            span \\b that can load that mTree type.\r\n\r\n        p It is the core modeling tool of the Wizzi factory.\r\n\r\n        p A Wizzi schema has its own Wizzi model, of type `wfschema`, \r\n            \\b implemented by the `\r\n            a wizzi-core\r\n                href ${wzCtx.Github.baseUrl}/packages/wizzi-core/dist\r\n            span ` plugin.\r\n                \\b It is used by the artifacts of the `wizzi-core` plugin to generate the javascript modules\r\n                \\b of the Wizzi model it describes.\r\n\r\n\t\tp Wizzi schemas are ITTF documents of type `wfschema`.\r\n\r\n        ittf-panel\r\n            title Sample 'rdbms' wizzi schema\r\n            ittf\r\n                wfschema rdbms\r\n                    e catalog\r\n                        r table/s\r\n                    e table\r\n                        r column/s\r\n                        r index/es\r\n                    e column\r\n                        a type\r\n                        a caption\r\n                        a defaultValue\r\n                            tag default\r\n                    e index\r\n                        a primary\r\n                            type boolean\r\n                        a unique\r\n                            type boolean\r\n                        r column/s\r\n\r\n        ittf-panel\r\n            title Sample 'rdbms' ITTF document conformant to the above wfschema\r\n            ittf\r\n                rdbms School\r\n                    table Student\r\n                        column Id\r\n                            type integer\r\n                        column Name\r\n                            type string\r\n                        index Student-PK\r\n                            primary true\r\n                            column Id\r\n                    table Course\r\n                        column Id\r\n                            type integer\r\n                        column Title\r\n                            type string\r\n                        index Student-PK\r\n                            primary true\r\n                            column Id                            "
      },
      "t/ittf.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Ittf pseudo schema'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp Using the ittf pseudo schema may increases the plasticity of a generation\r\n\t\t\t\\b process.\r\n\t\t\r\n\t\tp We can load complex untyped ittf documents\r\n\t\t\t\\b into an mTree and obtain as a result an in-memory simple tree structure\r\n\t\t\t\\b of nodes with a name, a value and a childs collection, that can generate\r\n\t\t\t\\b a new ittf document.\r\n\r\n\t\tp We can chain complex mTrees buildups until we get the final ittf document\r\n\t\t\t\\b to load into a Wizzi Model for artifact generation.\r\n\r\n\r\n\r\n"
      },
      "t/json.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Json pseudo schema'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tittf-panel\r\n            schema json\r\n            title Sample json ittf document\r\n            ittf\r\n                {\r\n                    name \"v3-docs\"\r\n                    version \"0.0.1\"\r\n                    description  \"Wizzi factory documentation.\"\r\n                    scripts\r\n                        {\r\n                            test \"mocha tests/**/*.js\"\r\n                            start \"node index\"\r\n                    dependencies\r\n                        {\r\n                            async \"^2.4.0\"\r\n                            json-stringify-safe \"^5.0.1\"\r\n                            ...\r\n                    sampleArray\r\n                        [\r\n                            'alfa'\r\n                            'beta'\r\n\r\n        ul Coding rules\r\n            li The root node must be an open graph.\r\n            li Ittf node names may contain\r\n                ul\r\n                    li Property names.\r\n                    li Open graph for start of object.\r\n                    li Open bracket for start of array.\r\n                    li Array elements primitive values.\r\n            li Ittf node values must contain property values when the node name is \r\n                \\b a property name, nothing in the other cases.\r\n\r\n        p ( It is assumed that one knows\r\n            a json format rules\r\n                href http://www.json.org/\r\n            span )\r\n\r\n\r\n"
      },
      "t/pseudoschemas.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Internal schemas'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp There are some common document types that have great \r\n\t\t\t\\b flexibility for the definition of context data, and \r\n\t\t\t\\b would be usefull to apply to those documents\r\n\t\t\t\\b the templating power of mTrees without the hassle\r\n\t\t\t\\b of a wizzi schema.\r\n\t\tul\r\n\t\t\tli Text\r\n\t\t\tli Xml\r\n\t\t\tli Json\r\n\t\t\tli Ittf itself.\r\n\r\n\t\tp Respecting a few coding rules these type of documents can be built\r\n\t\t\t\\b using the composition and template commands of ittf documents.\r\n\r\n\t\tp The production manager of the wizzi factory recognizes\r\n\t\t\t\\b the following internal schemas\r\n\t\t\tul\r\n\t\t\t\tli text\r\n\t\t\t\tli xml\r\n\t\t\t\tli json\r\n\t\t\t\tli ittf\r\n\r\n\t\tp A wizzi job or a an api call to the wizzi factory may use these schema \r\n\t\t\t\\b names in any place where a wizzi schema can be used.\r\n"
      },
      "t/text.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Text pseudo schema'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp A text ittf document is a bit out of standard. It is\r\n\t\t\t\\b a common text document that can break the rule of\r\n\t\t\t\\b only one root node. It can use any node command or expression\r\n\t\t\t\\b of an ittf document. A preprocessor transforms the text in\r\n\t\t\t\\b a standard ittf tree structure. After the buildup of the mTree\r\n\t\t\t\\b the 'text/document' artifact generator recreates the textual format.\r\n\r\n\t\th4 Example of text mixin for a license file\r\n\t\tittf-panel\r\n            ittf\r\n                ${'$'}params copy, license\r\n                MIT License\r\n                \r\n                Copyright (c) ${'$'}{copy}\r\n                \r\n                ${'$'}if license === 'mit'\r\n                    ${'$'}include mit_license_text\r\n                ${'$'}elif ...\r\n\r\n\t\th4 The mixin transformed by the prepocessor in a standard format\r\n\t\tittf-panel\r\n            ittf\r\n                text\r\n                    ${'$'}params copy, license\r\n                    + MIT License\r\n                    +\r\n                    + Copyright (c) 2015 The Wizzi Team\r\n                    +\r\n                    ${'$'}if license === 'mit'\r\n                        ${'$'}include mit_license_text\r\n                    ${'$'}elif ...\r\n\r\n"
      },
      "t/wfschema.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'The \"wfschema\" schema'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tp The wfschema, implemented by the wizzi-core plugin,\r\n\t\t\t\\b is the meta model of a wizzi schema.\r\n\t\t\t\\b It models a wizzi schema with the same semantic with which\r\n\t\t\t\\b a wizzi schema models a Wizzi Model.\r\n\r\n\t\tp This documentation section has a circularity that may give\r\n\t\t\t\\b an headache. It documents a schema that describe a schema\r\n\t\t\t\\b using the same schema notation of the documented schema.\r\n\t\tp Some hints may help.\r\n\t\tul\r\n\t\t\tli A wizzi schema describes a model in terms of element types, \r\n\t\t\t\t\\b with attributes, and relations between elements. \r\n\t\t\t\t\\b Elements can extend super elements. Relations, that\r\n\t\t\t\t\\b do not have attributes, can be of kind parent-children (one-to-many, the default)\r\n\t\t\t\t\\b or parent-singlechild (one-to-one).\r\n\t\t\tli Elements are described in a flat list. Relations hierarchy and\r\n\t\t\t\t\\b element derivations are inferred from definitions.\r\n\t\t\tli The root element can be declared using the element attribute 'isRoot'. If\r\n\t\t\t\t\\b not declared the root element is the first of the list.\r\n\t\t\tli Elements and attributes may have an optional tag attribute that defines a\r\n\t\t\t\t\\b name alias shorter or with an easier mnemonic. wfschema examples:\r\n\t\t\t\tul\r\n\t\t\t\t\tli 'e' for 'element'\r\n\t\t\t\t\tli 'a' for 'attribute'\r\n\t\t\t\t\tli 'r' for 'relation'\r\n\t\t\tli Node names of mTree nodes simply map to an element or attribute tag (or name,\r\n\t\t\t\t\\b if a tag is not declared).\r\n\r\n\t\tul The wfschema elements are\r\n\t\t\tli wfschema\r\n\t\t\tli exportTo\r\n\t\t\tli require\r\n\t\t\tli element\r\n\t\t\tli attribute, string, boolean, integer, float, date\r\n\t\t\tli relation\r\n\t\t\tli restrict, enum, minLength, maxLength, minValue, maxValue, regexp\r\n\t\t\tli method, function\r\n\t\t\tli parameter\r\n\r\n\t\th3 wfschema element\r\n\t\tp The root element of a 'wfschema'.\r\n\t\tittf-panel\r\n            ittf\r\n                e wfschema `name`\r\n                    r require/s\r\n                    r exportTo/s\r\n                    r element/s\r\n\r\n\t\th3 exportTo element\r\n\t\tp An exportTo element causes the insertion in the Wizzi Model classes\r\n\t\t\t\\b of the prototype functions for exporting the tree data structure of the model in \r\n\t\t\t\\b the requested format\r\n\t\t\tul\r\n\t\t\t\tli toJson()\r\n\t\t\t\tli toXml()\r\n\t\tp The entire Wizzi Model can be exported calling this methods on the root element.\r\n\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    e export-to [json|xml]\r\n\r\n\t\th3 require element\r\n\t\tp A Wizzi Model can contain user defined methods and functions,\r\n\t\t\t\\b that could need to import objects from other modules. This element \r\n\t\t\t\\b allow to insert require statements in the generated Wizzi Model module.\r\n\t\tittf-panel\r\n            ittf\r\n                e require `import-name`\r\n                    string declareVar `name`\r\n                        tag declare-var\r\n                        optional\r\n                        default `import-name`\r\n                    string invoke `invoke-string`\r\n                        optional\r\n                    string kind [module]\r\n                        # At now we have only one kind, and this attribute is superflous.\r\n                        # Other kinds could be added in the future.\r\n                        optional\r\n                        default module\r\n\t\t\r\n\t\tp The generated statement is built in this way:\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\tvar `declareVar` = require('`import-name`')[`invoke`]\r\n\t\t\r\n\t\tp Example\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    require wizzi-utils\r\n                        declare-var verify\r\n                        invoke .verify\r\n                    generates:\r\n                        var verify = require('wizzi-utils').verify\r\n\t\t\r\n\t\th3 Element element\r\n\t\tp Describes an element type of the schema.\r\n\t\tittf-panel\r\n            ittf\r\n                e element `name` [: `super-element-name`]\r\n                    tag e\r\n                    string super `super-element-name`\r\n                    string tag `tag`\r\n                    string xmlTag `tag`\r\n                        tag xml-tag\r\n                    boolean isAbstract\r\n                        tag is-abstract\r\n                        default-when-declared true\r\n                    boolean isRoot\r\n                        tag is-root\r\n                        default-when-declared true\r\n                    boolean nameIsRequired\r\n                        tag name-is-required\r\n                        default-when-declared true\r\n                    boolean addToChildren\r\n                        tag add-to-children\r\n                        default-when-declared true\r\n                    r attribute/s\r\n                    r relation/s\r\n                    r method/s\r\n\t\r\n\t\th3 Relation element\r\n\t\tittf-panel\r\n            ittf\r\n                e relation `related-element-name`[-`plural-suffix-a`]/`plural-suffix-b`\r\n                    # Examples\r\n                    #   r column/s (element: column, collection: columns)   \r\n                    #   r propert-y/ies (element: property, collection: properties)\r\n                    tag r\r\n                    boolean oneToOne\r\n                        tag one-to-one\r\n                        default-when-declared true\r\n                    boolean noGet\r\n                        tag no-get\r\n                        default-when-declared true\r\n\t\t\r\n\t\tp Example:\r\n\t\tittf-panel\r\n            ittf\r\n                ...\r\n                    e table : dbitem\r\n                        r column/s\r\n                        r propert-y/ies\r\n                        r displayLayout\r\n                            one-to-one\r\n\t\tp related-element-name plus the eventual plural-suffix-a must give the name of an\r\n\t\t\t\\b element defined in the schema (that is the related element); in the\r\n\t\t\t\\b example: column, property, displayLayout.\r\n\r\n\t\th3 attribute element\r\n\t\tp Describes an attribute of an element \r\n\t\tittf-panel\r\n            ittf\r\n                e attribute `name`\r\n                    tag a\r\n                    string tag `tag`\r\n                    string xmlTag `tag`\r\n                        tag xml-tag\r\n                    string type [string|integer|float|boolean|date]\r\n                        default string\r\n                    string default `default-value`\r\n                    string defaultWhenDeclared `default-value` \r\n                        tag default-when-declared\r\n                    boolean isDatatype\r\n                        tag is-datatype\r\n                        default-when-declared true\r\n                    boolean isRequired\r\n                        tag is-required\r\n                        default-when-declared true\r\n                    r restrict/s\r\n\r\n\t\th3 string element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te string `attribut-name` : attribute\r\n\r\n\t\th3 boolean element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te boolean `attribut-name` : attribute\r\n\r\n\t\th3 integer element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te integer `attribut-name` : attribute\r\n\r\n\t\th3 float element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te float `attribut-name` : attribute\r\n\r\n\t\th3 date element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te date `attribut-name` : attribute\r\n\r\n\t\th3 restrict element\r\n    \tittf-panel\r\n            ittf\r\n                e restrict\r\n                    is-abstract\r\n\r\n\t\th3 enum element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te enum `enum-value` : restrict \r\n\r\n\t\th3 maxLength element\r\n\t\tittf-panel\r\n            ittf\r\n                e maxLength `value` : restrict \r\n                    tag max-length\r\n\r\n\t\th3 minLength element\r\n\t\tittf-panel\r\n            ittf\r\n                e minLength `value` : restrict \r\n                    tag min-length\r\n\r\n\t\th3 maxValue element\r\n\t\tittf-panel\r\n            ittf\r\n                e maxValue `value` : restrict \r\n                    tag max-value\r\n\r\n\t\th3 minValue element\r\n        ittf-panel\r\n            ittf\r\n                e minValue `value` : restrict \r\n                    tag min-value\r\n\r\n\t\th3 regexp element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te regexp `value` : restrict \r\n\r\n\t\th3 method element\r\n\t\tp Declares a method that will be added to the element class.\r\n\t\t\t\\b A method can access and manipulate the entire \r\n\t\t\t\\b Wizzi Model, having access to the 'this.wzRoot()' method of the\r\n\t\t\t\\b `schema-name`Base class.\r\n\t\tittf-panel\r\n            ittf\r\n                e method `name`\r\n                    tag m\r\n                    r param/s\r\n                    r statement/s\r\n\t\t\r\n\t\th3 param element\r\n\t\tittf-panel\r\n            ittf\r\n    \t\t\te param `name`\r\n\t\t\r\n\t\th3 statement element\r\n\t\tp The statement element uses a subset of the schema 'js'\r\n\t\t\t\\b implemented by the plugin wizzi-js.\r\n\r\n\t\th3 function element\r\n\t\tp Declares a method that will be added to the module\r\n\t\t\t\\b and will be a private function for methods of the model instances.\r\n\t\tittf-panel\r\n            ittf\r\n                e function `name`\r\n                    tag m\r\n                    r param/s\r\n                    r statement/s\r\n\r\n"
      },
      "t/xml.html.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    $\r\n        var sect = {\r\n            title: 'Xml pseudo schema'\r\n        };\r\n\r\n    html/docs/section(&sect)\r\n\r\n\t\tittf-panel\r\n            title Sample xml ittf document\r\n            ittf\r\n                profile\r\n                    @ name ${'$'}{user.name}\r\n                    @ age ${'$'}{user.age}\r\n                    friends\r\n                        ${'$'}foreach friend in user.friends\r\n\r\n                            friend\r\n                                @ name ${'$'}{friend.name}\r\n                                @ age ${'$'}{friend.age}\r\n                    address\r\n                        @ street ${'$'}{user.street}\r\n                        @ city ${'$'}{user.city}\r\n\t\t\r\n\t\tul Rules\r\n\t\t\tli Ittf node names may contain\r\n\t\t\t\tul\r\n\t\t\t\t\tli element names for elements\r\n\t\t\t\t\tli simbol @ for attributes\r\n\t\t\tli Ittf node values may contain\r\n\t\t\t\tul\r\n\t\t\t\t\tli nothing for elements\r\n\t\t\t\t\tli name and value separated by a blank for attributes\r\n\r\n\t\tp ( It is assumed that one knows\r\n\t\t\ta xml format rules\r\n\t\t\t\thref https://google.github.io/styleguide/xmlstyle.html\r\n\t\t\tspan )\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "home.css",
    "mainIttf": "index.css.ittf",
    "wizziSchema": "css",
    "packiFiles": {
      "index.css.ittf": {
        "type": "CODE",
        "contents": "css\r\n\r\n    $include css/_layouts/page-layout\r\n    \r\n    $include css/home/header/index\r\n    $include css/home/content/index\r\n    $include css/home/footer/index"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"css\"\n            path \"stfnbssl/css\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "home.html",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $\r\n        var opt = {\r\n            mainCss: '/~-/home.css?context=mpage;home.model',\r\n            mainJs: '/~-/home.js?context=mpage;home.model',\r\n        }\r\n\r\n    html/_layouts/page-layout(&opt)\r\n        $include html/home/header/index\r\n        $include html/home/content/index\r\n        $include html/home/footer/index"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "home.js",
    "mainIttf": "index.js.ittf",
    "wizziSchema": "js",
    "packiFiles": {
      "index.js.ittf": {
        "type": "CODE",
        "contents": "module\r\n    kind react\r\n    \r\n    $include _js/wz/core\r\n\r\n    function m1_reset\r\n        $foreach menuGroup in mpage.Nav1.menuGroups\r\n            $foreach menu in menuGroup.menus\r\n                $if menu.panels && menu.panels.length > 0\r\n                    _ wz.removeClass\r\n                        @ '#${menu.title}-dropdown'\r\n                        @ 'css-1ropak3'\r\n                    _ wz.addClass\r\n                        @ '#${menu.title}-dropdown'\r\n                        @ 'css-1sg6jvm'\r\n\r\n    function eco_reset\r\n        $foreach content in mpage.Main.contents\r\n            $foreach panel in content.panels\r\n                $if panel.kind == 'eco'\r\n                    $foreach item in panel.items\r\n                        _ wz.removeClass\r\n                            @ '#eco${item.title}-dropdown'\r\n                            @ 'css-17502ce'\r\n                        _ wz.addClass\r\n                            @ '#eco${item.title}-dropdown'\r\n                            @ 'css-1ds30p3'\r\n\r\n    _ wz.contentLoaded\r\n        =>\r\n            log 'contentLoaded'\r\n            $foreach menuGroup in mpage.Nav1.menuGroups\r\n                $foreach menu in menuGroup.menus\r\n                    $if menu.panels && menu.panels.length > 0            \r\n                        _ wz.click\r\n                            @ '#${menu.title}'\r\n                            =>\r\n                                param ev\r\n                                log \"Clicked ${menu.title}\"\r\n                                _ m1_reset\r\n                                _ eco_reset\r\n                                _ wz.addClass\r\n                                    @ '#${menu.title}-dropdown'\r\n                                    @ 'css-1ropak3'\r\n                                _ wz.removeClass\r\n                                    @ '#${menu.title}-dropdown'\r\n                                    @ 'css-1sg6jvm'\r\n                                _ ev.stopPropagation();\r\n\r\n            $foreach content in mpage.Main.contents\r\n                $foreach panel in content.panels\r\n                    $if panel.kind == 'eco'\r\n                        $foreach item in panel.items\r\n                            _ wz.click\r\n                                @ '#eco${item.title}'\r\n                                =>\r\n                                    param ev\r\n                                    log \"Clicked ${item.title}\"\r\n                                    _ eco_reset\r\n                                    _ wz.removeClass\r\n                                        @ '#eco${item.title}-dropdown'\r\n                                        @ 'css-1ds30p3'                                        \r\n                                    _ wz.addClass\r\n                                        @ '#eco${item.title}-dropdown'\r\n                                        @ 'css-17502ce'\r\n                                    _ ev.stopPropagation();\r\n                            $if item_index == 0\r\n                                _ wz.removeClass\r\n                                    @ '#eco${item.title}-dropdown'\r\n                                    @ 'css-1ds30p3'                                        \r\n                                _ wz.addClass\r\n                                    @ '#eco${item.title}-dropdown'\r\n                                    @ 'css-17502ce'\r\n\r\n\r\n            _ wz.click\r\n                @ document.body\r\n                =>\r\n                    log \"Clicked document.body\"\r\n                    _ m1_reset\r\n\r\n"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"js\"\n            path \"stfnbssl/js\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "home.model",
    "mainIttf": "home.json.ittf",
    "wizziSchema": "json",
    "packiFiles": {
      "home.json.ittf": {
        "type": "CODE",
        "contents": "{\r\n    $\r\n        var ctx = {\r\n            page: 'home'\r\n        }\r\n\r\n    json/common/styles( &ctx )\r\n    name \"home\"\r\n    $include home/header\r\n    $include home/content\r\n    $include home/footer\r\n    "
      },
      "t/home/content.json.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    { Main\r\n        [ contents\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"splash\"\r\n                        scream1 \"One Machinery\"\r\n                        subscream1 \"Many productions\"\r\n                        scream2 \"Create productions of components, websites and apps\"\r\n                        subscream2 \"harness the power of a pluggable, model driven, generation system\"\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"grid\"\r\n                        [ items\r\n                            {\r\n                                title \"Create factories\"\r\n                                subtitle \"Wizzi Open Source\"\r\n                                text \"Free, open source framework for creating fast, powerful artifacts productions.\"\r\n                                { button\r\n                                    label \"Start the tutorial\"\r\n                                    href \"${wzCtx.Params.baseUrl}/docs\"\r\n                            {\r\n                                title \"Deploy\"\r\n                                subtitle \"Wizzi Cloud\"\r\n                                text \"The best place to build and host your Wizzi productions.\"\r\n                                { button\r\n                                    label \"Sign up for free\"\r\n                                    href \"/dashboard/signup\"\r\n                            {\r\n                                title \"Outstand\"\r\n                                subtitle \"Wizzi Janitory\"\r\n                                text \"Get professional support and services to step up your Wizzi productions.\"\r\n                                { button\r\n                                    label \"How we help\"\r\n                                    href \"/janitory\"\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"getstarted\"\r\n                        title \"Curious yet?\"\r\n                        subtitle \"It only takes a few minutes to get up and running!\"\r\n                        { button\r\n                            label \"Get started\"\r\n                            href \"/janitory\"\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"eco\"\r\n                        title \"Explore the Wizzi Ecosystem\"\r\n                        subtitle \"More than just an artifact generator, Wizzi has all the tools for building the modern web: Plugins for seamlessly integrating productions, Schemas for effortless configuration, and Jobs for automating common production chores.\"\r\n                        [ items\r\n                            {\r\n                                title \"Plugins\"\r\n                                [ paragraphs\r\n                                    \"Plugins are packages that compose a Wizzi factory. They can expose Schemas, transform Models, and generate Artifacts. Anything you can imagine — from programming languages to data managment, to solutions as CMSs and e-commerce — can have a Wizzi plugin for seamless integration of productions.\"\r\n                                { button\r\n                                    label \"Browse Plugins\"\r\n                                    href \"/plugins\"\r\n                            {\r\n                                title \"Schemas\"\r\n                                [ paragraphs\r\n                                    \"Schemas ... .\"\r\n                                { button\r\n                                    label \"Browse Schemas\"\r\n                                    href \"/plugins?=wizzi-schema\"\r\n                            {\r\n                                title \"Jobs\"\r\n                                small \"Experimental\"\r\n                                [ paragraphs\r\n                                    \"Wizzi Jobs automate common production tasks, orchestrating models build up and transformations, cascading productions, testing and deployment.\"\r\n                                { button\r\n                                    label \"Browse Recipes\"\r\n                                    href \"${wzCtx.Params.baseUrl}/docs/recipes\"                                \r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"cloud\"\r\n                        { head\r\n                            text \" Wizzi Cloud is a custom-architected Cloud infrastructure for collaborating \r\n                                \\b on Wizzi schemas and productions built with the Wizzi open source framework.\"\r\n                        { start\r\n                            label \"Start building component productions on Wizzi Cloud\"\r\n                            href \"/dashboard/signup\"\r\n                        [ items\r\n                            {\r\n                                title \"Collaborative schema design\"\r\n                                text \"....\"\r\n                            {\r\n                                title \"The Cloud is the new IDE\"\r\n                                text \"Create artifact generators and production jobs for your components in a Cloud hosted Wizzi IDE\"\r\n                            {\r\n                                title \"Continuos integration\"\r\n                                text \"....\"\r\n                            {\r\n                                title \"Real-time Previews\"\r\n                                text \"....\"\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"comunity\"\r\n\r\n\r\n"
      },
      "t/home/footer.json.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    { Footer\r\n        [ contents\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"comunity\"\r\n                        { comunity\r\n                            line1 \"Wizzi is powered by the amazing work\"\r\n                            line2 \"of a single man.\"\r\n                        { ns\r\n                            { edit\r\n                                id \"emailField\"\r\n                                name \"email\"\r\n                                label \"Subscribe to our newsletter\"\r\n                                placeholder \"you@example.xyz\"\r\n                            { button\r\n                                label \"Subscribe\"\r\n            {\r\n                kind \"row\"\r\n                [ panels\r\n                    {\r\n                        kind \"nav\"\r\n                        [ groups\r\n                            {\r\n                                title \"Open Source\"\r\n                                [ items\r\n                                    {\r\n                                        label \"Documentation\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/\"\r\n                                    {\r\n                                        label \"Quick Start\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/quick-start/\"\r\n                                    {\r\n                                        label \"Tutorial\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/tutorial/\"\r\n                                    {\r\n                                        label \"How-To Guides\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/how-to/\"\r\n                                    {\r\n                                        label \"Reference Guides\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/reference/\"\r\n                                    {\r\n                                        label \"Conceptual Guides\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/conceptual/\"\r\n                                    {\r\n                                        label \"Wizzi CLI\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/reference/wizzi-cli/\"\r\n                                    {\r\n                                        label \"Github\"\r\n                                        href \"https://github.com/stfnbssl/wizzi\"\r\n                                        svg \"github\"\r\n                            {\r\n                                title \"Wizzi Cloud\"\r\n                                [ items\r\n                                    {\r\n                                        label \"Why Wizzi Cloud?\"\r\n                                        href \"/cloud/\"\r\n                                    {\r\n                                        label \"Support\"\r\n                                        href \"/support/\"\r\n                                    {\r\n                                        label \"Integrations\"\r\n                                        href \"/integrations/\"\r\n                                    {\r\n                                        label \"Guides\"\r\n                                        href \"/guides/\"\r\n                                    {\r\n                                        label \"Pricing\"\r\n                                        href \"/pricing/\"\r\n                                    {\r\n                                        label \"Log in\"\r\n                                        href \"//dashboard\"\r\n                                        svg \"come-in\"\r\n                            {\r\n                                title \"Features\"\r\n                                [ items\r\n                                    {\r\n                                        label \"Comparison\"\r\n                                        href \"/features/\"\r\n                                    {\r\n                                        label \"Plugins\"\r\n                                        href \"/plugins/\"\r\n                                    {\r\n                                        label \"Schemas\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/schemas/\"\r\n                                    {\r\n                                        label \"Jobs\"\r\n                                        href \"${wzCtx.Params.baseUrl}/docs/jobs/\"\r\n                                    {\r\n                                        label \"Starters\"\r\n                                        href \"/starters/\"\r\n                            {\r\n                                title \"Community\"\r\n                                [ items\r\n                                    {\r\n                                        label \"Contributing\"\r\n                                        href \"/contributing/\"\r\n                                    {\r\n                                        label \"Code of Conduct\"\r\n                                        href \"/contributing/code-of-conduct/\"\r\n                                    {\r\n                                        label \"Style Guide\"\r\n                                        href \"/contributing/wizzi-style-guide/\"\r\n                                    {\r\n                                        label \"Translations\"\r\n                                        href \"/contributing/translation/\"\r\n                            {\r\n                                title \"Events\"\r\n                                [ items\r\n                                    {\r\n                                        label \"Webinars\"\r\n                                        href \"/resources/webinars/\"\r\n                                    {\r\n                                        label \"Wizzi Days\"\r\n                                        href \"/resources/wizzi-days/\"\r\n                            {\r\n                                title \"Company\"\r\n                                [ items\r\n                                    {\r\n                                        label \"About us\"\r\n                                        href \"/about/\"\r\n                                    {\r\n                                        label \"Contact Us\"\r\n                                        href \"/contact-us/\"\r\n                                    {\r\n                                        label \"Careers\"\r\n                                        href \"/careers/\"\r\n                                    {\r\n                                        label \"Partners\"\r\n                                        href \"/partners/\""
      },
      "t/home/header.json.ittf": {
        "type": "CODE",
        "contents": "$group\r\n    { Banner\r\n        { promotion\r\n            title \"The Future Web is Here:\"\r\n            subtitle \"Join us at WizziConf!&nbsp;\"\r\n            { link\r\n                label \"Register for free now.\"\r\n                href \"https://wizziconf.com/\"\r\n        [ items\r\n            {\r\n                label \"Support\"\r\n                href \"/support/\"\r\n            {\r\n                label \"Contact\"\r\n                href \"/contact/\"\r\n            {\r\n                label \"Github\"\r\n                href \"https://github.com/stfnbssl/wizzi\"\r\n            {\r\n                label \"Login\"\r\n                href \"/login/\"\r\n    { Nav1\r\n        [ menuGroups\r\n            {\r\n                [ menus\r\n                    {\r\n                        title \"Docs\"\r\n                        [ panels\r\n                            {\r\n                                kind \"grid\"\r\n                                title \"Documentation\"\r\n                                subtitle \"Start building with Wizzi and its ecosystem tools\"\r\n                                [ griditems\r\n                                    {\r\n                                        kind \"list\"\r\n                                        title 'Get started'\r\n                                        [ items\r\n                                            {\r\n                                                label \"Documentation\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/concepts.html\"\r\n                                            {\r\n                                                label \"Quick Start\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/quick-start/\"\r\n                                            {\r\n                                                label \"Tutorial\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/tutorial/\"\r\n                                            {\r\n                                                label \"Cheat Sheet\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/cheatsheets/cs-ittf.html\"\r\n                                    { \r\n                                        kind \"list\"\r\n                                        title \"Guides\"\r\n                                        [ items\r\n                                            {\r\n                                                label \"How-To Guides\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/how-to/\"\r\n                                            {\r\n                                                label \"Reference Guides\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/reference/\"\r\n                                            {\r\n                                                label \"Conceptual Guides\"\r\n                                                href \"${wzCtx.Params.baseUrl}/docs/conceptual/\"\r\n                    {\r\n                        title \"Plugins\"\r\n                        href \"/plugins/\"\r\n                    {\r\n                        title \"Features\"\r\n                        [ panels\r\n                            {\r\n                                kind \"grid\"\r\n                                title \"Feature Comparison\"\r\n                                subtitle \"See how Wizzi compares to other JAMstack frameworks and traditional content management systems (CMS)\"\r\n\r\n\r\n                                $\r\n                                    var cgs = ['Alpha','Beta'];\r\n\r\n                                [ griditems\r\n                                    $foreach cg in cgs\r\n                                        {\r\n                                            title \"Group ${cg}\"\r\n                                            kind \"list\"\r\n                                            [ items\r\n                                                $\r\n                                                    var cis = ['Sigma','Tau'];\r\n\r\n                                                $foreach ci in cis\r\n                                                    { item\r\n                                                        label \"Item ${cg} ${ci}\"\r\n                                                        href \"/item${cg}${ci}/\"\r\n\r\n                            {\r\n                                kind \"subgrid\"\r\n                                title \"Plugins\"\r\n                                subtitle \"RSS feed? SEO? Shopify integration? There’s a plugin for that!\"\r\n                                $\r\n                                    var cgs = ['Gamma','Lambda'];\r\n\r\n                                [ griditems\r\n                                    $foreach cg in cgs\r\n                                        {\r\n                                            title \"Group ${cg}\"\r\n                                            [ items\r\n                                                $\r\n                                                    var cis = ['Delta'];\r\n\r\n                                                $foreach ci in cis\r\n                                                    { item\r\n                                                        label \"Item ${cg} ${ci}\"\r\n                                                        href \"/item${cg}${ci}/\"\r\n                                        \r\n                    {\r\n                        title \"Productions\"\r\n                        [ panels\r\n                            {\r\n                                kind \"grid\"\r\n                                title \"Productions\"\r\n                                subtitle \"Explore the many ways to use Wizzi:\"\r\n                                [ griditems\r\n                                    {\r\n                                        kind \"list\"\r\n                                        title \"By Industry\"\r\n                                        [ items\r\n                                            {\r\n                                                label \"Software &amp;SaaS\"\r\n                                                href \"/use-cases/software-saas/\"\r\n                                            {\r\n                                                label \"Consumer Finance &amp;Insurance\"\r\n                                                href \"/use-cases/finance-insurance/\"\r\n                                            {\r\n                                                label \"E-commerce\"\r\n                                                href \"/use-cases/e-commerce/\"\r\n                                            {\r\n                                                label \"Public Interest Organizations\"\r\n                                                href \"/use-cases/public-interest-organization/\"\r\n                                            {\r\n                                                label \"Content &amp;Media\"\r\n                                                href \"/use-cases/content-media/\"\r\n                                    {\r\n                                        kind \"list\"\r\n                                        title \"By Technology\"\r\n                                        [ items\r\n                                            {\r\n                                                label \"Wordpress\"\r\n                                                href \"/use-cases/wordpress/\"\r\n                                                svg \"wordpress\"\r\n                                            {\r\n                                                label \"Contentful\"\r\n                                                href \"/use-cases/contentful/\"\r\n                                                svg \"contentful\"\r\n                                            {\r\n                                                label \"Drupal\"\r\n                                                href \"/use-cases/drupal/\"\r\n                                                svg \"drupal\"\r\n                                            {\r\n                                                label \"Shopify\"\r\n                                                href \"/use-cases/shopify/\"\r\n                                                svg \"shopify\"\r\n                            {\r\n                                kind \"list\"\r\n                                title \"Webinars\"\r\n                                subtitle \"Learn more with webinars on demand\"\r\n                                [ listitems\r\n                                    {\r\n                                        title \"Latest webinars\"\r\n                                        [ items\r\n                                            {\r\n                                                label \"This Changes Everything: Incremental Builds in Wizzi\"\r\n                                                href \"/incrbuilds-webinar/\"\r\n                                            {\r\n                                                label \"Matter Supply: Just Do It 2.0\"\r\n                                                href \"/matter-supply-webinar\"\r\n\r\n                    {\r\n                        title \"Community\"\r\n                        [ panels\r\n                            {\r\n                                kind \"grid\"\r\n                                title \"Community\"\r\n                                subtitle \"We’re so glad you want to help! Here’s how to get started:\"\r\n                                [ griditems\r\n                                    {\r\n                                        kind \"list\"\r\n                                        title 'Contributing'\r\n                                        [ items\r\n                                            {\r\n                                                label \"Why contribute\"\r\n                                                href \"/contributing/\"\r\n                                            {\r\n                                                label \"How to contribute\"\r\n                                                href \"/contributing/how-to-contribute/\"\r\n                                    {\r\n                                        kind \"list\"\r\n                                        [ items\r\n                                            {\r\n                                                label \"Code of Conduct\"\r\n                                                href \"/contributing/code-of-conduct/\"\r\n                                            {\r\n                                                label \"Style Guide\"\r\n                                                href \"/contributing/gatsby-style-guide/\"\r\n                            {\r\n                                kind \"bar\"\r\n                                [ items\r\n                                    {\r\n                                        label \"Twitch\"\r\n                                        href \"https://www.twitch.tv/gatsbyjs\"\r\n                                        { icon\r\n                                            svg \"twitch-svg\"\r\n                                    {\r\n                                        label \"Discord\"\r\n                                        href \"https://gatsby.dev/discord\"\r\n                                        { icon\r\n                                            svg \"discors-svg\"\r\n                                    {\r\n                                        label \"Youtube\"\r\n                                        href \"https://www.youtube.com/gatsbyjs\"\r\n                                        { icon\r\n                                            svg \"youtube-svg\"\r\n                            {\r\n                                kind \"singleitem\"\r\n                                title \"Showcase\"\r\n                                subtitle \"Check out what the community is building\"\r\n                                href \"/showcase/\"\r\n                            {\r\n                                kind \"singleitem\"\r\n                                title \"WizziConf\"\r\n                                subtitle \"Join us for WizziConf - March 2-3, 2021!\"\r\n                                href \"/wizziconf/\"\r\n                    {\r\n                        title \"Blog\"\r\n                        href \"/blog/\"\r\n            {\r\n                [ menus\r\n                    {\r\n                        title \"Wizzi Cloud\"\r\n                        [ panels\r\n                    {\r\n                        kind \"button\"\r\n                        title \"Get started\"\r\n                        href \"/get-started/\"\r\n\r\n\r\n$*\r\nli \r\n    class css-uh3ivc\r\n    ul \r\n        class css-qg23q3\r\n        li \r\n            class css-4is18n\r\n            . css-szvnas\r\n                h3 Gatsby Cloud\r\n                    class css-1enu353\r\n                button Gatsby Cloud\r\n                    type button\r\n                    aria-expanded false\r\n                    aria-controls Gatsby Cloud-dropdown\r\n                    class css-3q8779\r\n                    svg \r\n                        stroke currentColor\r\n                        fill currentColor\r\n                        stroke-width 0\r\n                        viewBox 0 0 24 24\r\n                        height 1em\r\n                        width 1em\r\n                        xmlns http://www.w3.org/2000/svg\r\n                        path \r\n                            d M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\r\n                . css-1sg6jvm\r\n                    id Gatsby-Cloud-dropdown\r\n                    ul \r\n                        class css-y86b6k\r\n                        li \r\n                            class css-1v43wp4\r\n                            a \r\n                                class css-1fmrpt2\r\n                                href /cloud/\r\n                                svg \r\n                                    width 32\r\n                                    height 32\r\n                                    viewBox 0 0 32 32\r\n                                    fill none\r\n                                    xmlns http://www.w3.org/2000/svg\r\n                                    class css-1ppz169\r\n                                    circle \r\n                                        cx 10.3097\r\n                                        cy 11.8282\r\n                                        r 3.37661\r\n                                        fill #159CF4\r\n                                    circle \r\n                                        cx 9.60344\r\n                                        cy 16.812\r\n                                        r 3.01799\r\n                                        fill white\r\n                                    circle \r\n                                        cx 17.2403\r\n                                        cy 14.6116\r\n                                        r 5.38333\r\n                                        fill white\r\n                                    rect \r\n                                        x 9.60352\r\n                                        y 16.8303\r\n                                        width 8.20622\r\n                                        height 3.00042\r\n                                        fill white\r\n                                    circle \r\n                                        cx 11.6583\r\n                                        cy 14.2931\r\n                                        r 0.99225\r\n                                        fill white\r\n                                    path \r\n                                        fill-rule evenodd\r\n                                        clip-rule evenodd\r\n                                        d M13.6316 21.0374L9.99109 21.0374C7.63289 21.0374 5.72119 19.1257 5.72119 16.7675C5.72119 14.4093 7.63289 12.4976 9.99109 12.4976C10.3399 12.4976 10.6789 12.5394 11.0034 12.6183C11.8605 10.0685 14.2702 8.23175 17.1089 8.23175C19.7951 8.23175 22.0972 9.87651 23.063 12.2139C22.5394 12.051 21.991 11.9445 21.4248 11.9015C20.5178 10.525 18.9583 9.6165 17.1865 9.6165C14.6053 9.6165 12.6652 11.5679 12.4055 13.2315C12.347 13.6064 12.2024 13.8523 11.9543 14.1151C11.7507 14.2484 11.5943 14.2797 11.4101 14.2484C11.285 14.2271 11.179 14.1826 11.0608 14.1329C10.8293 14.0356 10.5511 13.9187 9.9909 13.9187C8.4205 13.9187 7.14744 15.1917 7.14744 16.7621C7.14744 18.3325 8.4205 19.6056 9.9909 19.6056H13.4346C13.4541 20.0966 13.5213 20.5754 13.6316 21.0374Z\r\n                                        fill url(#a095db34-56ab-4caf-9e1a-9513af4b0311)\r\n                                    path \r\n                                        d M13.3855 19.3366C13.3855 23.4618 16.7296 26.806 20.8548 26.806C24.9801 26.806 28.3242 23.4618 28.3242 19.3366C28.3242 15.2114 24.9801 11.8672 20.8548 11.8672C16.7296 11.8672 13.3855 15.2114 13.3855 19.3366Z\r\n                                        fill white\r\n                                    circle \r\n                                        cx 11.2579\r\n                                        cy 6.14066\r\n                                        r 0.947821\r\n                                        fill #159BF3\r\n                                    circle \r\n                                        cx 4.62311\r\n                                        cy 11.8276\r\n                                        r 0.947821\r\n                                        fill #159BF3\r\n                                    circle \r\n                                        cx 6.51911\r\n                                        cy 7.09022\r\n                                        r 0.947821\r\n                                        fill #159BF3\r\n                                    path \r\n                                        d M25.6394 19.426H22.6394V20.2831H24.6965C24.3965 21.5688 23.4536 22.6403 22.2108 23.0688L17.2822 18.1403C17.7965 16.6403 19.2536 15.5688 20.9251 15.5688C22.2108 15.5688 23.3679 16.2117 24.0965 17.1974L24.7394 16.6403C23.8822 15.4831 22.5108 14.7117 20.9251 14.7117C18.6965 14.7117 16.8108 16.2974 16.3394 18.3974L21.9965 24.0546C24.0536 23.5403 25.6394 21.6546 25.6394 19.426Z\r\n                                        fill white\r\n                                    path \r\n                                        d M16.2109 19.4688C16.2109 20.6688 16.6824 21.826 17.5824 22.726C18.4824 23.626 19.6824 24.0974 20.8395 24.0974L16.2109 19.4688Z\r\n                                        fill white\r\n                                    path \r\n                                        d M20.9253 13.426C17.6253 13.426 14.9253 16.126 14.9253 19.426C14.9253 22.726 17.6253 25.426 20.9253 25.426C24.2253 25.426 26.9253 22.726 26.9253 19.426C26.9253 16.126 24.2253 13.426 20.9253 13.426ZM17.5824 22.7689C16.6824 21.8689 16.211 20.6689 16.211 19.5117L20.8824 24.1403C19.6824 24.0974 18.4824 23.6689 17.5824 22.7689ZM21.9539 24.0117L16.3396 18.3974C16.811 16.2974 18.6967 14.7117 20.9253 14.7117C22.511 14.7117 23.8824 15.4831 24.7396 16.6403L24.0967 17.1974C23.3682 16.2117 22.211 15.5689 20.9253 15.5689C19.2539 15.5689 17.8396 16.6403 17.2824 18.1403L22.211 23.0689C23.4539 22.6403 24.3967 21.5689 24.6967 20.2831H22.6396V19.426H25.6396C25.6396 21.6546 24.0539 23.5403 21.9539 24.0117Z\r\n                                        fill #663399\r\n                                    defs \r\n                                        linearGradient \r\n                                            id a095db34-56ab-4caf-9e1a-9513af4b0311\r\n                                            x1 22.9174\r\n                                            y1 11.6882\r\n                                            x2 12.8026\r\n                                            y2 11.6882\r\n                                            gradientUnits userSpaceOnUse\r\n                                            stop \r\n                                                stop-color #663399\r\n                                            stop \r\n                                                offset 1\r\n                                                stop-color #159BF3\r\n                                span Why Gatsby Cloud?\r\n                                    class css-ovr08e\r\n                                h2 Why Gatsby Cloud?\r\n                                    class css-a2l7qn\r\n                                p \r\n                                    class css-9wr7tw\r\n                        li \r\n                            class css-13jvnff\r\n                            a \r\n                                class css-1fmrpt2\r\n                                href /integrations/\r\n                                svg \r\n                                    width 32\r\n                                    height 32\r\n                                    viewBox 0 0 32 32\r\n                                    fill none\r\n                                    xmlns http://www.w3.org/2000/svg\r\n                                    class css-1ppz169\r\n                                    line \r\n                                        x1 17.25\r\n                                        y1 18\r\n                                        x2 17.25\r\n                                        y2 22\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    line \r\n                                        x1 20.0556\r\n                                        y1 10.8839\r\n                                        x2 23.5911\r\n                                        y2 7.34838\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    line \r\n                                        x1 10.7358\r\n                                        y1 9.59828\r\n                                        x2 14.8316\r\n                                        y2 12.4662\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    line \r\n                                        x1 19.7358\r\n                                        y1 15.5983\r\n                                        x2 23.8316\r\n                                        y2 18.4662\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    line \r\n                                        x1 7.59076\r\n                                        y1 23.3484\r\n                                        x2 14.5908\r\n                                        y2 16.3484\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        cx 17\r\n                                        cy 14\r\n                                        r 4\r\n                                        fill #D9BAE8\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        cx 25\r\n                                        cy 19\r\n                                        r 2\r\n                                        fill #663399\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        cx 9\r\n                                        cy 8.5\r\n                                        r 2\r\n                                        fill white\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        cx 17.25\r\n                                        cy 24\r\n                                        r 2\r\n                                        fill white\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        cx 6\r\n                                        cy 25\r\n                                        r 2\r\n                                        fill #159BF3\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        cx 24\r\n                                        cy 7\r\n                                        r 2\r\n                                        fill white\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                span Integrations\r\n                                    class css-ovr08e\r\n                                h2 Integrations\r\n                                    class css-a2l7qn\r\n                                p Gatsby Cloud is the best way to use Gatsby's thriving plugin ecosystem:\r\n                                    class css-9wr7tw\r\n                            ul \r\n                                class css-kqnhvk\r\n                                li \r\n                                    ul \r\n                                        class css-1j9zy8k\r\n                                        li \r\n                                            ul \r\n                                                class css-j7qwjs\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360053098633-Connecting-to-WordPress\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 25 25\r\n                                                            fill none\r\n                                                            xmlns http://www.w3.org/2000/svg\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                d M1.99609 12.712C1.99609 16.7867 4.36403 20.3081 7.79772 21.9768L2.88733 8.52246C2.31615 9.80274 1.99609 11.2196 1.99609 12.712Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                d M19.2376 12.1925C19.2376 10.9202 18.7807 10.0391 18.3887 9.35335C17.8669 8.50538 17.3778 7.78728 17.3778 6.93931C17.3778 5.993 18.0955 5.11212 19.1064 5.11212C19.152 5.11212 19.1953 5.11781 19.2398 5.12035C17.4084 3.44243 14.9683 2.41797 12.2884 2.41797C8.69211 2.41797 5.52814 4.26317 3.6875 7.05801C3.92901 7.06526 4.15662 7.07035 4.34995 7.07035C5.42668 7.07035 7.09338 6.9397 7.09338 6.9397C7.64829 6.90699 7.71371 7.72205 7.15939 7.78767C7.15939 7.78767 6.60173 7.85329 5.9812 7.88581L9.72986 19.0364L11.9826 12.2798L10.3788 7.88542C9.82446 7.8529 9.29932 7.78728 9.29932 7.78728C8.7446 7.75476 8.80963 6.9066 9.36435 6.93931C9.36435 6.93931 11.0644 7.06996 12.0759 7.06996C13.1524 7.06996 14.8193 6.93931 14.8193 6.93931C15.3746 6.9066 15.4398 7.72166 14.8853 7.78728C14.8853 7.78728 14.3265 7.8529 13.7071 7.88542L17.4272 18.9516L18.4539 15.5203C18.899 14.0964 19.2376 13.0737 19.2376 12.1925Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                d M12.4675 13.6123L9.37891 22.5874C10.3011 22.8585 11.2763 23.0068 12.2869 23.0068C13.4856 23.0068 14.6352 22.7995 15.7053 22.4233C15.6777 22.3792 15.6526 22.3324 15.632 22.2814L12.4675 13.6123Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                d M21.3226 7.77246C21.3669 8.10037 21.3919 8.45237 21.3919 8.83101C21.3919 9.87564 21.1969 11.05 20.6092 12.5183L17.4648 21.6097C20.5252 19.8251 22.5837 16.5094 22.5837 12.7116C22.5838 10.9218 22.1267 9.23883 21.3226 7.77246Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M0.289062 12.7116C0.289062 6.09494 5.6723 0.711914 12.2888 0.711914C18.905 0.711914 24.2889 6.09494 24.2891 12.7116C24.2891 19.3291 18.905 24.7119 12.2888 24.7119C5.6723 24.7119 0.289062 19.3291 0.289062 12.7116ZM0.839353 12.7116C0.839353 19.0253 5.97579 24.1619 12.2888 24.1619C18.6017 24.1619 23.7377 19.0253 23.7377 12.7116C23.7377 6.39838 18.6017 1.26216 12.2888 1.26216C5.97559 1.26216 0.839353 6.39838 0.839353 12.7116Z\r\n                                                                fill #b7b5bd\r\n                                                        + Wordpress\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052324514-Connecting-to-Drupal\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 25 25\r\n                                                            fill none\r\n                                                            xmlns http://www.w3.org/2000/svg\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                d M11.6579 15.5723C9.5669 15.5723 7.87109 17.2681 7.87109 19.3591C7.87109 21.4501 9.5669 23.1459 11.6579 23.1459C13.7489 23.1459 15.4447 21.4501 15.4447 19.3591C15.4447 17.2681 13.7489 15.5723 11.6579 15.5723Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                d M16.3751 14.8456C17.496 16.0169 18.1858 17.6049 18.1858 19.3582C18.1858 21.5786 17.0792 23.533 15.3906 24.7115C18.5164 23.7486 21.1032 21.3989 22.2601 18.5534C23.8625 14.6157 22.3679 11.6552 19.8673 8.96777C19.9463 9.31268 19.9894 9.67915 19.9894 10.0456C19.9822 12.3306 18.4589 14.2492 16.3751 14.8456Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                d M12.0898 10.053C12.0898 11.6554 13.3904 12.9488 14.9857 12.9488C16.5809 12.9488 17.8886 11.6482 17.8886 10.053C17.8886 8.45064 16.588 7.15723 14.9928 7.15723C13.3976 7.15723 12.0898 8.45064 12.0898 10.053Z\r\n                                                                fill #b7b5bd\r\n                                                            path \r\n                                                                d M6.66555 23.5622C5.70986 22.4269 5.13501 20.961 5.13501 19.3586C5.13501 16.0173 7.64279 13.2652 10.8835 12.8844C10.3302 12.0796 9.99968 11.1023 9.99968 10.0532C9.99968 7.29395 12.2344 5.0664 14.9937 5.0664C15.2236 5.0664 15.4464 5.08078 15.662 5.10952C14.0308 3.70114 12.3997 2.2712 11.1135 0.711914C11.7673 7.55263 4.88351 5.0664 2.33261 11.3754C0.629619 15.6005 2.16734 20.8245 6.66555 23.5622Z\r\n                                                                fill #b7b5bd\r\n                                                        + Drupal\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052324714-Connecting-to-Strapi\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16px\r\n                                                            height 16px\r\n                                                            viewBox 0 0 16 16\r\n                                                            fill none\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M10.6159 10.8743V5.71174C10.6159 5.52787 10.4669 5.37881 10.283 5.37881H5.12643V0.0498657H15.6061C15.79 0.0498657 15.9391 0.198922 15.9391 0.382791V10.8743H10.6159Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                opacity 0.404989\r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M5.12643 0.0498657V5.37881H0.204854C0.112919 5.37881 0.0383911 5.30429 0.0383911 5.21235C0.0383911 5.16823 0.0559042 5.12592 0.0870828 5.09471L5.12643 0.0498657Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                opacity 0.404989\r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M10.6159 15.8011V10.8743H15.9391L10.9002 15.9187C10.8352 15.9838 10.7298 15.9838 10.6648 15.9188C10.6335 15.8876 10.6159 15.8452 10.6159 15.8011Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                opacity 0.404989\r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M5.12643 5.37881H10.4495C10.5414 5.37881 10.6159 5.45334 10.6159 5.54528V10.8743H5.45936C5.27549 10.8743 5.12643 10.7252 5.12643 10.5414V5.37881Z\r\n                                                                fill #B7B5BD\r\n                                                        + Strapi\r\n                                        li \r\n                                            ul \r\n                                                class css-j7qwjs\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052076554-Connecting-to-Contentful\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 15 17\r\n                                                            fill none\r\n                                                            xmlns http://www.w3.org/2000/svg\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                d M5.13956 11.4857V11.4857C4.34629 10.6947 3.90045 9.6205 3.90045 8.50025C3.90045 7.38001 4.34629 6.30582 5.13956 5.51482V5.51482C5.78299 4.87138 5.78299 3.82816 5.13956 3.18473C4.49612 2.54129 3.4529 2.54129 2.80946 3.18473C1.41514 4.60334 0.631118 6.51114 0.625 8.50025C0.64478 10.4866 1.42679 12.3895 2.80946 13.8158C3.22569 14.232 3.83236 14.3946 4.40095 14.2422C4.96953 14.0899 5.41364 13.6457 5.56599 13.0772C5.71834 12.5086 5.55579 11.9019 5.13956 11.4857V11.4857Z\r\n                                                                stroke #B7B5BD\r\n                                                            path \r\n                                                                d M5.13982 5.51456V5.51456C5.93082 4.72129 7.00501 4.27545 8.12525 4.27545C9.2455 4.27545 10.3197 4.72129 11.1107 5.51456V5.51456C11.7541 6.15799 12.7973 6.15799 13.4408 5.51456C14.0842 4.87112 14.0842 3.8279 13.4408 3.18446C12.0222 1.79014 10.1144 1.00612 8.12525 1C6.13888 1.01978 4.236 1.80179 2.80973 3.18446C2.16629 3.8279 2.16629 4.87112 2.80973 5.51456C3.45316 6.15799 4.49638 6.15799 5.13982 5.51456V5.51456Z\r\n                                                                stroke #B7B5BD\r\n                                                            path \r\n                                                                d M11.1107 11.4855V11.4855C10.3197 12.2788 9.2455 12.7247 8.12525 12.7247C7.00501 12.7247 5.93082 12.2788 5.13982 11.4855V11.4855C4.49638 10.8421 3.45316 10.8421 2.80973 11.4855C2.16629 12.129 2.16629 13.1722 2.80973 13.8156C4.22834 15.21 6.13614 15.994 8.12525 16.0001C10.1116 15.9803 12.0145 15.1983 13.4408 13.8156C13.857 13.3994 14.0196 12.7927 13.8672 12.2242C13.7149 11.6556 13.2707 11.2115 12.7022 11.0591C12.1336 10.9068 11.5269 11.0693 11.1107 11.4855V11.4855Z\r\n                                                                stroke #B7B5BD\r\n                                                        + Contentful\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052324454-Connecting-to-DatoCMS\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 16 16\r\n                                                            fill none\r\n                                                            xmlns http://www.w3.org/2000/svg\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M2.9811 1.18518H8.78502C12.7693 1.18518 16.0007 4.36972 16.0007 8.29629C16.0007 12.2229 12.7693 15.4074 8.78502 15.4074H2.9811C2.19679 15.4074 1.56934 14.789 1.56934 14.0161V2.57648C1.56934 1.80354 2.19679 1.18518 2.9811 1.18518ZM5.23992 8.29629C5.23992 10.2441 6.83992 11.79 8.78502 11.79C10.7301 11.79 12.3301 10.2132 12.3301 8.29629C12.3301 6.34847 10.7615 4.80257 8.78502 4.80257C6.80855 4.80257 5.23992 6.37938 5.23992 8.29629Z\r\n                                                                fill #D9D7E0\r\n                                                            path \r\n                                                                fill-rule evenodd\r\n                                                                clip-rule evenodd\r\n                                                                d M1.41274 1.18518H7.21666C11.201 1.18518 14.4324 4.36972 14.4324 8.29629C14.4324 12.2229 11.201 15.4074 7.21666 15.4074H1.41274C0.628428 15.4074 0.000976562 14.789 0.000976562 14.0161V2.57648C0.000976562 1.80354 0.628428 1.18518 1.41274 1.18518ZM3.67157 8.29629C3.67157 10.2441 5.27156 11.79 7.21666 11.79C9.16176 11.79 10.7618 10.2132 10.7618 8.29629C10.7618 6.34847 9.19313 4.80257 7.21666 4.80257C5.24019 4.80257 3.67157 6.37938 3.67157 8.29629Z\r\n                                                                fill #B7B5BD\r\n                                                        + Dato CMS\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052324654-Connecting-to-Kontent\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 150 150\r\n                                                            fill none\r\n                                                            class css-74s18y\r\n                                                            @title Kontent\r\n                                                            path \r\n                                                                fill #B7B5BD\r\n                                                                d M36.34,16.7V73.4a2.15,2.15,0,0,1-1.74,2.12c-7.23,1.37-34.46,5-34.46-18V17c0-22.32,36.2-22.82,36.2-.26\r\n                                                            path \r\n                                                                fill #B7B5BD\r\n                                                                d M85.88,55.79V112.5a2.14,2.14,0,0,1-1.75,2.11c-7.23,1.38-34.46,5-34.46-18V56.05c0-22.31,36.21-22.81,36.21-.26\r\n                                                            path \r\n                                                                fill #B7B5BD\r\n                                                                d M135.41,90.1v56.71a2.15,2.15,0,0,1-1.75,2.12c-7.23,1.37-34.46,5-34.46-18V90.36c0-22.31,36.21-22.81,36.21-.26\r\n                                                        + Kontent\r\n                                        li \r\n                                            ul \r\n                                                class css-j7qwjs\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052324694-Connecting-to-Sanity-io\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 16 16\r\n                                                            fill none\r\n                                                            xmlns http://www.w3.org/2000/svg\r\n                                                            class css-74s18y\r\n                                                            circle \r\n                                                                cx 8.00098\r\n                                                                cy 8\r\n                                                                r 8\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                opacity 0.75\r\n                                                                d M10.1254 9.61902C10.875 10.0969 11.2145 10.7716 11.2145 11.7415C10.578 12.5427 9.48895 12.9784 8.20187 12.9784C6.03787 12.9784 4.4962 11.9101 4.1709 10.0688H6.25003C6.51876 10.9122 7.22595 11.3057 8.18772 11.3057C9.33337 11.3198 10.1113 10.7013 10.1254 9.61902Z\r\n                                                                fill white\r\n                                                            path \r\n                                                                opacity 0.75\r\n                                                                d M6.06603 6.27368C5.35884 5.852 4.94867 5.09298 4.97696 4.27773C5.58514 3.4906 6.63178 3.0127 7.90472 3.0127C10.1253 3.0127 11.3982 4.17934 11.7235 5.80984H9.71512C9.48882 5.16326 8.93721 4.65725 7.933 4.65725C6.84394 4.6713 6.10846 5.28977 6.06603 6.27368Z\r\n                                                                fill white\r\n                                                            path \r\n                                                                d M4.97688 4.29175C4.97688 5.62707 5.81137 6.42826 7.48033 6.84994L9.2483 7.25756C10.8324 7.62302 11.7942 8.5226 11.7942 9.98442C11.8083 10.6169 11.5962 11.2354 11.2143 11.7414C11.2143 10.2796 10.4505 9.49246 8.62597 9.01456L6.88629 8.62099C5.48606 8.31176 4.41113 7.56679 4.41113 5.97847C4.41113 5.37406 4.60915 4.76965 4.97688 4.29175Z\r\n                                                                fill white\r\n                                                        + Sanity\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052077034-Connecting-to-Cosmic\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 16 16\r\n                                                            fill none\r\n                                                            xmlns http://www.w3.org/2000/svg\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                d M6.19972 5.81097C6.577 5.49173 6.92526 5.17249 7.30253 4.88228C7.01232 4.67913 6.75113 4.505 6.48993 4.33087C6.1707 4.59206 5.85146 4.88228 5.53223 5.17249C5.85146 5.28858 6.08363 5.52075 6.19972 5.81097Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M5.26801 7.26196C5.95722 7.26378 6.51734 6.73252 6.51908 6.07537C6.52081 5.41822 5.9635 4.88402 5.27429 4.8822C4.58508 4.88038 4.02496 5.41163 4.02323 6.06879C4.0215 6.72594 4.5788 7.26014 5.26801 7.26196Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M6.40257 12.7471C4.6903 13.6758 3.21021 13.9079 2.54272 13.2695C1.61403 12.3698 2.45565 10.0191 4.48715 7.6393C4.16792 7.55223 3.90672 7.32006 3.76162 7.02985C0.801428 10.3383 -0.53356 13.6758 0.772406 14.9237C1.8462 15.9685 4.42911 15.2719 7.27322 13.4146C6.983 13.2114 6.69279 12.9792 6.40257 12.7471Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M8.43394 4.82421C8.521 4.50497 8.75317 4.24378 9.04339 4.09867C5.61885 1.28359 2.13627 0.0356651 0.830308 1.28359C-0.243486 2.32836 0.453029 4.79518 2.39747 7.5232C2.62964 7.23299 2.86181 6.97179 3.09398 6.68158C2.13627 5.02736 1.87508 3.6053 2.54258 2.93781C3.50028 2.03815 5.93809 2.87977 8.43394 4.82421Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M10.7554 5.63678C10.6393 5.92699 10.3781 6.15917 10.0879 6.27525C10.5232 6.71057 10.9295 7.11688 11.2778 7.5522C11.4809 7.291 11.6841 7.02981 11.8292 6.76862C11.5099 6.39134 11.1327 6.01406 10.7554 5.63678Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M10.0594 6.79767C10.756 6.79767 11.3074 6.27528 11.3074 5.60779C11.3074 4.94029 10.756 4.41791 10.0594 4.41791C9.36293 4.41791 8.81152 4.94029 8.81152 5.60779C8.81152 6.24626 9.36293 6.79767 10.0594 6.79767Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M13.2803 2.9668C14.209 3.86646 13.3674 6.2172 11.3359 8.59696C11.6551 8.68403 11.9163 8.9162 12.0614 9.20641C14.9926 5.89797 16.3276 2.53148 15.0216 1.28355C13.9478 0.267804 11.3649 0.964319 8.5498 2.82169C8.84002 3.02484 9.13023 3.25701 9.42045 3.48919C11.1327 2.5605 12.6128 2.32833 13.2803 2.9668Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M9.82718 10.2222C9.39185 10.6285 8.92751 11.0057 8.49219 11.354C8.7824 11.5572 9.0436 11.7313 9.33381 11.9054C9.74011 11.5862 10.1174 11.2379 10.5237 10.8606C10.2045 10.7446 9.97228 10.5124 9.82718 10.2222Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M10.5409 8.98936C9.85165 8.98746 9.29146 9.51865 9.28965 10.1758C9.28784 10.833 9.84509 11.3672 10.5343 11.3691C11.2235 11.371 11.7837 10.8398 11.7855 10.1827C11.7873 9.52553 11.2301 8.99126 10.5409 8.98936Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M5.73542 9.99001C5.3001 9.55469 4.8938 9.14839 4.54555 8.71307C4.3424 8.97427 4.13925 9.23546 3.99414 9.49665C4.3424 9.87393 4.69065 10.2512 5.06793 10.6285C5.18402 10.3383 5.41619 10.1061 5.73542 9.99001Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M13.4259 8.74213C13.1937 9.03234 12.9616 9.29353 12.7294 9.58375C13.6871 11.238 13.9483 12.631 13.2518 13.2985C12.2941 14.1982 9.85628 13.3565 7.36043 11.4411C7.27336 11.7604 7.04119 12.0216 6.75098 12.1667C10.2045 14.9817 13.6871 16.2587 14.9931 15.0108C16.0669 13.937 15.3704 11.4411 13.4259 8.74213Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M7.01752 10.6442C7.01925 9.98703 6.46193 9.45284 5.77272 9.45103C5.08351 9.44923 4.5234 9.98049 4.52168 10.6376C4.51995 11.2948 5.07727 11.829 5.76648 11.8308C6.45569 11.8326 7.0158 11.3013 7.01752 10.6442Z\r\n                                                                fill #B7B5BD\r\n                                                        + Cosmic\r\n                                                li \r\n                                                    class css-1uk1gs8\r\n                                                    a \r\n                                                        target _blank\r\n                                                        rel noopener noreferrer\r\n                                                        href https://support.gatsbyjs.com/hc/en-us/articles/360052324434-Connecting-to-Contentstack\r\n                                                        class css-17mmtw1\r\n                                                        svg \r\n                                                            width 16\r\n                                                            height 16\r\n                                                            viewBox 0 0 16 16\r\n                                                            fill none\r\n                                                            class css-74s18y\r\n                                                            path \r\n                                                                d M12.3905 6.96382C12.3905 7.12357 12.2929 7.23007 12.1466 7.23007H7.51237C7.36603 7.23007 7.26846 7.12357 7.26846 6.96382V6.37809C7.26846 6.21834 7.36603 6.11185 7.51237 6.11185H12.1466C12.2929 6.11185 12.3905 6.21834 12.3905 6.37809V6.96382Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M14.4392 8.61458C14.4392 8.77433 14.3417 8.88083 14.1953 8.88083H8.4879C8.34155 8.88083 8.24399 8.77433 8.24399 8.61458V8.02885C8.24399 7.8691 8.34155 7.7626 8.4879 7.7626H14.1465C14.2929 7.7626 14.3904 7.8691 14.3904 8.02885L14.4392 8.61458Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M16 10.3185C16 10.4783 15.9024 10.5848 15.7561 10.5848H9.56086C9.41452 10.5848 9.31696 10.4783 9.31696 10.3185V9.73279C9.31696 9.57305 9.41452 9.46655 9.56086 9.46655H15.7561C15.9024 9.46655 16 9.57305 16 9.73279V10.3185Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M16 12.0225C16 12.1822 15.9024 12.2887 15.7561 12.2887H9.56086C9.41452 12.2887 9.31696 12.1822 9.31696 12.0225V11.4367C9.31696 11.277 9.41452 11.1705 9.56086 11.1705H15.7561C15.9024 11.1705 16 11.277 16 11.4367V12.0225Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M14.4392 13.6732C14.4392 13.833 14.3417 13.9395 14.1953 13.9395H8.4879C8.34155 13.9395 8.24399 13.833 8.24399 13.6732V13.0875C8.24399 12.9278 8.34155 12.8213 8.4879 12.8213H14.1465C14.2929 12.8213 14.3904 12.9278 14.3904 13.0875L14.4392 13.6732Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M12.3905 15.377C12.3905 15.5367 12.2929 15.6432 12.1466 15.6432H7.51237C7.36603 15.6432 7.26846 15.5367 7.26846 15.377V14.7912C7.26846 14.6315 7.36603 14.525 7.51237 14.525H12.1466C12.2929 14.525 12.3905 14.6315 12.3905 14.7912V15.377Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M3.60989 1.85198C3.60989 2.01172 3.70746 2.11822 3.8538 2.11822H8.48803C8.63438 2.11822 8.73194 2.01172 8.73194 1.85198V1.26624C8.73194 1.1065 8.63438 1 8.48803 1H3.8538C3.70746 1 3.60989 1.1065 3.60989 1.26624V1.85198Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M1.5614 3.55593C1.5614 3.71567 1.65896 3.82217 1.80531 3.82217H7.46394C7.61028 3.82217 7.70785 3.71567 7.70785 3.55593V2.97019C7.70785 2.81045 7.61028 2.70395 7.46394 2.70395H1.80531C1.65896 2.70395 1.5614 2.81045 1.5614 2.97019V3.55593Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M0 5.25987C0 5.41962 0.0975628 5.52612 0.243907 5.52612H6.43915C6.5855 5.52612 6.68306 5.41962 6.68306 5.25987V4.67414C6.68306 4.51439 6.5855 4.4079 6.43915 4.4079H0.243907C0.0975628 4.4079 0 4.51439 0 4.67414V5.25987Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M0 6.96382C0 7.12357 0.0975628 7.23007 0.243907 7.23007H6.43915C6.5855 7.23007 6.68306 7.12357 6.68306 6.96382V6.37809C6.68306 6.21834 6.5855 6.11185 6.43915 6.11185H0.243907C0.0975628 6.11185 0 6.21834 0 6.37809V6.96382Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M1.5614 8.61458C1.5614 8.77432 1.65896 8.88082 1.80531 8.88082H7.46394C7.61028 8.88082 7.70785 8.77432 7.70785 8.61458V8.02884C7.70785 7.8691 7.61028 7.7626 7.46394 7.7626H1.80531C1.65896 7.7626 1.5614 7.8691 1.5614 8.02884V8.61458Z\r\n                                                                fill #B7B5BD\r\n                                                            path \r\n                                                                d M3.60989 10.3183C3.60989 10.478 3.70746 10.5845 3.8538 10.5845H8.48803C8.63438 10.5845 8.73194 10.478 8.73194 10.3183V9.73255C8.73194 9.57281 8.63438 9.46631 8.48803 9.46631H3.8538C3.70746 9.46631 3.60989 9.57281 3.60989 9.73255V10.3183Z\r\n                                                                fill #B7B5BD\r\n                                                        + Contentstack\r\n                                li \r\n                                    ul \r\n                                        class css-1xhj18k\r\n                                        li \r\n                                            class css-w6ak5y\r\n                                            a Explore all Integrations\r\n                                                target _blank\r\n                                                rel noopener noreferrer\r\n                                                href https://support.gatsbyjs.com/hc/en-us/categories/360004458673-Connecting-to-your-CMS\r\n                                                class css-17mmtw1\r\n                        li \r\n                            class css-1ooz8m1\r\n                            a \r\n                                class css-1fmrpt2\r\n                                href /pricing/\r\n                                svg \r\n                                    width 32\r\n                                    height 32\r\n                                    viewBox 0 0 32 32\r\n                                    fill none\r\n                                    xmlns http://www.w3.org/2000/svg\r\n                                    class css-1ppz169\r\n                                    path \r\n                                        d M25.375 18.5V21C25.375 21.3315 25.2433 21.6495 25.0089 21.8839C24.7745 22.1183 24.4565 22.25 24.125 22.25H7.875C7.54348 22.25 7.22554 22.1183 6.99112 21.8839C6.7567 21.6495 6.625 21.3315 6.625 21V18.5C7.28804 18.5 7.92393 18.2366 8.39277 17.7678C8.86161 17.2989 9.125 16.663 9.125 16C9.125 15.337 8.86161 14.7011 8.39277 14.2322C7.92393 13.7634 7.28804 13.5 6.625 13.5V11C6.625 10.6685 6.7567 10.3505 6.99112 10.1161C7.22554 9.8817 7.54348 9.75 7.875 9.75H24.125C24.4565 9.75 24.7745 9.8817 25.0089 10.1161C25.2433 10.3505 25.375 10.6685 25.375 11V13.5C24.712 13.5 24.0761 13.7634 23.6072 14.2322C23.1384 14.7011 22.875 15.337 22.875 16C22.875 16.663 23.1384 17.2989 23.6072 17.7678C24.0761 18.2366 24.712 18.5 25.375 18.5Z\r\n                                        fill #F6EDFA\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                        stroke-linecap round\r\n                                        stroke-linejoin round\r\n                                    path \r\n                                        d M12.875 14.75C13.5654 14.75 14.125 14.1904 14.125 13.5C14.125 12.8096 13.5654 12.25 12.875 12.25C12.1846 12.25 11.625 12.8096 11.625 13.5C11.625 14.1904 12.1846 14.75 12.875 14.75Z\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                        stroke-linecap round\r\n                                        stroke-linejoin round\r\n                                    path \r\n                                        d M19.75 19.75C20.4404 19.75 21 19.1904 21 18.5C21 17.8096 20.4404 17.25 19.75 17.25C19.0596 17.25 18.5 17.8096 18.5 18.5C18.5 19.1904 19.0596 19.75 19.75 19.75Z\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                        stroke-linecap round\r\n                                        stroke-linejoin round\r\n                                    path \r\n                                        d M19.125 12.875L12.875 19.125\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                        stroke-linecap round\r\n                                        stroke-linejoin round\r\n                                span Pricing\r\n                                    class css-ovr08e\r\n                                h2 Pricing\r\n                                    class css-a2l7qn\r\n                                p \r\n                                    class css-9wr7tw\r\n                        li \r\n                            class css-negznb\r\n                            a \r\n                                target _blank\r\n                                rel noopener noreferrer\r\n                                href https://support.gatsbyjs.com/hc\r\n                                class css-1fmrpt2\r\n                                svg \r\n                                    width 32\r\n                                    height 32\r\n                                    viewBox 0 0 32 32\r\n                                    fill none\r\n                                    xmlns http://www.w3.org/2000/svg\r\n                                    class css-1ppz169\r\n                                    line \r\n                                        y1 -0.75\r\n                                        x2 4.05674\r\n                                        y2 -0.75\r\n                                        transform matrix(0.707107 0.707107 0.707107 -0.707107 8.2583 8.30344)\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        r 6.01122\r\n                                        transform matrix(-1 0 0 1 15.8013 15.4364)\r\n                                        fill #F6EDFA\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    path \r\n                                        d M15.9433 16.1907H17.6877C17.5762 16.6775 17.3125 17.0223 17.0488 17.2251C16.6736 17.5091 16.1665 17.6308 15.7202 17.6308C15.0002 17.6308 14.5235 17.3468 14.2192 17.0527C13.9353 16.7789 13.5499 16.2414 13.5499 15.3388C13.5499 14.5781 13.844 13.929 14.2294 13.5538C14.6452 13.1481 15.2537 12.9554 15.7912 12.9554C16.1056 12.9554 16.4606 13.0264 16.7446 13.1684C16.9575 13.28 17.3024 13.5132 17.5356 13.9696L18.6816 13.351C18.3267 12.7424 17.85 12.3368 17.4139 12.1136C16.8967 11.8398 16.3592 11.7587 15.8521 11.7587C14.5438 11.7587 13.6919 12.2759 13.1848 12.7931C12.7791 13.1988 12.1909 14 12.1909 15.3083C12.1909 16.8296 12.9616 17.6815 13.1949 17.9148C13.9353 18.6551 14.8075 18.8275 15.6492 18.8275C16.491 18.8275 17.3531 18.6348 18.0529 17.9351C18.9859 17.0122 19.0468 15.5923 19.0468 15.1359V15.0548H15.9433V16.1907Z\r\n                                        fill #663399\r\n                                    circle \r\n                                        r 2.70449\r\n                                        transform matrix(-1 0 0 1 27.2955 14.7603)\r\n                                        fill #663399\r\n                                    line \r\n                                        y1 -0.75\r\n                                        x2 4.05674\r\n                                        y2 -0.75\r\n                                        transform matrix(-1 0 0 1 25.9434 15.4364)\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        r 1.95449\r\n                                        transform matrix(0.707107 0.707107 0.707107 -0.707107 6.82473 7.82474)\r\n                                        stroke #159BF3\r\n                                        stroke-width 1.5\r\n                                    circle \r\n                                        r 1.95449\r\n                                        transform matrix(0.707107 -0.707107 -0.707107 -0.707107 7.06201 23.6155)\r\n                                        fill #F1DEFA\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                    line \r\n                                        y1 -0.75\r\n                                        x2 4.05674\r\n                                        y2 -0.75\r\n                                        transform matrix(0.707107 -0.707107 -0.707107 -0.707107 7.54004 22.1805)\r\n                                        stroke #663399\r\n                                        stroke-width 1.5\r\n                                span Knowledge Base\r\n                                    class css-ovr08e\r\n                                h2 Knowledge Base\r\n                                    class css-a2l7qn\r\n                                p \r\n                                    class css-9wr7tw\r\n                        li \r\n                            class css-1ar6uo7\r\n                            a \r\n                                class css-1fmrpt2\r\n                                href /concierge/\r\n                                svg \r\n                                    width 32\r\n                                    height 32\r\n                                    viewBox 0 0 32 32\r\n                                    fill none\r\n                                    xmlns http://www.w3.org/2000/svg\r\n                                    class css-1ppz169\r\n                                    path \r\n                                        d M22.3409 16.5909H18.0454V17.8182H20.9909C20.5614 19.6591 19.2114 21.1932 17.4318 21.8068L10.375 14.75C11.1114 12.6023 13.1977 11.0682 15.5909 11.0682C17.4318 11.0682 19.0886 11.9886 20.1318 13.4L21.0523 12.6023C19.825 10.9455 17.8614 9.84091 15.5909 9.84091C12.4 9.84091 9.69999 12.1114 9.02499 15.1182L17.125 23.2182C20.0704 22.4818 22.3409 19.7818 22.3409 16.5909Z\r\n                                        fill white\r\n                                    path \r\n                                        d M8.84091 16.6523C8.84091 18.3705 9.51591 20.0273 10.8045 21.3159C12.0932 22.6046 13.8114 23.2796 15.4682 23.2796L8.84091 16.6523Z\r\n                                        fill white\r\n                                    path \r\n                                        d M15.5909 8C10.8659 8 7 11.8659 7 16.5909C7 21.3159 10.8659 25.1818 15.5909 25.1818C20.3159 25.1818 24.1818 21.3159 24.1818 16.5909C24.1818 11.8659 20.3159 8 15.5909 8ZM10.8045 21.3773C9.51591 20.0886 8.84091 18.3705 8.84091 16.7136L15.5295 23.3409C13.8114 23.2795 12.0932 22.6659 10.8045 21.3773ZM17.0636 23.1568L9.025 15.1182C9.7 12.1114 12.4 9.84091 15.5909 9.84091C17.8614 9.84091 19.825 10.9455 21.0523 12.6023L20.1318 13.4C19.0886 11.9886 17.4318 11.0682 15.5909 11.0682C13.1977 11.0682 11.1727 12.6023 10.375 14.75L17.4318 21.8068C19.2114 21.1932 20.5614 19.6591 20.9909 17.8182H18.0455V16.5909H22.3409C22.3409 19.7818 20.0705 22.4818 17.0636 23.1568Z\r\n                                        fill url(#paint0_linear)\r\n                                    path \r\n                                        d M19.4464 27.8891C21.5245 27.8891 22.4595 28.8286 22.4781 30.9335C22.4792 31.0583 22.5289 31.1777 22.6166 31.2665C22.7043 31.3553 22.8231 31.4064 22.9478 31.4091H22.9581C23.0813 31.4094 23.1999 31.3622 23.2893 31.2773C23.3787 31.1925 23.432 31.0765 23.4381 30.9534C23.5424 28.8631 24.5005 27.8891 26.4544 27.8891H26.4781C26.6054 27.8904 26.728 27.8411 26.819 27.7521C26.9099 27.663 26.9618 27.5415 26.9632 27.4142C26.9645 27.2869 26.9153 27.1642 26.8262 27.0733C26.7372 26.9823 26.6156 26.9304 26.4883 26.9291C24.4025 26.8849 23.4329 25.9217 23.4381 23.898V23.8903C23.4383 23.8273 23.4261 23.7649 23.4022 23.7066C23.3783 23.6483 23.3432 23.5953 23.2988 23.5506C23.2544 23.5059 23.2016 23.4704 23.1435 23.4461C23.0853 23.4218 23.023 23.4092 22.96 23.4091V23.4091C22.8969 23.4088 22.8345 23.421 22.7761 23.4449C22.7178 23.4688 22.6648 23.5039 22.62 23.5483C22.5753 23.5927 22.5397 23.6455 22.5153 23.7036C22.491 23.7617 22.4783 23.8241 22.4781 23.8871V23.8871C22.471 25.9339 21.5033 26.9003 19.431 26.9291C19.3037 26.93 19.182 26.9815 19.0926 27.0721C19.0033 27.1628 18.9536 27.2853 18.9545 27.4126C18.9555 27.5399 19.0069 27.6616 19.0976 27.751C19.1883 27.8403 19.3108 27.89 19.4381 27.8891H19.4464Z\r\n                                        fill url(#paint1_linear)\r\n                                    path \r\n                                        d M26.2325 20.2464C27.7911 20.2464 28.4924 20.951 28.5063 22.5297C28.5071 22.6233 28.5444 22.7129 28.6102 22.7794C28.6759 22.846 28.7651 22.8844 28.8586 22.8864H28.8663C28.9587 22.8866 29.0477 22.8512 29.1147 22.7876C29.1818 22.7239 29.2217 22.6369 29.2263 22.5446C29.3045 20.9769 30.0231 20.2464 31.4885 20.2464H31.5063C31.6018 20.2474 31.6937 20.2104 31.762 20.1436C31.8302 20.0768 31.8691 19.9857 31.8701 19.8902C31.8712 19.7947 31.8342 19.7027 31.7674 19.6345C31.7006 19.5663 31.6095 19.5274 31.514 19.5264C29.9497 19.4932 29.2225 18.7708 29.2263 17.2531V17.2473C29.2265 17.2001 29.2174 17.1532 29.1994 17.1095C29.1815 17.0658 29.1551 17.026 29.1218 16.9925C29.0885 16.959 29.049 16.9323 29.0054 16.9141C28.9618 16.8959 28.915 16.8865 28.8677 16.8864C28.8205 16.8862 28.7736 16.8953 28.7299 16.9132C28.6861 16.9311 28.6463 16.9575 28.6128 16.9908C28.5792 17.0241 28.5525 17.0637 28.5342 17.1073C28.516 17.1509 28.5065 17.1976 28.5063 17.2449C28.501 18.78 27.7753 19.5048 26.221 19.5264C26.1255 19.5271 26.0342 19.5657 25.9672 19.6337C25.9002 19.7017 25.863 19.7935 25.8637 19.889C25.8644 19.9845 25.903 20.0758 25.971 20.1428C26.039 20.2098 26.1308 20.2471 26.2263 20.2464H26.2325Z\r\n                                        fill #663399\r\n                                    path \r\n                                        d M4.30741 5.8C5.60621 5.8 6.19061 6.3872 6.20221 7.7028C6.20292 7.78078 6.23397 7.85542 6.28877 7.9109C6.34358 7.96638 6.41784 7.99834 6.49581 8H6.50221C6.57924 8.0002 6.65338 7.97072 6.70925 7.91768C6.76511 7.86465 6.7984 7.79213 6.80221 7.7152C6.86741 6.4088 7.46621 5.8 8.68741 5.8H8.70221C8.78177 5.80085 8.85841 5.77006 8.91527 5.7144C8.97214 5.65873 9.00456 5.58277 9.00541 5.5032C9.00625 5.42364 8.97546 5.34699 8.9198 5.29013C8.86414 5.23327 8.78817 5.20085 8.7086 5.2C7.40501 5.1724 6.79901 4.5704 6.80221 3.3056V3.3008C6.80236 3.26142 6.79476 3.2224 6.77982 3.18597C6.76489 3.14953 6.74291 3.1164 6.71516 3.08846C6.68741 3.06052 6.65443 3.03833 6.61809 3.02315C6.58176 3.00797 6.54278 3.00011 6.50341 3V3C6.46401 2.99984 6.42497 3.00745 6.38851 3.02238C6.35205 3.03731 6.31889 3.05927 6.29092 3.08702C6.26295 3.11477 6.24072 3.14775 6.2255 3.18409C6.21028 3.22043 6.20236 3.25941 6.20221 3.2988V3.2988C6.19781 4.578 5.59301 5.182 4.29781 5.2C4.21824 5.20058 4.14217 5.23275 4.08632 5.28942C4.03047 5.3461 3.99942 5.42264 4.00001 5.5022C4.00059 5.58177 4.03276 5.65784 4.08943 5.71369C4.14611 5.76954 4.22264 5.80058 4.30221 5.8H4.30741Z\r\n                                        fill #159BF3\r\n                                        stroke #159BF3\r\n                                        stroke-width 0.306818\r\n                                    defs \r\n                                        linearGradient \r\n                                            id paint0_linear\r\n                                            x1 15.5909\r\n                                            y1 8\r\n                                            x2 15.5909\r\n                                            y2 21.5\r\n                                            gradientUnits userSpaceOnUse\r\n                                            stop \r\n                                                stop-color #159BF3\r\n                                            stop \r\n                                                offset 1\r\n                                                stop-color #663399\r\n                                        linearGradient \r\n                                            id paint1_linear\r\n                                            x1 22.9589\r\n                                            y1 23.87\r\n                                            x2 22.9589\r\n                                            y2 31.4091\r\n                                            gradientUnits userSpaceOnUse\r\n                                            stop \r\n                                                offset 0.234375\r\n                                                stop-color #663399\r\n                                            stop \r\n                                                offset 1\r\n                                                stop-color #159BF3\r\n                                span Concierge\r\n                                    class css-ovr08e\r\n                                h2 Concierge\r\n                                    class css-a2l7qn\r\n                                p Dedicated Gatsby support to turbocharge your site\r\n                                    class css-9wr7tw\r\n        li \r\n            class m-btn-1-li\r\n            . css-jebqk6\r\n                a Get Started\r\n                    class css-ntw0hb\r\n                    href /get-started/\r\n            a Get Started\r\n                class m-btn-1-li-a\r\n                href /get-started/\r\n*$"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"json\"\n            path \"stfnbssl/json\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "html.starter",
    "mainIttf": "index.html.ittf",
    "wizziSchema": "html",
    "packiFiles": {
      "index.html.ittf": {
        "type": "CODE",
        "contents": "html\r\n    $\r\n        var md = {\r\n            title: 'Html packi starter'\r\n        }\r\n    html/layouts/std-layout(&md)\r\n        frag()\r\n        ul\r\n            li\r\n                a home\r\n                    href /~-/home.html?context=mpage;home.model\r\n            \r\n        h1 Docs\r\n        ul\r\n            $foreach item in wzCtx.Doc.items\r\n                li\r\n                    a ${item.title}\r\n                        href /~-/docs/${item.name}.html?context=mpage;home.model\r\n        \r\n        h1 Cheatsheets\r\n        ul\r\n            $foreach schema in wzCtx.wizziSchemas\r\n                li\r\n                    a ${schema.name}\r\n                        href /~-/docs/cheatsheets/index.html?context=mpage;home.model|cs;docs/cheatsheets/models/${schema.name}.model;ittf/cheatsheet"
      },
      "t/frag.html.ittf": {
        "type": "CODE",
        "contents": "p\r\n    + Hello Stefi"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"html\"\n            path \"stfnbssl/html\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  },
  {
    "owner": "stfnbssl",
    "name": "wzctx",
    "mainIttf": "index.json.ittf",
    "wizziSchema": "json",
    "packiFiles": {
      "index.json.ittf": {
        "type": "CODE",
        "contents": "{\r\n    $\r\n        var baseUrl = 'http://127.0.0.1:3000';\r\n        var githubUrl = 'https://github.com/stfnbssl/wizzi/tree/master';\r\n        // var baseUrl = \"https://stfnbssl.github.io/wizzi\";\r\n\r\n\tname \"stfnbssl.github.io/wizzi\"\r\n\tversion \"0.7.1\"\r\n\tdescription \"Wizzi github page\"\r\n\tauthor \"Stefano Bassoli\"\r\n\tlicense \"MIT\"\r\n\r\n    { Params\r\n        title \"Wizzi\"\r\n        baseUrl \"${baseUrl}\"\r\n\r\n    { Github\r\n        baseUrl \"${githubUrl}\"\r\n        wizziCorePath \"${githubUrl}/packages/wizzi-core\"\r\n\r\n    { Section\r\n        [ items\r\n            {\r\n                title \"Home\"\r\n                url \"/~-/home.html?context=mpage;home.model\"\r\n            {\r\n                title \"Docs\"\r\n                url \"/~-/docs/concepts.html?context=mpage;home.model\"\r\n            {\r\n                title \"Resources\"\r\n                url \"/~-/resources.html?context=mpage;home.model\"\r\n            {\r\n                title \"Packy\"\r\n                url \"/packy/index.html\"\r\n            {\r\n                title \"News\"\r\n                url \"/news/index.html\"\r\n\r\n    { Doc\r\n        [ items\r\n            {\r\n                title \"Concepts\"\r\n                name \"concepts\"\r\n                url \"/~-/docs/concepts.html?context=mpage;home.model\"\r\n            {\r\n                title \"Ittf documents\"\r\n                name \"ittfDocuments\"\r\n                url \"/~-/docs/ittfdocuments.html?context=mpage;home.model\"\r\n            {\r\n                title \"JsWizzi\"\r\n                name \"jsWizzi\"\r\n                url \"/~-/docs/jswizzi.html?context=mpage;home.model\"\r\n            {\r\n                title \"mTrees\"\r\n                name \"mTrees\"\r\n                url \"/~-/docs/mtrees.html?context=mpage;home.model\"\r\n            {\r\n                title \"Wizzi schemas\"\r\n                name \"wizziSchemas\"\r\n                url \"/~-/docs/wizzischemas.html?context=mpage;home.model\"\r\n            {\r\n                title \"Wizzi models\"\r\n                name \"wizziModels\"\r\n                url \"/~-/docs/wizzimodels.html?context=mpage;home.model\"\r\n            {\r\n                title \"Artifacts\"\r\n                name \"artifacts\"\r\n                url \"/~-/docs/artifacts.html?context=mpage;home.model\"\r\n            {\r\n                title \"Wizzi factory class\"\r\n                name \"wizziFactory\"\r\n                url \"/~-/docs/wizziFactory.html?context=mpage;home.model\"\r\n            {\r\n                title \"Wizzi jobs\"\r\n                name \"wizziJobs\"\r\n                url \"/~-/docs/wizzijobs.html?context=mpage;home.model\"\r\n            {\r\n                title \"Wizzi plugins\"\r\n                name \"wizziPlugins\"\r\n                url \"/~-/docs/wizziplugins.html?context=mpage;home.model\"\r\n\r\n    { Starter\r\n        [ items\r\n            {\r\n                title \"wizzi-starter-wizzi-plugin\"\r\n                url \"${githubUrl}/wizzi-examples/tree/master/packages/wizzi-starter-wizzi-plugin\"\r\n            {\r\n                title \"wizzi-starter-webpack-react\"\r\n                url \"${githubUrl}/wizzi-examples/tree/master/packages/wizzi-starter-webpack-react\"\r\n            {\r\n                title \"wizzi-starter-mern\"\r\n                url \"${githubUrl}/wizzi-examples/tree/master/packages/wizzi-starter-mern\"\r\n            {\r\n                title \"wizzi-starter-nextjs\"\r\n                url \"${githubUrl}/wizzi-examples/tree/master/packages/wizzi-starter-nextjs\"\r\n            {\r\n                title \"wizzi-starter-gatsby\"\r\n                url \"${githubUrl}/wizzi-examples/tree/master/packages/wizzi-starter-gatsby\"\r\n\r\n    { Plugin\r\n        [ items\r\n            {\r\n                title \"wizzi-js\"\r\n                url \"${githubUrl}/wizzi/tree/master/packages/wizzi-js/dist\"\r\n            {\r\n                title \"wizzi-web\"\r\n                url \"${githubUrl}/wizzi/tree/master/packages/wizzi-web/dist\"\r\n            {\r\n                title \"wizzi-lab\"\r\n                url \"${githubUrl}/wizzi/tree/master/packages/wizzi-lab/dist\"\r\n\r\n    { Colors\r\n        bg_0 \"#ccc\"\r\n        bg_f_0 \"#fff\"\r\n\t\tc_0  \"#000\"\r\n        bg_dark \"#ccc\"\r\n        bg_dark_medium \"#ddd\"\r\n        c_dark \"#333\"\r\n        c_dark_medium \"#555\"\r\n        h3_c_dark \"#030\"\r\n\r\n    { Fonts\r\n        useMaterialIcons true\r\n        { materialIcons\r\n            baseUrl \"${baseUrl}/fonts\"\r\n            fontWeight \"400\"\r\n            size \"24px\"\r\n    \r\n    [ wizziSchemas\r\n        {\r\n            name 'css'            \r\n        {\r\n            name 'graphql'            \r\n        {\r\n            name 'html'            \r\n        {\r\n            name 'ittf'\r\n        {\r\n            name 'js'\r\n        {\r\n            name 'json'\r\n        {\r\n            name 'md'\r\n        {\r\n            name 'scss'\r\n        {\r\n            name 'svg'            \r\n        {\r\n            name 'text'\r\n        {\r\n            name 'ts'\r\n        {\r\n            name 'vml'\r\n        {\r\n            name 'vue'\r\n        {\r\n            name 'xml'"
      },
      "wizzi.json.ittf": {
        "type": "CODE",
        "contents": "{\n    [ fragments\n        {\n            name \"json\"\n            path \"stfnbssl/json\"\n    [ contexts\n        {\n            name \"wzCtx\"\n            path \"stfnbssl/wzctx\""
      }
    }
  }
]