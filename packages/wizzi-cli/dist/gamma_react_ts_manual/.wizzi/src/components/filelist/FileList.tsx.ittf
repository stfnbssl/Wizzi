module
    import 
        as React
        from 'react'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    # import pickBy from 'lodash/pickBy';
    # import { isModulePreloaded } from 'snack-sdk';
    import 
        @ prefTypes
        @ withThemeName
        from '../../features/preferences'
    import ResizablePane from '../shared/ResizablePane'
    import Toast from '../shared/Toast'
    import SidebarShell from '../Shell/SidebarShell'
    import FileListPane from './FileListPane'
    import FileListOpenEntry from './FileListOpenEntry'
    import FileListChildren from './FileListChildren'
    import FileListEntryDropTarget from './FileListEntryDropTarget'
    import FileListImportManager from './FileListImportManager'
    import FileListImportExportMenu from './FileListImportExportMenu'
    import FileListPaneButton from './FileListPaneButton'
    # import RepoImportManager from '../RepoImportManager';
    import Segment from '../../features/app/Segment'
    import closeEntry from '../../features/filelist/actions/closeEntry'
    import createNewEntry from '../../features/filelist/actions/createNewEntry'
    import expandEntry from '../../features/filelist/actions/expandEntry'
    import pasteEntry from '../../features/filelist/actions/pasteEntry'
    # import recursivelyCreateParents from '../../features/filelist/actions/recursivelyCreateParents';
    import renameEntry from '../../features/filelist/actions/renameEntry'
    import selectEntry from '../../features/filelist/actions/selectEntry'
    import openEntry from '../../features/filelist/actions/openEntry'
    import updateEntry from '../../features/filelist/actions/updateEntry'
    import 
        # isPackageJson,
        @ getUniquePath
        @ isInsideFolder
        # isESLintConfig,
        from '../../features/filelist/fileUtilities'
    # import eslintrc from '../../configs/eslint.json';
    # import { SDKVersion } from '../../configs/sdk';
    import 
        @ FileSystemEntry
        #
            # , TextFileEntry, AssetFileEntry
        from '../../features/filelist/types'
    import 
        @ packiTypes
        from '../../features/packi'
    :type Props
        :{ 
            :p visible
                :boolean 
            :p onEntriesChange
                :=> 
                    :ref Promise
                        :param void
                    param entries
                        :[ 
                            :ref FileSystemEntry
            :p onRemoveFile
                :=> 
                    :void 
                    param path
                        :string 
            :p onRenameFile
                :=> 
                    :void 
                    param oldPath
                        :string 
                    param newPath
                        :string 
            :p entries
                :[ 
                    :ref FileSystemEntry
            :p uploadFileAsync
                :=> 
                    :ref Promise
                        :param string
                    param file
                        :ref File
            :p onDownloadCode
                :=> 
                    :ref Promise
                        :param void
            :p hasSnackId
                :boolean 
            :p saveStatus
                :ref packiTypes.SaveStatus
            # sdkVersion: SDKVersion;
            :p theme
                :ref prefTypes.ThemeName
            :p preventRedirectWarning
                :=> 
                    :void 
    :type State
        :{ 
            :p clipboard
                :[ 
                    :ref FileSystemEntry
            :p deleted
                :ref Array
                    :param 
                        :{ 
                            :p id
                                :number 
                            :p path
                                :string 
                            :p entries
                                :[ 
                                    :ref FileSystemEntry
            :p openFilesPane
                :boolean 
            :p projectPane
                :boolean 
            :p isRepoManagerShown
                :boolean 
    const AddIcon
        => 
            g 
                @ transform "translate(7.000000, 7.000000)"
                circle 
                    @ fill "#4CAF50"
                    @ cx "4.5"
                    @ cy "4.5"
                    @ r "4.5"
                rect 
                    @ fill "#FFFFFF"
                    @ x "4"
                    @ y "2"
                    @ width "1"
                    @ height "5"
                rect 
                    @ fill "#FFFFFF"
                    @ x "2"
                    @ y "4"
                    @ width "5"
                    @ height "1"
    class FileList
        super React.PureComponent
            :param 
                :ref Props
            :param 
                :ref State
        p state
            :ref State
            { 
                @ clipboard []
                @ deleted []
                @ openFilesPane true
                @ projectPane true
                @ isRepoManagerShown false
        => _handleEntrySelect
            param path
                :string 
            _ this.props.onEntriesChange(selectEntry(this.props.entries, path))
        => _handleEntryOpen
            param path
                :string 
            _ this.props.onEntriesChange(openEntry(this.props.entries, path))
        => _handleEntryFocus
            param path
                :string 
            _ this.props.onEntriesChange(openEntry(this.props.entries, path, true))
        => _handleEntryExpand
            param path
                :string 
            param expand
                :boolean 
                :optional 
            _ this.props.onEntriesChange(expandEntry(this.props.entries, path, expand))
        => _handleEntryRename
            param oldPath
                :string 
            param newPath
                :string 
            if oldPath !== newPath
                _ this.props.onRenameFile(oldPath, newPath)
            _ this.props.onEntriesChange(renameEntry(this.props.entries, oldPath, newPath))
        => _restoreEntries
            param entries
                :[ 
                    :ref FileSystemEntry
            _ this.props.onEntriesChange
                [ 
                    @ ...this.props.entries
                    ... 
                        _ entries.map
                            => 
                                param e
                                _ updateEntry
                                    @ e
                                    { 
                                        { item
                                            @ path
                                                _ getUniquePath
                                                    _ this.props.entries.map
                                                        => 
                                                            param it
                                                            + it.item.path
                                                    @ e.item.path
        => _handleDismissDelete
            param id
                :number 
            _ this.setState
                => 
                    param state
                    (
                        { 
                            @ deleted
                                _ state.deleted.filter
                                    => 
                                        param g
                                        set g.id !== id
        => _handleEntryClose
            param path
                :string 
            _ this.props.onEntriesChange
                _ this.props.entries.map
                    => 
                        param e
                        if e.item.path === path
                            return closeEntry(e)
                        return e
        => _handleEntryCloseOthers
            param path
                :string 
            _ this.props.onEntriesChange
                _ this.props.entries.map
                    => 
                        param e
                        if e.item.path !== path
                            return closeEntry(e)
                        return e
        => _handleEntryCloseAll
            _ this.props.onEntriesChange
                _ this.props.entries.map
                    => 
                        param e
                        _ closeEntry(e)
        => _handleEntryDelete
            param path
                :string 
            const entry
                _ this.props.entries.find
                    => 
                        param e
                        set e.item.path === path
            const entries
                :[ 
                    :ref FileSystemEntry
                [ 
            _ this.props.onEntriesChange
                _ this.props.entries.filter
                    => 
                        param e
                        const remove = e.item.path === path || isInsideFolder(e.item.path, path)
                        if remove
                            _ entries.push(e)
                            _ this.props.onRemoveFile(path)
                        return !remove
            _ this.setState
                => 
                    param state
                    (
                        { 
                            [ deleted
                                @ ...state.deleted
                                { 
                                    @ id this._currentDeleteID++
                                    @ path
                                        iif entry
                                            then entry.item.path
                                            else 'Item'
                                    @ entries
        p _currentDeleteID
            :number 
            = 0
        #
            # 
            # _handleEntryImport = (entry: TextFileEntry | AssetFileEntry) => {
            # let entries: FileSystemEntry[];
            # 
            # if (isPackageJson(entry.item.path)) {
            # // Merge dependencies from package.json file
            # entries = this.props.entries.map(e => {
            # if (isPackageJson(e.item.path)) {
            # try {
            # // @ts-ignore
            # const previous = JSON.parse(e.item.content);
            # // @ts-ignore
            # const next = JSON.parse(entry.item.content);
            # 
            # return {
            # ...e,
            # item: {
            # ...e.item,
            # content: JSON.stringify(
            # {
            # ...previous,
            # dependencies: {
            # ...previous.dependencies,
            # ...Object.keys(next.dependencies).reduce(
            # (acc: { [key: string]: string }, name) => {
            # if (!isModulePreloaded(name, this.props.sdkVersion)) {
            # acc[name] = next.dependencies[name];
            # }
            # 
            # return acc;
            # },
            # {}
            # ),
            # },
            # },
            # null,
            # 2
            # ),
            # },
            # } as TextFileEntry;
            # } catch (err) {
            # // Do nothing
            # }
            # }
            # 
            # return e;
            # });
            # } else if (isESLintConfig(entry.item.path)) {
            # try {
            # const content = JSON.parse((entry as TextFileEntry).item.content);
            # 
            # // Cleanup the config file to remove unsupported plugins and rules
            # if (content.plugins) {
            # content.plugins = content.plugins.filter((name: string) =>
            # eslintrc.plugins.includes(name)
            # );
            # 
            # if (!content.plugins.length) {
            # delete content.plugins;
            # }
            # }
            # 
            # if (content.rules) {
            # content.rules = pickBy(content.rules, (_, key) => {
            # if (key.includes('/')) {
            # return eslintrc.plugins.some(name => key.startsWith(`${name}/`));
            # }
            # 
            # return key;
            # });
            # }
            # 
            # if (content.extends) {
            # if (typeof content.extends === 'string' && !content.extends.startsWith('eslint:')) {
            # delete content.extends;
            # } else {
            # content.extends = content.extends.filter((name: string) => name.startsWith('eslint:'));
            # 
            # if (!content.extends.length) {
            # delete content.extends;
            # }
            # }
            # }
            # 
            # // Remove existing eslintrc if any
            # entries = this.props.entries.filter(e => !isESLintConfig(e.item.path));
            # entries.push(
            # updateEntry(entry, {
            # item: {
            # content: JSON.stringify(content, null, 2),
            # },
            # })
            # );
            # } catch (e) {
            # // Ignore errors
            # entries = this.props.entries;
            # }
            # } else {
            # const parents = recursivelyCreateParents(this.props.entries, entry.item.path);
            # 
            # entries = [...this.props.entries, ...parents];
            # entries.push(
            # updateEntry(entry, {
            # item: {
            # path: getUniquePath(entries.map(e => e.item.path), entry.item.path),
            # },
            # })
            # );
            # }
            # 
            # this.props.onEntriesChange(entries);
            # };
            # 
        => _handleEntryPaste
            param path
                :union 
                    :string 
                    :undefined 
            param e
                :ref FileSystemEntry
            _ this.props.onEntriesChange(pasteEntry(this.props.entries, path, e))
        => _handleCopy
            param path
                :string 
            _ this.setState
                { 
                    @ clipboard
                        _ this.props.entries.filter
                            => 
                                param e
                                set e.item.path === path
        => _handleClearClipboard
            _ this.setState
                { 
                    @ clipboard []
        => _toggleOpenFilesPane
            _ this.setState
                => 
                    param state
                    (
                        { 
                            @ openFilesPane !state.openFilesPane
        => _toggleProjectPane
            _ this.setState
                => 
                    param state
                    (
                        { 
                            @ projectPane !state.projectPane
        => _handleCreateFile
            param path
                :union 
                    :string 
                    :undefined 
                :optional 
            _ this.props.onEntriesChange(createNewEntry(this.props.entries, 'file', path))
        => _handleCreateFolder
            param path
                :union 
                    :string 
                    :undefined 
                :optional 
            _ this.props.onEntriesChange(createNewEntry(this.props.entries, 'folder', path))
        => _handleShowRepoManager
            _ Segment.getInstance().logEvent('IMPORT_REQUESTED')
            _ Segment.getInstance().startTimer('importStart')
            _ this.setState
                { 
                    @ isRepoManagerShown true
        => _handleHideRepoManager
            _ this.setState
                { 
                    @ isRepoManagerShown false
        m render
            return 
                < FileListImportManager 
                    @ className {css(styles.container)}
                    @ entries {this.props.entries}
                    # onImportFile={this._handleEntryImport}
                    @ uploadFileAsync {this.props.uploadFileAsync}
                    @ render
                        => 
                            { 
                                @ onImportStart
                            iif this.props.visible
                                then
                                    < ResizablePane 
                                        @ direction "horizontal"
                                        @ className {css(styles.pane)}
                                        < SidebarShell 
                                            # 
                                                # 
                                                # <RepoImportManager
                                                # visible={this.state.isRepoManagerShown}
                                                # onHide={this._handleHideRepoManager}
                                                # preventRedirectWarning={this.props.preventRedirectWarning}
                                                # />
                                                # 
                                            < FileListPane 
                                                @ title "Open files"
                                                @ theme {this.props.theme}
                                                @ expanded {this.state.openFilesPane}
                                                @ onClick {this._toggleOpenFilesPane}
                                                ul 
                                                    @ className {css(styles.tabs)}
                                                    @ data-test-id "file-list-open-files-content"
                                                    _ this.props.entries.filter
                                                        => 
                                                            param e
                                                            + e.item.type === 'file' && e.state.isOpen
                                                        ._ map
                                                            => 
                                                                param e
                                                                    :any 
                                                                < FileListOpenEntry 
                                                                    @ key {e.item.path}
                                                                    @ entry {e}
                                                                    @ onOpen
                                                                        => 
                                                                            _ this._handleEntryOpen(e.item.path)
                                                                    @ onClose
                                                                        => 
                                                                            _ this._handleEntryClose(e.item.path)
                                                                    @ onCloseOthers
                                                                        => 
                                                                            _ this._handleEntryCloseOthers(e.item.path)
                                                                    @ onCloseAll {this._handleEntryCloseAll}
                                            < FileListPane 
                                                @ className {css(styles.project)}
                                                @ theme {this.props.theme}
                                                @ title "Project"
                                                @ expanded {this.state.projectPane}
                                                @ onClick {this._toggleProjectPane}
                                                @ buttons
                                                    [ 
                                                        < FileListPaneButton 
                                                            @ key "create-file"
                                                            @ onClick
                                                                => 
                                                                    _ this._handleCreateFile
                                                            path 
                                                                @ fillOpacity "0.7"
                                                                @ d "M3,2 L13,2 L13,14 L3,14 L3,2 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z"
                                                            < AddIcon 
                                                        < FileListPaneButton 
                                                            @ key "create-folder"
                                                            @ onClick
                                                                => 
                                                                    _ this._handleCreateFolder
                                                            path 
                                                                @ fillOpacity "0.7"
                                                                @ d "M7.25,4 L7.5,4 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L7.25,4 Z M6.75,4 L5,4 L7,2 L7,3.5 L6.5,4 L6.75,4 Z M1,4 L15,4 L15,14 L1,14 L1,4 Z M7.5,3 L7.5,4 L14,4 L14,3 L7.5,3 Z"
                                                            < AddIcon 
                                                        < FileListImportExportMenu 
                                                            @ key "menu"
                                                            @ onImportFilesClick {onImportStart}
                                                            @ onImportRepoClick {this._handleShowRepoManager}
                                                            @ onExportClick {this.props.onDownloadCode}
                                                            @ saveStatus {this.props.saveStatus}
                                                            @ hasSnackId {this.props.hasSnackId}
                                                < FileListEntryDropTarget 
                                                    @ className {css(styles.files)}
                                                    @ rest {this.props.entries}
                                                    @ onRename {this._handleEntryRename}
                                                    div 
                                                        @ className {css(styles.children)}
                                                        @ data-test-id "file-list-project-content"
                                                        < FileListChildren 
                                                            @ parent ""
                                                            @ entries {this.props.entries}
                                                            @ clipboard {this.state.clipboard}
                                                            @ onCreateFile {this._handleCreateFile}
                                                            @ onCreateFolder {this._handleCreateFolder}
                                                            @ onOpen {this._handleEntryOpen}
                                                            @ onSelect {this._handleEntrySelect}
                                                            @ onFocus {this._handleEntryFocus}
                                                            @ onPaste {this._handleEntryPaste}
                                                            @ onRename {this._handleEntryRename}
                                                            @ onExpand {this._handleEntryExpand}
                                                            @ onDelete {this._handleEntryDelete}
                                                            @ onCopy {this._handleCopy}
                                                            @ onClearClipboard {this._handleClearClipboard}
                                                            # sdkVersion={this.props.sdkVersion}
                                                            @ theme {this.props.theme}
                                                            @ className {css(styles.list)}
                                            _ this.state.deleted.map
                                                => 
                                                    param group
                                                    < Toast 
                                                        @ key {group.id}
                                                        @ label
                                                            `lit 
                                                                + Deleted&nbsp;
                                                                _ group.path.split('/').pop
                                                                + 
                                                        @ actions
                                                            [ 
                                                                { 
                                                                    @ label 'Undo'
                                                                    @ action
                                                                        => 
                                                                            _ this._restoreEntries(group.entries)
                                                                            _ this._handleDismissDelete(group.id)
                                                                { 
                                                                    @ label 'Dismiss'
                                                        @ onDismiss
                                                            => 
                                                                _ this._handleDismissDelete(group.id)
                                                ._ reverse
                                else null
    export-default withThemeName(FileList)
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ display 'flex'
                    @ flexDirection 'column'
                { list
                    @ padding '0 12px'
                    @ height '100%'
                { pane
                    @ flex 1
                    @ display 'flex'
                    @ flexDirection 'column'
                    @ width 240
                    @ minWidth 240
                    @ height '100%'
                    @ zIndex 10
                { project
                    @ flex 1
                { files
                    @ flex 1
                    @ overflow 'auto'
                { children
                    @ position 'relative'
                { tabs
                    @ margin 0
                    @ listStyle 'none'
                    @ padding '8px 0'
                    @ overflow 'auto'
                    { ':empty'
                        @ display 'none'
                { toolbar
                    @ padding 8
                { toasts
                    @ position 'fixed'
                    @ bottom '3em'
                    @ left '1em'
                    @ zIndex 10
