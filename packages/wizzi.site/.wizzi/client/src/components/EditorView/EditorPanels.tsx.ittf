module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import 
        as React
        from 'react'
    $if wzCtx.Build.useExpo
        import 
            @ DeviceLog
            from '../types'
    import 
        @ Annotation
        from '../../features/annotations'
    $if wzCtx.Build.useExpo
        import EditorPanelLogs from './EditorPanelLogs'
    :import-type 
        @ PanelType
        from '../../features/preferences'
    import ProblemsPanel from './ProblemsPanel'
    import 
        @ c
        from '../ThemeProvider'
    import ResizablePane from '../widgets/ResizablePane'
    :type Props
        :{ 
            :p annotations
                :[ 
                    :ref Annotation
            $if wzCtx.Build.useExpo
                :p deviceLogs
                    :[ 
                        :ref DeviceLog
            :p onSelectFile
                :=> 
                    :void 
                    param path
                        :string 
            :p onShowErrorPanel
                :=> 
                    :void 
            $if wzCtx.Build.useExpo                    
                :p onShowDeviceLogs
                    :=> 
                        :void 
            :p onTogglePanels
                :=> 
                    :void 
                    param panelType
                        :ref PanelType
                        :optional 
            $if wzCtx.Build.useExpo
                :p onClearDeviceLogs
                    :=> 
                        :void 
            :p panelType
                :union 
                    :literal 'errors'
                    :literal 'logs'
    +
    export-default 
        class EditorPanels
            super React.Component
                :param 
                    :ref Props
            m getSnapshotBeforeUpdate
                param prevProps
                    :ref Props
                $if wzCtx.Build.useExpo
                    if this.props.deviceLogs !== prevProps.deviceLogs && this._panel.current
                        set this._isScrolled = this._panel.current.scrollHeight - this._panel.current.clientHeight !== this._panel.current.scrollTop
                return null
            m componentDidUpdate
                param prevProps
                    :ref Props
                $if wzCtx.Build.useExpo
                    if this.props.deviceLogs !== prevProps.deviceLogs && this._panel.current && !this._isScrolled
                        set this._panel.current.scrollTop = this._panel.current.scrollHeight - this._panel.current.clientHeight
            p _isScrolled
                :boolean 
                = false
            p _panel
                _ React.createRef
                    :param 
                        :ref HTMLDivElement
            m render
                const 
                    { 
                        @ annotations
                        $if wzCtx.Build.useExpo
                            @ deviceLogs
                        @ onSelectFile
                        @ onShowErrorPanel
                        $if wzCtx.Build.useExpo
                            @ onShowDeviceLogs
                        @ onTogglePanels
                        $if wzCtx.Build.useExpo
                            @ onClearDeviceLogs
                        @ panelType
                    = this.props
                return 
                    < ResizablePane 
                        @ direction "vertical"
                        @ className {css(styles.container)}
                        div 
                            @ className {css(styles.panels)}
                            div 
                                @ className {css(styles.header)}
                                button 
                                    @ onClick {onShowErrorPanel}
                                    @ className {css(styles.tab, panelType !== 'errors' && styles.inactive)}
                                    + Problems
                                $if wzCtx.Build.useExpo
                                    button 
                                        @ onClick {onShowDeviceLogs}
                                        @ className {css(styles.tab, panelType !== 'logs' && styles.inactive)}
                                        + Logs
                                div 
                                    @ className {css(styles.buttons)}
                                    $if wzCtx.Build.useExpo
                                        { 
                                            iif panelType === 'logs'
                                                then
                                                    button 
                                                        @ onClick {onClearDeviceLogs}
                                                        @ className {css(styles.button, styles.clear)}
                                                else null
                                    button 
                                        @ onClick
                                            => 
                                                _ onTogglePanels()
                                        @ className {css(styles.button, styles.close)}
                            div 
                                @ ref {this._panel}
                                @ className {css(styles.panel)}
                                { 
                                    iif panelType === 'errors'
                                        then
                                            < ProblemsPanel 
                                                @ annotations {annotations}
                                                @ onSelectFile {onSelectFile}
                                        else null
                                $if wzCtx.Build.useExpo
                                    { 
                                        iif panelType === 'logs'
                                            then
                                                < EditorPanelLogs 
                                                    @ deviceLogs {deviceLogs}
                                            else null
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ height '14em'
                { header
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'center'
                    @ paddingTop '.75em'
                { tab
                    @ display 'inline-block'
                    @ appearance 'none'
                    @ background 'none'
                    @ border 'none'
                    @ margin 0
                    @ padding '.35em 1.5em'
                    @ fontSize '.9em'
                    @ textTransform 'uppercase'
                    @ outline 'none'
                    @ opacity 1
                { inactive
                    @ opacity 0.5
                { buttons
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'row'
                    @ justifyContent 'flex-end'
                    @ margin '0 1em'
                { button
                    @ height 24
                    @ width 24
                    @ border 0
                    @ outline 0
                    @ margin '0 .5em'
                    @ appearance 'none'
                    @ backgroundColor 'transparent'
                    @ backgroundSize 16
                    @ backgroundRepeat 'no-repeat'
                    @ backgroundPosition 'center'
                { close
                    @ backgroundImage
                        `lit 
                            + url(
                            _ require('../../assets/cross.png')
                            + )
                { clear
                    @ backgroundImage
                        `lit 
                            + url(
                            _ require('../../assets/clear.png')
                            + )
                { panels
                    @ backgroundColor c('content')
                    @ borderColor c('border')
                    @ borderWidth '1px 0 0 0'
                    @ borderStyle 'solid'
                    @ height '100%'
                    @ minHeight 0
                { panel
                    @ display 'flex'
                    @ flexDirection 'column'
                    @ minHeight 0
                    @ padding '.5em 0 .75em 0'
                    @ overflow 'auto'
                    @ height 'calc(100% - 2.5em)'