$group
    $params &md
    $
        var schema = md.schema;
        var ctrl = {
            name: schema.Name,
            path: '/api/v1/' + schema.collectionName
        }
    controller( &ctrl )
        $append imports
            import
                @ I${schema.Name}
                @ Get${schema.Name}Model
                from '../mongo/${schema.name}'
        $append properties
            p ${schema.name}Model
                :any
        set this.${schema.name}Model = Get${schema.Name}Model()
        _ this.router.get(`/`, this.get${schema.CollectionName}.bind(this))
        _ this.router.post(`/`, this.create${schema.Name}.bind(this))
        _ this.router.get(`/:id`, this.get${schema.Name}ById.bind(this))
        _ this.router.put(`/:id`, this.update${schema.Name}.bind(this))
        _ this.router.delete(`/:id`, this.delete${schema.Name}.bind(this))
        $append handlers
            handler( get${schema.CollectionName} )
                _ this.${schema.name}Model.find
                    =>
                        param err
                            :any
                        param ${schema.collectionName}
                            :[
                                :ref I${schema.Name}
                        if err
                            log 'get${schema.CollectionName}.err', err
                            return
                                _ sendFailure
                                    @ response
                                    @ err
                                    @ 501
                        else
                            log 'get${schema.CollectionName}.${schema.collectionName}', ${schema.collectionName}
                            _ sendSuccess
                                @ response
                                {
                                    @ ${schema.collectionName} ${schema.collectionName}
            handler( create${schema.Name} )
                log 'Entering ${schema.Name}Controller.create${schema.Name}, request.body', request.body
                const data = request.body.data
                let ${schema.name} = new this.${schema.name}Model(data)
                _ ${schema.name}.save
                    ._ then
                        =>
                            param ${schema.name}
                                :ref I${schema.Name}
                            _ sendSuccess
                                @ response
                                {
                                    @ 'message' '${schema.Name} created successfully'
                                    @ ${schema.name} ${schema.name}
                    ._ catch
                        =>
                            param err
                                :any
                            log 'create${schema.Name}.err', err
                            _ sendFailure
                                @ response
                                {
                                    @ message "${schema.Name} could not be created."
                                    @ err
                                @ 501
            handler( get${schema.Name}ById )
                let id = request.params.id
                _ this.${schema.name}Model.findById
                    @ id
                    function
                        param err
                            :any
                        param ${schema.name}
                            :ref I${schema.Name}
                        if err
                            log 'get${schema.Name}ById.err', err
                            return
                                _ sendFailure
                                    @ response
                                    {
                                        @ message "${schema.Name} could not be retrieved."
                                        @ err
                                    @ 501
                        _ sendSuccess
                            @ response
                            {
                                @ ${schema.name} ${schema.name}
            handler( update${schema.Name} )
                const id = request.params.id;
                _ this.${schema.name}Model.findById
                    @ id
                    =>
                        param err
                            :any
                        param ${schema.name}
                            :ref I${schema.Name}
                        if err
                            log 'update${schema.Name}.err', err
                            return
                                _ sendFailure
                                    @ response
                                    {
                                        @ message "${schema.Name} could not be updated."
                                        @ err
                                    @ 501
                        if !${schema.name}
                            return
                                _ sendFailure
                                    @ response
                                    {
                                        @ message '${schema.Name} data not found'
                                    @ 501
                        else
                            const data = request.body.data
                            $foreach field in schema.fields
                                $if field.type != 'oid'
                                    set ${schema.name}.${field.name} = data.${field.name}
                            _ ${schema.name}.save
                                ._ then
                                    =>
                                        param ${schema.name}
                                        _ sendSuccess
                                            @ response
                                            {
                                                @ message '${schema.Name} update complete.'
                                ._ catch
                                    =>
                                        param err
                                        log 'update${schema.Name}.err', err
                                        _ sendFailure
                                            @ response
                                            {
                                                @ message '${schema.Name} could not be updated.'
                                                @ err
                                            @ 501
            handler( delete${schema.Name} )
                const id = request.params.id;
                _ this.${schema.name}Model.findByIdAndRemove
                    {
                        @ _id id
                    =>
                        param err
                            :any
                        param ${schema.name}
                            :ref I${schema.Name}
                        if err
                            log 'delete${schema.Name}.err', err
                            return
                                _ sendFailure
                                    @ response
                                    {
                                        @ message "${schema.Name} could not be deleted."
                                        @ err
                                    @ 501
                        else
                            _ sendSuccess
                                @ response
                                {
                                    @ message '${schema.Name} successfully removed'
