module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    $if wzCtx.Build.useExpo
        import BroadcastChannel from 'broadcast-channel'
    import debounce from 'lodash/debounce'
    import nullthrows from 'nullthrows'
    $if wzCtx.Build.useExpo
        import Raven from 'raven-js'
    import 
        as React
        from 'react'
    import 
        @ connect
        from 'react-redux'
    import 
        @ Packi
        $if wzCtx.Build.useExpo
            @ PackiLogEvent
        @ PackiListenerSubscription
        $if wzCtx.Build.useExpo
            @ isModulePreloaded
        $if wzCtx.Build.useExpo
            from 'packi-sdk'
        $else
            from '../features/packi/index'
    import
        @ withAuth
        @ AuthProps
        from '../features/auth/index'
    import 
        @ DEFAULT_DESCRIPTION
        @ DEFAULT_CODE
        $if wzCtx.Build.useExpo
            @ DEFAULT_DEPENDENCIES
        from '../configs/defaults'
    $if wzCtx.Build.useExpo
        import 
            @ versions
            @ DEFAULT_SDK_VERSION
            from '../configs/sdk'
    import 
        @ SavedPacki
        @ QueryParams
        @ SaveStatus
        @ SaveHistory
        @ SaveOptions
        $if wzCtx.Build.useExpo
            @ SDKVersion
            @ Device
            @ DeviceLog
            @ Platform
        @ PackiState
        @ PackiFile
        @ PackiFiles
        $if wzCtx.Build.useExpo
            @ PackiDependencies
            @ PackiDependency
        @ PackiDefaults
        from '../features/packi/index'
    import
        @ Annotation
        from '../features/annotations/index'
    $if wzCtx.Build.useExpo
        import Analytics from '../utils/Analytics'
        import 
            as PlatformOptions
            from '../utils/PlatformOptions'
        import 
            @ PlatformOption
            from '../utils/PlatformOptions'
    import 
        @ isMobile
        from '../utils/detectPlatform'
    $if wzCtx.Build.useExpo
        import getDependenciesFromQuery from '../utils/getDependenciesFromQuery'
    import 
        @ getFilesFromQuery 
        from '../features/file/index'
    $if wzCtx.Build.useExpo
        import 
            @ createpackiWorkerTransport
            from '../utils/snackTransports'
    import AppDetails from './AppDetails'
    import 
        @ EditorViewProps
        from './EditorView/EditorViewProps'
    import
        @ withPreferences
        @ PreferencesContextType
        from '../features/preferences/index'
    import AppShell from './shell/AppShell'
    $if wzCtx.Build.useExpo
        import EmbeddedShell from './shell/EmbeddedShell'
    import 
        @ AnimatedLogo 
        from './widgets/AnimatedLogo'
    import LazyLoad from './widgets/LazyLoad'
    $if wzCtx.Build.useExpo
        const DEVICE_ID_KEY = '__SNACK_DEVICE_ID'
        const BROADCAST_CHANNEL_NAME = 'SNACK_BROADCAST_CHANNEL'
    :type Params
        :{ 
            :p id
                :optional 
                :string 
            :p username
                :optional 
                :string 
            :p projectName
                :optional 
                :string 
    :type Props
        :intersect 
            :ref AuthProps
            :ref PreferencesContextType
            :{ 
                :p Packi
                    :optional 
                    :ref SavedPacki
                :p history
                    :{ 
                        :p push
                            :=> 
                                :void 
                                param props
                                    :{ 
                                        :p pathname
                                            :string 
                                        :p search
                                            :string 
                :p match
                    :{ 
                        :p params
                            :ref Params
                :p location
                    :{ 
                        :p search
                            :string 
                :p query
                    :ref QueryParams
                :p userAgent
                    :string 
                $if wzCtx.Build.useExpo
                    :p isEmbedded
                        :optional 
                        :boolean 
                :p files
                    :ref PackiFiles
                :p defaults
                    :ref PackiDefaults
    :type State
        :{ 
            :p session
                :ref PackiState
            :p selectedFile
                :string 
            :p sendCodeOnChangeEnabled
                :boolean 
            :p autosaveEnabled
                :boolean 
            :p isSavedOnce
                :boolean 
            :p saveHistory
                :ref SaveHistory
            :p saveStatus
                :ref SaveStatus
            $if wzCtx.Build.useExpo
                :p connectedDevices
                    :[ 
                        :ref Device
                :p deviceLogs
                    :[ 
                        :ref DeviceLog
            :p isPreview
                :boolean 
            $if wzCtx.Build.useExpo
                :p wasUpgraded
                    :boolean 
                :p initialSdkVersion
                    :ref SDKVersion
            :p isDownloading
                :boolean 
            :p devicePreviewShown
                :boolean 
            $if wzCtx.Build.useExpo
                :p devicePreviewPlatform
                    :ref Platform
                :p devicePreviewPlatformOptions
                    :[ 
                        :ref PlatformOption
            :p webPreviewURL
                :string 
            :p isLocalWebPreview
                :boolean 
            :p verbose
                :boolean 
            :p annotations
                :[ 
                    :ref Annotation
            :p snackagerURL
                :string 
    $if wzCtx.Build.useExpo
        function getDeviceId
            :return
                :union 
                    :string 
                    :undefined 
            try 
                if typeof window !== 'undefined' && window.localStorage
                    return localStorage.getItem(DEVICE_ID_KEY) ?? undefined
            catch e
            return undefined
    class Main
        super React.Component
            :param 
                :ref Props
            :param 
                :ref State
        p _previewRef
            _ React.createRef
                :param 
                    :ref Window
        p edited
            :private 
            :boolean 
            = false
        ctor 
            param props
                :ref Props
            _ super(props)
            let name = props.defaults.name
            let description = DEFAULT_DESCRIPTION
            $if wzCtx.Build.useExpo
                let sdkVersion
                    :ref SDKVersion
                    = DEFAULT_SDK_VERSION
            let code
                :union 
                    :ref PackiFiles
                    :string 
                = props.files
            $if wzCtx.Build.useExpo
                let dependencies
                    iif props.files === DEFAULT_CODE && !props.packi?.code
                        then DEFAULT_DEPENDENCIES
                        else
                            { 
            if props.Packi
                set code = props.Packi.code ?? code
                $if wzCtx.Build.useExpo
                    set dependencies = props.Packi.dependencies ?? dependencies
                if props.Packi.manifest
                    const 
                        { 
                            @ manifest
                        = props.Packi
                    set name = manifest.name
                    set description = manifest.description
                    $if wzCtx.Build.useExpo
                        set sdkVersion = manifest.sdkVersion ?? sdkVersion
            if props.query
                set name = props.query.name ?? name
                set description = props.query.description ?? description
                $if wzCtx.Build.useExpo
                    set sdkVersion =
                        iif props.query.sdkVersion === 'latest'
                            then DEFAULT_SDK_VERSION
                            else props.query.sdkVersion ?? sdkVersion
                            # @ts-ignore: "latest" is not defined in SDKVersion
                        # Allow specifying "latest" in the query to override the Snack SDK version
            $if wzCtx.Build.useExpo
                const initialSdkVersion = sdkVersion
                let wasUpgraded = false
                if !versions.hasOwnProperty(sdkVersion)
                    set sdkVersion = DEFAULT_SDK_VERSION
                    set wasUpgraded = true
                if props.query.dependencies?.length
                    set dependencies = getDependenciesFromQuery(props.query.dependencies, sdkVersion)
            let files
                :ref PackiFiles
                =
                    iif typeof code === 'string'
                        then
                            { 
                                { 'App.js'
                                    @ contents code
                                    @ type 'CODE'
                        else
                            ( 
                                + code
                                    :as 
                                        :any 
            $if wzCtx.Build.useExpo
                if typeof window !== 'undefined'
                    const 
                        { 
                            @ __snack_embedded_session embeddedSession
                        = window
                    if embeddedSession?.files
                        set name = embeddedSession.name ?? name
                        set description = embeddedSession.description ?? description
                        set files = embeddedSession.files
                        set dependencies = embeddedSession.dependencies ?? dependencies
                        set sdkVersion = embeddedSession.sdkVersion ?? sdkVersion
            const isPreview
                !!
                    &&
                        + isMobile(props.userAgent) && (props.match.params.id || props.match.params.projectName) 
                        $if wzCtx.Build.useExpo
                            + !props.isEmbedded
                        $else
                            + true
            const id
                iif !props.match.params.id && props.match.params.username && props.match.params.projectName
                    then
                        `lit 
                            + @
                            @ props.match.params.username
                            + /
                            @ props.match.params.projectName
                            + 
                    else
                        $if wzCtx.Build.useExpo
                            iif props.match.params.id && !wasUpgraded
                                then props.match.params.id
                                else undefined
                        $else
                            iif props.match.params.id 
                                then props.match.params.id
                                else undefined
            const verbose = props.query.verbose === 'true'
            $if wzCtx.Build.useExpo
                const isWorker = true
            const sendCodeOnChangeEnabled = true
            const sessionSecret = props.getSessionSecret()
            const snackagerURL = nullthrows(process.env.IMPORT_SERVER_URL)
            const isLocalWebPreview = false
            set this._Packi =
                new Packi
                    { 
                        @ disabled true
                        $if wzCtx.Build.useExpo
                            @ channel props.defaults.channel
                        @ name
                        @ description
                        @ files
                        $if wzCtx.Build.useExpo
                            @ dependencies
                            @ sdkVersion
                        @ verbose
                        @ codeChangesDelay
                            iif sendCodeOnChangeEnabled
                                then 1000
                                else -1
                        $if wzCtx.Build.useExpo
                            @ createTransport
                                iif isWorker
                                    then createSnackWorkerTransport
                                    else undefined
                            @ reloadTimeout 10000
                        $if wzCtx.Build.useExpo
                            @ deviceId getDeviceId()
                        @ id
                            $if wzCtx.Build.useExpo
                                iif !wasUpgraded
                                    then id
                                    else undefined
                            $else
                                @expr id
                        @ user
                            iif sessionSecret
                                then
                                    { 
                                        @ sessionSecret
                                else undefined
                        @ apiURL nullthrows(process.env.API_SERVER_URL)
                        @ snackagerURL
                        @ host
                            iif process.env.NODE_ENV === 'development'
                                then 'staging.snack.expo.io'
                                else new URL(nullthrows(process.env.SERVER_URL)).host
                                # Use staging server in development, otherwise Expo Go and appetize
                                # can't access the runtime. Replace with ngrok url to test locally.
                        @ webPreviewRef
                            iif typeof window !== 'undefined'
                                then this._previewRef
                                else undefined
                        @ webPlayerURL
                            iif typeof window !== 'undefined' && isLocalWebPreview
                                then
                                    `lit 
                                        + 
                                        @ window.location.origin
                                        + /web-player/%%SDK_VERSION%%
                                else nullthrows(process.env.SNACK_WEBPLAYER_URL) + '/v2/%%SDK_VERSION%%'
                            # Serve local web-player through `/web-player` end-point to prevent CORS issues
            $if wzCtx.Build.useExpo
                const devicePreviewPlatformOptions
                    _ PlatformOptions.filter
                        { 
                            @ sdkVersion
                            @ supportedPlatformsQueryParam props.query.supportedPlatforms
            const devicePreviewShown
                iif props.query.preview
                    then props.query.preview !== 'false'
                    $if wzCtx.Build.useExpo
                        else
                            iif props.isEmbedded
                                then false
                                else props.preferences.devicePreviewShown
                    $else
                        else props.preferences.devicePreviewShown
            $if wzCtx.Build.useExpo
                const devicePreviewPlatform
                    _ PlatformOptions.getSelectedPlatform
                        { 
                            @ options devicePreviewPlatformOptions
                            @ sdkVersion
                            @ requestedPlatform
                                || 
                                    (
                                        ?? 
                                            + props.query.platform
                                            ( 
                                                iif props.isEmbedded
                                                    then 'web'
                                                    else props.preferences.devicePreviewPlatform
                                    + 'web'
            const selectedFile
                iif files['App.js']
                    then 'App.js'
                    else
                        iif files['App.tsx']
                            then 'App.tsx'
                            else
                                iif files['app.js']
                                    then 'app.js'
                                    else
                                        iif Object.keys(files).length
                                            then Object.keys(files)[0]
                                            else ''
            set this.state =
                { 
                    @ session this._Packi.getState()
                    @ selectedFile
                    @ sendCodeOnChangeEnabled
                    $if wzCtx.Build.useExpo
                        @ autosaveEnabled !props.isEmbedded
                            # We don't have any UI for autosave in embed
                            # In addition, enabling autosave in embed will disable autosave in editor when embed dialog is open
                    $else
                        @ autosaveEnabled true
                    @ isSavedOnce false
                    @ saveHistory props.Packi?.history ?? []
                    @ saveStatus
                        iif props.Packi?.isDraft
                            then 'saved-draft'
                            else
                                iif id
                                    then 'published'
                                    else 'unsaved'
                    $if wzCtx.Build.useExpo
                        @ connectedDevices []
                        @ deviceLogs []
                    @ isPreview
                    @ isLocalWebPreview
                    $if wzCtx.Build.useExpo
                        @ wasUpgraded
                        @ initialSdkVersion
                    @ isDownloading false
                    @ devicePreviewShown
                    $if wzCtx.Build.useExpo
                        @ devicePreviewPlatform
                        @ devicePreviewPlatformOptions
                    @ verbose
                    @ annotations []
                    @ snackagerURL
                    @ webPreviewURL ''
        m getDerivedStateFromProps
            static
            param _props
                :ref Props
            param state
                :ref State
            if typeof window !== 'undefined'
                let webPreviewURL = state.session.webPreviewURL
                    # Starting from SDK 40, the web-player URL is served from a static domain.
                    # For lower SDK versions we fallback to the legacy URL which is served by
                    # the Packi `/web-player/..` end-point.
                    # TODO: Remove this one SDK 39 has been deprecated
                if state.isLocalWebPreview
                    set webPreviewURL =
                        `lit 
                            + 
                            @ window.location.origin
                            + /web-player/localhost/index.html?initialUrl=
                            _ encodeURIComponent(state.session.url)
                            + &origin=
                            _ encodeURIComponent(window.location.origin)
                            + &verbose=true
                else
                    $if wzCtx.Build.useExpo
                        if state.session.sdkVersion <= '39.0.0'
                            set webPreviewURL =
                                `lit 
                                    + 
                                    @ window.location.origin
                                    + /web-player/
                                    @ state.session.sdkVersion.split('.')[0]
                                    + /index.html?initialUrl=
                                    _ encodeURIComponent(state.session.url)
                                    + 
                if state.webPreviewURL !== webPreviewURL
                    _ state.session.transports['webplayer']?.updateOrigin?.(new URL(webPreviewURL).origin)
                        # Dirty hack to update the origin that the transport uses to communicate
                        # with the web-player. The transport origin is initialized from the initial
                        # `webPreviewURL` value, but is re-written here to use the origin from the
                        # actual in use `webPreviewURL`.
                        # TODO: Remove this one SDK 39 has been deprecated
                        # @ts-ignore See above
                    return 
                        { 
                            @ webPreviewURL
            return null
        m componentDidMount
            if this.state.verbose
                _ console.info
                    `lit 
                        + %c INFO&nbsp;
                    `lit 
                        + background: #2196f3; color: #fff
                    @ 'Verbose logging is enabled, open the web-preview in a popup to view runtime logs'
            $if wzCtx.Build.useExpo
                if window.__snack_embedded_session
                    set window.__snack_embedded_session = undefined
                if this.state.verbose && process.env.NODE_ENV !== 'production'
                    set Analytics.getInstance().verbose = true
                if window.location.host.includes('expo.io')
                    _ Raven.config('https://6501f7d527764d85b045b0ce31927c75@sentry.io/191351').install()
                    const build_date = new Date(process.env.BUILD_TIMESTAMP ?? 0).toUTCString()
                    _ Raven.setTagsContext
                        { 
                            @ build_date
                    _ Analytics.getInstance().identify
                        { 
                            @ build_date
                _ Analytics.getInstance().setCommonData
                    { 
                        @ snackId this.state.session.id
                        @ isEmbedded !!this.props.isEmbedded
                        @ previewPane
                            iif this.state.devicePreviewShown
                                then this.state.devicePreviewPlatform
                                else 'hidden'
                if this.state.wasUpgraded
                    _ Analytics.getInstance().logEvent
                        @ 'LOADED_UNSUPPORTED_VERSION'
                        { 
                            @ requestedVersion this.state.initialSdkVersion
                            @ snackId this.props.match.params.id
                _ Analytics.getInstance().logEvent
                    @ 'LOADED_SNACK'
                    { 
                        @ sdkVersion this.state.session.sdkVersion
            set this._PackiStateListener = this._Packi.addStateListener(this._handleSessionStateChange)
            $if wzCtx.Build.useExpo
                set this._snackLogListener = this._snack.addLogListener(this._handleSessionLog)
            _ this._Packi.setDisabled(false)
            set this._isFocused = document.hasFocus()
            set this._focusTimer = window.setInterval(this._handleFocusChangeInterval, 500)
            $if wzCtx.Build.useExpo
                set this._broadcastChannel =
                    new BroadcastChannel
                        @ BROADCAST_CHANNEL_NAME
                        { 
                            @ webWorkerSupport false
                _ this._broadcastChannel.postMessage
                    { 
                        @ type 'NEW_TAB'
                        @ id this.state.session.id
                    # Let other tabs know that a new tab is opened
                _ this._broadcastChannel.addEventListener('message', this._handleBroadcastChannelMessage)
                    # Listen to messages from other tabs
                _ this._enablePubNubIfNeeded()
            $if wzCtx.Build.useExpo
                _ window.addEventListener('unload', this._handleUnload)
            if this.props.query.saveToAccount === 'true'
                if this._Packi.getState().user
                    _ this._saveAsync()
        m componentWillUnmount
            _ this._PackiStateListener?.()
            $if wzCtx.Build.useExpo
                _ this._snackLogListener?.()
            _ this._Packi.setDisabled(true)
            _ this._Packi.setOnline(false)
            $if wzCtx.Build.useExpo
                _ this._broadcastChannel.close()
                _ window.removeEventListener('unload', this._handleUnload)
            _ clearInterval(this._focusTimer)
            set this._focusTimer = undefined
        m componentDidUpdate
            param prevProps
                :ref Props
            param prevState
                :ref State
            $if wzCtx.Build.useExpo
                if prevState.devicePreviewShown !== this.state.devicePreviewShown || prevState.devicePreviewPlatform !== this.state.devicePreviewPlatform
                    _ Analytics.getInstance().updateCommonData
                        { 
                            @ previewPane
                                iif this.state.devicePreviewShown
                                    then this.state.devicePreviewPlatform
                                    else 'hidden'
            if this.props.viewer !== prevProps.viewer
                const sessionSecret = this.props.getSessionSecret()
                if this.state.session.user?.sessionSecret !== sessionSecret
                    _ this._Packi.setUser
                        iif sessionSecret
                            then
                                { 
                                    @ sessionSecret
                            else undefined
        p _Packi
            :ref Packi
        p _PackiStateListener?
            :ref PackiListenerSubscription
        $if wzCtx.Build.useExpo
            p _snackLogListener?
                :ref PackiListenerSubscription
            p _broadcastChannel
                :ref BroadcastChannel
                + undefined
                    :as 
                        :any 
        p _isFocused
            :boolean 
            = false
        p _focusTimer
            :union 
                :number 
                :undefined 
        m render
            $if wzCtx.Build.useExpo
                const 
                    { 
                        @ isEmbedded
                    = this.props
            const experienceURL = this.state.session.url
            if this.state.isPreview
                return 
                    < AppDetails 
                        @ name {this.state.session.name}
                        @ description {this.state.session.description}
                        @ experienceURL {experienceURL}
                        @ onOpenEditor {this._handleOpenEditor}
                        @ userAgent {this.props.userAgent}
                        $if wzCtx.Build.useExpo
                            @ onDeviceConnectionAttempt {this._handleDeviceConnectionAttempt}
            $if wzCtx.Build.useExpo
                let isResolving = false
                for const name in this.state.session.dependencies
                    const dep = this.state.session.dependencies[name]
                    if !dep.handle && !dep.error && !isResolving && !this.state.session.disabled && !isModulePreloaded(name, this.state.session.sdkVersion)
                        set isResolving = true
            return 
                < LazyLoad 
                    :ref React.ComponentType
                        :param 
                            :ref EditorViewProps
                    @ load
                        => 
                            ( 
                                $if wzCtx.Build.useExpo
                                    iif isEmbedded
                                        then
                                            _ import
                                                @ './EditorView/EmbeddedEditorView'
                                        else
                                            _ import
                                                @ './EditorView/EditorView'
                                $else
                                    _ import
                                        @ './EditorView/EditorView'
                    { 
                        => 
                            { 
                                @ loaded
                                @ data Comp
                            iif loaded && Comp
                                then
                                    < Comp 
                                        @ annotations {this.state.annotations}
                                        @ autosaveEnabled {this.state.autosaveEnabled}
                                        $if wzCtx.Build.useExpo
                                            @ connectedDevices {this.state.connectedDevices}
                                        @ createdAt
                                            iif this.props.Packi
                                                then this.props.Packi.created
                                                else undefined
                                        $if wzCtx.Build.useExpo
                                            @ dependencies {this.state.session.dependencies}
                                            @ missingDependencies {this.state.session.missingDependencies}
                                        @ description {this.state.session.description}
                                        $if wzCtx.Build.useExpo
                                            @ deviceId {this.state.session.deviceId}
                                            @ deviceLogs {this.state.deviceLogs}
                                        @ experienceURL {experienceURL}
                                        $if wzCtx.Build.useExpo
                                            @ experienceName {this.state.session.onlineName ?? this.state.session.name}
                                        @ files {this.state.session.files}
                                        @ isDownloading {this.state.isDownloading}
                                        $if wzCtx.Build.useExpo
                                            @ isLocalWebPreview {this.state.isLocalWebPreview}
                                            @ isResolving {isResolving}
                                        @ name {this.state.session.name}
                                        @ id {this.state.session.id}
                                        $if wzCtx.Build.useExpo
                                            @ onChangeSDKVersion {this._handleChangeSDKVersion}
                                            @ onClearDeviceLogs {this._handleClearDeviceLogs}
                                            @ onDeviceConnectionAttempt {this._handleDeviceConnectionAttempt}
                                        @ onDownloadAsync {this._handleDownloadAsync}
                                        @ onPublishAsync {this._saveAsync}
                                        $if wzCtx.Build.useExpo
                                            @ onReloadSnack {this._reloadSnack}
                                        @ onSendCode {this._handleSendCode}
                                        @ onSubmitMetadata {this._handleSubmitMetadata}
                                        @ onToggleSendCode {this._handleToggleSendCode}
                                        @ onTogglePreview {this._handleTogglePreview}
                                        $if wzCtx.Build.useExpo
                                            @ onChangePlatform {this._handleChangePreviewPlatform}
                                        @ onSelectFile {this._handleSelectFile}
                                        $if wzCtx.Build.useExpo
                                            @ platform {this.state.devicePreviewPlatform}
                                            @ platformOptions {this.state.devicePreviewPlatformOptions}
                                        @ previewRef {this._previewRef}
                                        @ previewShown {this.state.devicePreviewShown}
                                        @ previewURL {this.state.webPreviewURL}
                                        $if wzCtx.Build.useExpo
                                            @ payerCode {this.props.query.appetizePayerCode}
                                        @ saveHistory {this.state.saveHistory}
                                        @ saveStatus {this.state.saveStatus}
                                        $if wzCtx.Build.useExpo
                                            @ sdkVersion {this.state.session.sdkVersion}
                                        @ selectedFile {this.state.selectedFile}
                                        @ sendCodeOnChangeEnabled {this.state.sendCodeOnChangeEnabled}
                                        $if wzCtx.Build.useExpo
                                            @ setDeviceId {this._setDeviceId}
                                        @ snackagerURL {this.state.snackagerURL}
                                        $if wzCtx.Build.useExpo
                                            @ updateDependencies {this._updateDependencies}
                                        @ updateFiles {this._updateFiles}
                                        @ uploadFileAsync {this._uploadAssetAsync}
                                        @ userAgent {this.props.userAgent}
                                        @ verbose {this.state.verbose}
                                        $if wzCtx.Build.useExpo
                                            @ wasUpgraded {this.state.wasUpgraded}
                                else
                                    $if wzCtx.Build.useExpo
                                        iif isEmbedded
                                            then
                                                < EmbeddedShell 
                                            else
                                                < AppShell 
                                                    @ title {this.state.session.name}
                                                    @ previewShown {this.state.devicePreviewShown}
                                    $else
                                        < AppShell 
                                            @ title {this.state.session.name}
                                            @ previewShown {this.state.devicePreviewShown}

    const MainContainer
        _ withPreferences
            _ connect
                => 
                    param state
                        :any 
                    (
                        { 
                            @ viewer state.viewer
                (
                    _ withAuth(Main)
    :type AsyncState
        :{ 
            :p isReady
                :boolean 
            :p files
                :ref PackiFiles
            :p error
                :optional 
                :ref Error
        #
            # 
            # Fetch code from a remote source (if provided) before rendering the main app
            # 
    export-default 
        class AsyncApp
            super React.Component
                :param 
                    :ref Props
                :param 
                    :ref AsyncState
            ctor 
                param props
                    :ref Props
                _ super(props)
                try 
                    const files = getFilesFromQuery(props.query, DEFAULT_CODE)
                    const isReady
                        op! 
                            _ Object.values(files).find
                                => 
                                    param file
                                        :any 
                                    +
                                        @expr file.url
                    set this.state =
                        { 
                            @ files
                            @ isReady
                catch e
                    set this.state =
                        { 
                            @ error e
                            @ files DEFAULT_CODE
                            @ isReady true
            m componentDidMount
                if !this.state.isReady
                    _ this.loadFilesAsync(this.state.files)
                else
                    if this.state.error
                        _ alert(this.state.error.message)
            m loadFilesAsync
                async
                :private 
                param files
                    :any 
                const MIN_LOADING_MS = 1500
                    # Minimum amount of time to show the loading indicator for, so it doesn't
                    # just flicker in and out
                const startTime = Date.now()
                const paths = Object.keys(files)
                    # Load all files with external urls
                try 
                    const contents
                        await 
                            _ Promise.all
                                _ Object.values(files).map
                                    async=> 
                                        param file
                                            :any 
                                        param index
                                            :number 
                                        const path = paths[index]
                                        if file.url
                                            try 
                                                const response
                                                    await 
                                                        _ fetch(file.url)
                                                if !response.ok
                                                    throw 
                                                        new Error
                                                            `lit 
                                                                @ response.status
                                                                + &nbsp;-&nbsp;
                                                                @ response.statusText
                                                const code
                                                    await 
                                                        _ response.text()
                                                return code
                                            catch e
                                                throw 
                                                    new Error
                                                        `lit 
                                                            + We were unable to load code for file "
                                                            @ path
                                                            + " (
                                                            @ e.message
                                                            + )
                                        else
                                            if file.contents
                                                return file.contents
                                            else
                                                throw 
                                                    new Error
                                                        `lit 
                                                            + No code specified for file "
                                                            @ path
                                                            + "
                    set files =
                        { 
                            @ ...files
                    _ paths.forEach
                        => 
                            param path
                            param index
                            set files[path] =
                                { 
                                    @ type files[path].type
                                    @ contents contents[index]
                catch e
                    _ alert(e.message)
                    set files =
                        { 
                            @ ...files
                    _ paths.forEach
                        => 
                            param path
                            set files[path] =
                                { 
                                    @ type files[path].type
                                    @ contents ''
                    _ this.setState
                        { 
                            @ isReady true
                            @ files
                    return 
                const duration = Date.now() - startTime
                    # Upon load, show the whole Packi
                _ setTimeout
                    => 
                        _ this.setState
                            { 
                                @ isReady true
                                @ files
                    iif duration < MIN_LOADING_MS
                        then MIN_LOADING_MS - duration
                        else 0
            m render
                if this.state.isReady
                    return 
                        < MainContainer 
                            @ {...this.props}
                            @ files {this.state.files}
                else
                    return 
                        div 
                            @ className {css(styles.container)}
                            div 
                                @ className {css(styles.logo)}
                                < AnimatedLogo 
                            p 
                                @ className {css(styles.loadingText)}
                                + Loading code from external source...
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ flexDirection 'column'
                    @ display 'flex'
                    @ height '100%'
                    @ width '100%'
                    @ alignItems 'center'
                    @ justifyContent 'center'
                { logo
                    @ transform 'scale(0.5)'
                    @ opacity 0.9
                { loadingText
                    @ marginTop 0
                    @ opacity 0.7
                    @ fontSize 18
