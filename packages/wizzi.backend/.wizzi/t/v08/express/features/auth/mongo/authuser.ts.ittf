$group
    $params &md
    import
        @ Schema
        @ Model
        @ model
        from "mongoose"
    import
        @ ModelBuilderType
        from "../../app/types"
    import
        @ IAuthUserModel
        from "../types"
    const crypto = require('crypto')
    $if wzCtx.Build.useJwt
        const jwt = require('jsonwebtoken')
    +
    const AuthUserSchema
        new Schema
            :param IAuthUserModel
            {
                { userName
                    @ type String
                { realName
                    @ type String
                { email
                    @ type String
                { hash
                    @ type String
                { salt
                    @ type String
            {
                @ collection 'users'
    set AuthUserSchema.methods.setPassword =
        function
            param password
                :string
            set this.salt = crypto.randomBytes(16).toString('hex')
            set this.hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex')
            _ console.log('features.auth.mongo.AuthUser.setPassword.salt,hash', this.salt, this.hash)
    set AuthUserSchema.methods.validatePassword =
        function
            param password
                :string
            :return
                :boolean
            const hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex')
            _ console.log('features.auth.mongo.AuthUser.validatePassword.hash,this.hash', hash, this.hash)
            return this.hash === hash
    $if wzCtx.Build.useJwt
        set AuthUserSchema.methods.generateJWT =
            function
                const today = new Date()
                const expirationDate = new Date(today)
                _ expirationDate.setDate(today.getDate() + 60)
                return
                    _ jwt.sign
                        {
                            @ email this.email
                            @ id this._id
                            @ exp parseInt(String(expirationDate.getTime() / 1000), 10)
                        @ 'secret'
        set AuthUserSchema.methods.toAuthJSON =
            function
                return
                    {
                        @ _id this._id
                        @ email this.email
                        @ token this.generateJWT()
    +
    export
        :type AuthUserModelType
            :ref Model
                :param
                    :ref IAuthUserModel
    +
    let authUserModel
        :ref AuthUserModelType
    +
    export
        function GetAuthUserModel
            :return
                :ref AuthUserModelType
            return authUserModel
    +
    export
        const AuthUserModelBuilder
            :ref ModelBuilderType
            =
                {
                    @ buildModel
                        =>
                            set authUserModel =
                                _ model
                                    :param
                                        :ref IAuthUserModel
                                    @ "AuthUser"
                                    @ AuthUserSchema