module
    import EventEmitter
        @ ListenerFn
        from 'eventemitter3'
    class TimedService
        p timer
            :ref NodeJS.Timeout
        p frequence
            :number 
        p payload
            :any 
        p action
            :=> 
                :void 
                param payload
                    :any 
        ctor 
            param payload
                :any 
            param frequence
                :number 
            param action
                :=> 
                    :void 
                    param payload
                        :any 
            set this.payload = payload
            set this.frequence = frequence
            set this.action = action
            set this.timer =
                _ setTimeout
                    => 
                        _ this.action(this.payload)
                    @ this.frequence
        m setPayload
            param payload
                :any 
            param reset
                :boolean 
                := true
            set this.payload = payload
            if reset
                _ clearInterval(this.timer)
                set this.timer =
                    _ setTimeout
                        => 
                            _ this.action(this.payload)
                        @ this.frequence
        m setFrequence
            param frequence
                :number 
            param reset
                :boolean 
                := true
            set this.frequence = frequence
            if reset || frequence == 0
                _ clearInterval(this.timer)
                if frequence > 0
                    set this.timer =
                        _ setTimeout
                            => 
                                _ this.action(this.payload)
                            @ this.frequence
    class EventService
        p eventEmitter
            :ref EventEmitter
        p timedServices
            :{ 
                :index 
                    :ref TimedService
                    param k
                        :string 
            { 
        ctor 
            set this.eventEmitter = new EventEmitter()
        m on
            param eventName
                :string 
            param listener
                :ref ListenerFn
            _ this.eventEmitter.on(eventName, listener)
        m off
            param eventName
                :string 
            param listener
                :ref ListenerFn
            _ this.eventEmitter.removeListener(eventName, listener)
        m emit
            param event
                :string 
            param payload
                :any 
            param error = false
            _ this.eventEmitter.emit(event, payload, error)
        m setTimed
            param event
                :string 
            param onOff
                :boolean 
            param payload
                :any 
                :optional 
            param frequence
                :number 
                :optional 
            let ts = this.timedServices[event]
            if ts
                if !onOff
                    _ ts.setFrequence(0)
                else
                    set payload && ts.setPayload(payload)
                    set frequence && ts.setFrequence(frequence)
            else
                set this.timedServices[event] =
                    new TimedService
                        @ payload
                        set frequence || 1000
                        => 
                            param payload
                                :any 
                            _ this.emit(event, payload)
        m getEventEmitter
            return this.eventEmitter
    let _eventService
        :ref EventService
    export 
        function getEventServiceInstance
            :return
                :ref EventService
            if !_eventService
                set _eventService = new EventService()
            return _eventService
