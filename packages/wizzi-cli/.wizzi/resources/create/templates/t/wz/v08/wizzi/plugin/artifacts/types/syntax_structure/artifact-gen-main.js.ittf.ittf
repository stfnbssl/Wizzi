$group
    +
    const noindent
        {
            @ indent false
    +
    async-md${openPar} sample )
        log "ctx.keys", Object.keys(ctx)
        log "ctx.values property", ctx.values
        log 'tag sample, nodes', model.nodes.length

        set ctx.values.docxStack = []
        set ctx.values.docxCounter = 0
        var docxNode = "docx_doc_" + (++ctx.values.docxCounter)
        _ ctx.values.docxStack.push(docxNode)
        
        _ ctx.w('import * as fs from "fs";')
        _ ctx.w('import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, ShadingType, Table, TableCell, TableRow, TableLayoutType, WidthType } from "docx";')
        _ ctx.w('')
        _ ctx.w('const ' + docxNode + ' = new Document();')
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w('')
                _ ctx.w('Packer.toBuffer(' + docxNode + ').then((buffer) => {')
                _ ctx.w('    fs.writeFileSync("My Document.docx", buffer);')
                _ ctx.w('    console.log("DONE written")')
                _ ctx.w('});')
                r_cb${openPar})

    +
    async-md${openPar} section )
        log 'tag section, value', model.wzName
        
        var docxParent = ctx.values.docxStack[ctx.values.docxStack.length-1]
        var docxNode = "docx_sect_" + (++ctx.values.docxCounter)
        _ ctx.values.docxStack.push(docxNode)
        _ ctx.w('const ' + docxNode + ' = { properties: {}, children: [] };')
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w(docxParent + '.addSection(' + docxNode + ');')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})
    +
    async-md${openPar} p )
        
        sampleNode.js( par )
        _ ctx.w('const ' + docxNode + ' = { children: [] };')        
        
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w('const ' + docxNode + 'Obj = new Paragraph(' + docxNode + ');')        
                _ ctx.w(docxParent + '.children.push(' + docxNode + 'Obj);')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})
    +
    async-md${openPar} text )
        log 'tag text, value', model.wzName

        sampleNode.js( txt )
        
        _ ctx.w('const ' + docxNode + ' = {};')
        _ ctx.w(docxNode + '.text = "' + model.wzName + '";')
       
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w('const ' + docxNode + 'Obj = new TextRun(' + docxNode + ');')        
                _ ctx.w(docxParent + '.children.push(' + docxNode + 'Obj);')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})

    +
    async-md${openPar} h1 )

        sampleNode.js( txt )
        _ ctx.w('const ' + docxNode + ' = {};')
        _ ctx.w(docxNode + '.text = "' + model.wzName + '";')
        _ ctx.w(docxNode + '.heading = HeadingLevel.HEADING_1;')
       
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w('const ' + docxNode + 'Obj = new TextRun(' + docxNode + ');')        
                _ ctx.w(docxParent + '.children.push(' + docxNode + 'Obj);')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})

    +
    async-md${openPar} h2 )

        sampleNode.js( txt )
        _ ctx.w('const ' + docxNode + ' = {};')
        _ ctx.w(docxNode + '.text = "' + model.wzName + '";')
        _ ctx.w(docxNode + '.heading = HeadingLevel.HEADING_2;')
       
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w('const ' + docxNode + 'Obj = new TextRun(' + docxNode + ');')        
                _ ctx.w(docxParent + '.children.push(' + docxNode + 'Obj);')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})

    $*
    async-md${openPar} xbreak )
        var docxParent = ctx.values.docxStack[ctx.values.docxStack.length-1]
        _ ctx.w(docxParent + '.break = true;')
        r_cb${openPar})
    *$

    textNode.js( bold ) 
        _ ctx.w(docxParent + '.bold = true;')
    textNode.js( italic ) 
        _ ctx.w(docxParent + '.italic = true;')
    nodeProperty.js( xbreak, break, true )
    nodeProperty.js( size, size )
    nodeProperty.js( color, color, string )
    nodeProperty.js( fill, fill, string )
    nodeProperty.js( xname, name, string )
    nodeProperty.js( highlight, highlight, string )

    async-md${openPar} xtype )
        var docxParent = ctx.values.docxStack[ctx.values.docxStack.length-1]
        if model.wzParent.wzElement == 'shading'
            _ ctx.w(docxParent + '.type = ShadingType.' + model.wzName + ';')
        elif model.wzParent.wzElement == 'width'
            _ ctx.w(docxParent + '.type = WidthType.' + model.wzName + ';')
        else
            _ ctx.w(docxParent + '.type = "' + model.wzName + '";')
        r_cb${openPar})
    
    +
    async-md${openPar} font )

        sampleNode.js( fnt )
        _ ctx.w('const ' + docxNode + ' = {};')
       
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w(docxParent + '.font = ' + docxNode + ';')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})

    +
    async-md${openPar} shading )

        sampleNode.js( shd )
        _ ctx.w('const ' + docxNode + ' = {};')
       
        _ md.genItems
            @ model.nodes
            @ ctx
            @ noindent
            a_cb${openPar})
                _ ctx.w(docxParent + '.shading = ' + docxNode + ';')
                _ ctx.values.docxStack.pop()
                r_cb${openPar})

    objectNode.js( table, Table )   
        _ ctx.w(docxNode + '.rows = [];')
        $append close
            _ ctx.w(docxParent + '.children.push(' + docxNode + 'Obj);')

    objectNode.js( tr, TableRow )   
        _ ctx.w(docxNode + '.children = [];')
        _ ctx.w(docxNode + '.layout = TableLayoutType.FIXED;')
        $append close
            _ ctx.w(docxParent + '.rows.push(' + docxNode + 'Obj);')

    objectNode.js( td, TableCell )   
        _ ctx.w(docxNode + '.children = [];')
        $append close
            _ ctx.w(docxParent + '.children.push(' + docxNode + 'Obj);')

    objectNode.js( width )   
        $append close
            _ ctx.w(docxParent + '.width = ' + docxNode + ';')
