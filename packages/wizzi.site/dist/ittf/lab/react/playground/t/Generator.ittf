$group

    $include generator/styled

    react Generator
    
        ctor
            set this.state
                {
                    @ content null
                    @ generated null
                    @ generationError null
                    
        did-mount
            _ this.setValues
            
            set this.executeValuesChangeDebounced
                _ wz.debounce
                    =>
                        param value
                        _ this.generate
                            @ value
                    @ 1000

        did-update
            if this.props.packiFiles != prevProps.packiFiles
                _ this.setValues
        
        m setValues
            if this.props.packiFiles
                log 'Generator.setValues.this.props.packiFiles', this.props.packiFiles
                log 'Generator.setValues.this.props.selectedEditPath', this.props.selectedEditPath
                const ittfContentFile = this.props.packiFiles[this.props.selectedEditPath]
                _ this.setState
                    {
                        @ content ittfContentFile.contents
                        @ generated null
                        @ generationError null
                    =>
                        _ this.executeValuesChangeDebounced
                            @ ittfContentFile.contents
        
        => handleChange
            param value
            _ this.props.onChange
                @ this.props.selectedEditPath
                @ value
            _ this.executeValuesChangeDebounced
                @ value

        $include generator/methods
        $$ $include generator/handlers

        render
            if !this.state.content
                return
                    h1 
                        + ...loading...

            log 'Generator.render.props', this.props
            log 'Generator.render.state', this.state

            return
                < React.Fragment
                    < GeneratorRoot
                        h1 
                            + Generator
                        < FlexRow
                            < FlexColumn
                                @ width '12%'
                                < PropertyFieldset
                                    < PropertyLabel
                                        + main ittf
                                    < PropertyInput
                                        @ type 'checkbox'
                                {
                                    && 
                                        + this.props.fragmentList && this.props.fragmentList.length > 0
                                        div
                                            < FileListTitle
                                                + Fragments
                                            {
                                                _ this.props.fragmentList.map
                                                    =>
                                                        param frag
                                                        param ndx
                                                        < FileListItem
                                                            @ key {ndx}
                                                            + {frag}
                                {
                                    && 
                                        + this.props.contextList && this.props.contextList.length > 0
                                        div
                                            < FileListTitle
                                                + Contexts
                                            {
                                                _ this.props.contextList.map
                                                    =>
                                                        param ctx
                                                        param ndx
                                                        < FileListItem
                                                            @ key {ndx}
                                                            + {ctx.path}
                            < FormControl
                                @ width '44%'
                                < ControlLabel
                                    + Ittf content
                                < ReactAce 
                                    @ mode {'text'}
                                    @ code {this.state.content}
                                    @ width '100%'
                                    @ height '100%'
                                    @ onChange {this.handleChange}
                            < FormControl
                                @ width '44%'
                                < ControlLabel
                                    + Generated
                                < ReactAce 
                                    @ mode {'text'}
                                    @ code {this.state.generated}
                                    @ width '100%'
                                    @ height '100%'

                    $$ $include rule/modals