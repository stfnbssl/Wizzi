module
    import 
        as path
        from 'path'
    import 
        @ callApi
        from '../../utils/api'
    import 
        as bfs
        from '../../db/browserfs'
    import 
        @ config
        from '../config'
    import 
        @ PackiFiles
        @ CreatePackiOptions
        @ PackiTemplate
        from './types'
    import 
        @ INITIAL_CODE
        from './defaults'
    import 
        @ rejects
        from 'assert'
    :type cb
        :< T
        :=> 
            :void 
            param err
                :union 
                    :any 
                    :null 
            param result
                :ref T
                :optional 
    export 
        async-function getPackiList
            :return
                :ref Promise
                    :param 
                        :[ 
                            :string 
            return 
                new Promise
                    async=> 
                        param resolve
                        _ console.log('getPackiList')
                        const allFiles
                            await 
                                _ bfs.getFiles
                                    @expr config.BROWSERFS_PACKIES_ROOT
                                    { 
                                        @ deep true
                        _ console.log('getPackiList.forDebug.allFiles', allFiles)
                        const folders
                            await 
                                _ bfs.getFolders
                                    @expr config.BROWSERFS_PACKIES_FOLDER
                                    { 
                                        @ deep false
                        _ console.log('getPackiList', folders)
                        const ret
                            :[ 
                                :string 
                            = []
                        _ folders.forEach
                            => 
                                param folder
                                _ ret.push(path.basename(folder.fullPath))
                        _ resolve(ret)
    export 
        async-function getPackiFiles
            param packiId
                :string 
            :return
                :ref Promise
                    :param 
                        :ref PackiFiles
            const folderPath = path.join(config.BROWSERFS_PACKIES_FOLDER, packiId)
            return 
                new Promise
                    async=> 
                        param resolve
                        const files
                            await 
                                _ bfs.getFiles
                                    @ folderPath
                                    { 
                                        @ deep true
                                        @ documentContent true
                        const ret
                            :ref PackiFiles
                            =
                                { 
                        _ files.forEach
                            => 
                                param file
                                set ret[file.relPath] =
                                    { 
                                        @ type 'CODE'
                                        @ contents
                                            ( 
                                                @expr file.content
                                                    :as 
                                                        :string 
                        _ resolve(ret)
    export 
        async-function downloadPackiTemplate
            param templateName
                :string 
            :return
                :ref Promise
                    :param 
                        :ref PackiTemplate
            _ console.log('packi.data.downloadPackiTemplate', templateName)
            return 
                new Promise
                    async=> 
                        param resolve
                        param reject
                        const res
                            await 
                                _ callApi('get', config.API_URL, 'templates/' + templateName)
                        _ console.log('packi.data.downloadPackiTemplate.res', res)
                        if res.error
                            return reject(res.error)
                        const files
                            :ref PackiFiles
                            =
                                { 
                        _ res.forEach
                            => 
                                param element
                                    :any 
                                set files[element.relPath] =
                                    { 
                                        @ contents element.content
                                        @ type 'CODE'
                        _ resolve
                            { 
                                @ id templateName
                                @ files
    export 
        async-function createPacki
            param packiId
                :string 
            param options
                :ref CreatePackiOptions
            :return
                :ref Promise
                    :param 
                        :ref PackiFiles
            return 
                new Promise
                    async=> 
                        param resolve
                        if typeof options.data === 'string'
                            const packiTemplate
                                await 
                                    _ downloadPackiTemplate
                                        @expr options.data
                                            :as 
                                                :string 
                            await 
                                _ savePackiFiles(packiId, packiTemplate.files)
                            return resolve(packiTemplate.files)
                        else
                            await 
                                _ savePackiFiles(packiId, options.data)
                            return resolve(options.data)
    export 
        async-function deletePacki
            param packiId
                :string 
            :return
                :ref Promise
                    :param any
            const folderPath = path.join(config.BROWSERFS_PACKIES_FOLDER, packiId)
            _ console.log('deletingPackiFiles', packiId)
            return bfs.deleteFolder(folderPath)
    async-function asyncmap
        param coll
            :[ 
                :any 
        param mapper
            :any 
        param callback
            :ref cb
                :param any
        let newColl
            :[ 
                :any 
            = []
        const len = coll.length
        const repeat
            => 
                param index
                    :number 
                :return
                    :void 
                if index == len
                    return callback(null, newColl)
                _ console.log('asyncmap', index, coll[index])
                _ mapper
                    @expr coll[index]
                    => 
                        param err
                        param result
                        if err
                            return callback(err)
                        _ newColl.push(result)
                        _ repeat(index + 1)
        _ repeat(0)
    export 
        async-function savePackiFiles
            param packiId
                :string 
            param files
                :ref PackiFiles
            :return
                :ref Promise
                    :param void
            const folderPath = path.join(config.BROWSERFS_PACKIES_FOLDER, packiId)
            _ console.log('savingPackiFiles', packiId)
            return 
                new Promise
                    async=> 
                        param resolve
                        param reject
                        await 
                            _ bfs.deleteFolder(folderPath)
                        const keys = Object.keys(files)
                        _ console.log('files to load', keys)
                        _ asyncmap
                            @ keys
                            async=> 
                                param k
                                    :string 
                                param callback
                                    :ref cb
                                        :param any
                                const file = files[k]
                                _ console.log('savePackiFiles file', file)
                                await 
                                    _ bfs.writeFile(path.join(config.BROWSERFS_PACKIES_FOLDER, packiId, k), file.contents)
                                _ console.log('savePackiFiles.written', path.join(config.BROWSERFS_PACKIES_FOLDER, packiId, k))
                                _ callback(null)
                            async=> 
                                param err
                                param result
                                if err
                                    return reject(err)
                                const isDirectory
                                    await 
                                        _ bfs.isDirectory(folderPath)
                                _ console.log('savePackiFiles.isDirectory', isDirectory, folderPath)
                                const savedfiles
                                    await 
                                        _ bfs.getFiles
                                            @ folderPath
                                            { 
                                                @ deep true
                                _ console.log('savePackiFiles.savedfiles', savedfiles, folderPath)
                                _ resolve()
    export 
        async-function assertDefaultPacki
            :return
                :ref Promise
                    :param void
            const folderPath = path.join(config.BROWSERFS_PACKIES_FOLDER, config.DEFAULT_PACKI_NAME)
            _ console.log('assertDefaultPacki.folderPath', folderPath)
            return 
                new Promise
                    async=> 
                        param resolve
                        const isDirectory
                            await 
                                _ bfs.isDirectory(folderPath)
                        _ console.log('assertDefaultPacki.isDirectory', isDirectory, folderPath)
                        const files
                            await 
                                _ bfs.getFiles
                                    @ folderPath
                                    { 
                                        @ deep true
                        _ console.log('assertDefaultPacki.files', files, folderPath)
                        if isDirectory
                            _ console.log('assertDefaultPacki.already exists', folderPath)
                            return resolve()
                        const downloaded
                            await 
                                _ downloadPackiTemplate('__starter')
                        _ console.log('assertDefaultPacki.saved', downloaded)
                        const saved
                            await 
                                _ savePackiFiles(config.DEFAULT_PACKI_NAME, downloaded.files)
                        _ console.log('assertDefaultPacki.saved', saved)
                        return resolve()
