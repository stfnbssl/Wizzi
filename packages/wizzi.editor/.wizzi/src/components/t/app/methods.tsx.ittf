$group

    m getDerivedStateFromProps
        static
        param _props
            :ref Props
        param state
            :ref State
        $if wzCtx.Build.useExpoPreview
            if typeof window !== 'undefined'
                let webPreviewURL = state.session.webPreviewURL
                if state.isLocalWebPreview
                    set webPreviewURL =
                        `lit 
                            + 
                            @ window.location.origin
                            + /web-player/localhost/index.html?initialUrl=
                            _ encodeURIComponent(state.session.url)
                            + &origin=
                            _ encodeURIComponent(window.location.origin)
                            + &verbose=true
                if state.webPreviewURL !== webPreviewURL
                    _ state.session.transports['webplayer']?.updateOrigin?.(new URL(webPreviewURL).origin)
                        # Dirty hack to update the origin that the transport uses to communicate
                        # with the web-player. The transport origin is initialized from the initial
                        # `webPreviewURL` value, but is re-written here to use the origin from the
                        # actual in use `webPreviewURL`.
                        # TODO: Remove this one SDK 39 has been deprecated
                        # @ts-ignore See above
                    return 
                        { 
                            @ webPreviewURL
        return null
    +
    m componentDidMount
        $if wzCtx.Build.useExpo
            if this.state.verbose
                _ console.info
                    `lit 
                        + %c INFO&nbsp;
                    `lit 
                        + background: #2196f3; color: #fff
                    @ 'Verbose logging is enabled, open the web-preview in a popup to view runtime logs'
            if window.__packi_embedded_session
                set window.__packi_embedded_session = undefined
            if this.state.verbose && process.env.NODE_ENV !== 'production'
                set Analytics.getInstance().verbose = true
            if window.location.host.includes('expo.io')
                _ Raven.config('https://6501f7d527764d85b045b0ce31927c75@sentry.io/191351').install()
                const build_date = new Date(process.env.BUILD_TIMESTAMP ?? 0).toUTCString()
                _ Raven.setTagsContext
                    { 
                        @ build_date
                _ Analytics.getInstance().identify
                    { 
                        @ build_date
            _ Analytics.getInstance().setCommonData
                { 
                    @ packiId this.state.session.id
                    @ isEmbedded !!this.props.isEmbedded
                    @ previewPane
                        iif this.state.devicePreviewShown
                            then this.state.devicePreviewPlatform
                            else 'hidden'
            if this.state.wasUpgraded
                _ Analytics.getInstance().logEvent
                    @ 'LOADED_UNSUPPORTED_VERSION'
                    { 
                        @ requestedVersion this.state.initialSdkVersion
                        @ packiId this.props.match.params.id
            _ Analytics.getInstance().logEvent
                @ 'LOADED_PACKI'
                { 
                    @ sdkVersion this.state.session.sdkVersion
        set this._PackiStateListener = this._PackiSession.addStateListener(this._handleSessionStateChange)
        $if wzCtx.Build.useExpoLog
            set this._packiLogListener = this._packi.addLogListener(this._handleSessionLog)
        _ this._PackiSession.setDisabled(false)
        set this._isFocused = document.hasFocus()
        set this._focusTimer = window.setInterval(this._handleFocusChangeInterval, 500)
        $if wzCtx.Build.useExpo
            _ window.addEventListener('unload', this._handleUnload)
            if this.props.query.saveToAccount === 'true'
                if this._PackiSession.getState().user
                    _ this._saveAsync()

        _ this.generateSelectedFile

    +
    m componentWillUnmount
        _ this._PackiStateListener?.()
        $if wzCtx.Build.useExpo
            _ this._packiLogListener?.()
        _ this._PackiSession.setDisabled(true)
        _ this._PackiSession.setOnline(false)
        $if wzCtx.Build.useExpo
            _ window.removeEventListener('unload', this._handleUnload)
        _ clearInterval(this._focusTimer)
        set this._focusTimer = undefined
    +
    m componentDidUpdate
        param prevProps
            :ref Props
        param prevState
            :ref State
        if this.props.viewer !== prevProps.viewer
            const sessionSecret = this.props.getSessionSecret()
            if this.state.session.user?.sessionSecret !== sessionSecret
                _ this._PackiSession.setUser
                    iif sessionSecret
                        then
                            { 
                                @ sessionSecret
                        else undefined

    m generateSelectedFile
        const path = this.state.selectedFile
        if path && path.length > 0
            if this.props.preferences.autoGenSingleDoc
                if path.endsWith('.ittf') && ('/'+path).indexOf('/t/') < 0
                    # TODO filter *.ittf of type == 'CODE'
                    _ this.props.dispatchGenerateArtifact
                        @ path
                        @ this.state.session.files
