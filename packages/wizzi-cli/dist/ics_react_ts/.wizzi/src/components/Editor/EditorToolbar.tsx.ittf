module
    import 
        as React
        from 'react'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import 
        @ prefTypes
        @ withThemeName
        from '../../features/preferences'
    import 
        @ authTypes
        from '../../features/auth'
    import 
        @ withStyles
        @ createStyles
        @ Theme
        from '@material-ui/core/styles'
    import AppBar from '@material-ui/core/AppBar'
    import Toolbar from '@material-ui/core/Toolbar'
    import Typography from '@material-ui/core/Typography'
    import Button from '@material-ui/core/Button'
    import Tooltip from '@material-ui/core/Tooltip'
    import IconButton from '@material-ui/core/IconButton'
    import SvgIcon from '@material-ui/core/SvgIcon'
    import Divider from '@material-ui/core/Divider'
    import Avatar from '@material-ui/core/Avatar'
    import Select from '@material-ui/core/Select'
    import MenuItem from '@material-ui/core/MenuItem'
    import PlayArrowIcon from '@material-ui/icons/PlayArrow'
    import CreateIcon from '@material-ui/icons/Create'
    import SaveIcon from '@material-ui/icons/Save'
    import CloudUploadIcon from '@material-ui/icons/CloudUpload'
    import ExtensionIcon from '@material-ui/icons/Extension'
    import GithubIcon from '../../styles/svgIcons/Github'
    import Drawer from '@material-ui/core/Drawer'
    import List from '@material-ui/core/List'
    import ListItem from '@material-ui/core/ListItem'
    import ListItemIcon from '@material-ui/core/ListItemIcon'
    import ViewListIcon from '@material-ui/icons/ViewList'
    import HelpIcon from '@material-ui/icons/Help'
    import 
        @ appTypes
        from '../../features/app'
    import 
        @ packiTypes
        from '../../features/packi'
    import ToolbarShell from '../Shell/ToolbarShell'
        # import Button from '../shared/Button';
    import ToolbarTitleShell from '../Shell/ToolbarTitleShell'
    import IconButton2 from '../shared/IconButton'
    import AppSidebar from '../Common/AppSidebar'
    import EditorTitle from './EditorTitle'
    import EditorImportTitle from './EditorImportTitle'
    import ModalAuthentication from '../Auth/ModalAuthentication'
        # import SearchButton from './Search/SearchButton';
        # import UserMenu from './UserMenu';
    import 
        @ Layout
        from '../Common/Constants'
    :type State
        :{ 
            :p isLoggingIn
                :boolean 
    :type Props
        :intersect 
            :ref authTypes.AuthProps
            :{ 
                :p classes
                    :any 
                :p currentPacki
                    :ref packiTypes.Packi
                :p saveStatus
                    :ref packiTypes.SaveStatus
                :p saveHistory
                    :ref packiTypes.SaveHistory
                :p loggedUser
                    :union 
                        :ref appTypes.LoggedUser
                        :undefined 
                :p splitViewKind
                    :string 
                :p isDownloading
                    :boolean 
                :p isAuthModalVisible
                    :boolean 
                    # isResolving: boolean;
                :p isEditModalVisible
                    :boolean 
                :p isWizziJobWaiting
                    :boolean 
                :p onShowPreviousSaves
                    :=> 
                        :void 
                    #
                        # 
                        # onSubmitMetadata: (
                        # details: {
                        # name: string;
                        # description: string;
                        # },
                        # draft?: boolean
                        # ) => Promise<void>;
                        # 
                :p onShowEditModal
                    :=> 
                        :void 
                :p onDismissEditModal
                    :=> 
                        :void 
                :p onShowAuthModal
                    :=> 
                        :void 
                :p onDismissAuthModal
                    :=> 
                        :void 
                :p onChangeSplitViewKind
                    :=> 
                        :void 
                        param e
                            :ref React.ChangeEvent
                                :param 
                                    :ref HTMLSelectElement
                :p onExecuteWizziJob
                    :=> 
                        :void 
                :p onShowPackiManager
                    :=> 
                        :void 
                :p onShowGithubCommit
                    :=> 
                        :void 
                :p onShowGithubCreate
                    :=> 
                        :void 
                :p onSaveCode
                    :=> 
                        :void 
                :p creatorUsername
                    :optional 
                    :string 
                :p theme
                    :ref prefTypes.ThemeName
    class EditorToolbar
        super React.PureComponent
            :param 
                :ref Props
            :param 
                :ref State
        p state
            { 
                @ isLoggingIn false
        => _handleShowAuthModal
            _ this.setState
                { 
                    @ isLoggingIn true
            _ this.props.onShowAuthModal()
        => _handleDismissAuthModal
            _ this.setState
                { 
                    @ isLoggingIn false
            _ this.props.onDismissAuthModal()
        m render
            const 
                { 
                    @ classes
                    @ creatorUsername
                    @ theme
                    @ currentPacki
                    @ saveHistory
                    @ saveStatus
                    @ loggedUser
                    @ isDownloading
                    @ isEditModalVisible
                        # isResolving,
                    @ isAuthModalVisible
                    @ isWizziJobWaiting
                    @ onLoggedOn
                    @ onLoggedOff
                    @ onShowPreviousSaves
                        # onSubmitMetadata,
                    @ onShowEditModal
                    @ onDismissEditModal
                    @ onExecuteWizziJob
                        # onDownloadCode,
                    @ onShowPackiManager
                    @ onShowGithubCommit
                    @ onShowGithubCreate
                    @ onSaveCode
                        # onPublishAsync,
                = this.props
            const isPublishing = saveStatus === 'publishing'
                # console.log('EditorToolbar.currentPacki', currentPacki);
            const isPublished = saveStatus === 'published'
            return 
                < React.Fragment 
                    { 
                        # 
                            # <ToolbarShell>
                    < AppBar 
                        @ className {classes.appBar}
                        @ position "static"
                        < Toolbar 
                            < Typography 
                                @ variant "h4"
                                @ color "inherit"
                                @ className {classes.grow}
                                + PACKI
                            { 
                                iif loggedUser && currentPacki && currentPacki.localPackiData && currentPacki.localPackiData.owner
                                    then
                                        < Typography 
                                            @ variant "h6"
                                            @ color "inherit"
                                            @ className {classes.grow}
                                            + {currentPacki.localPackiData.owner}
                                            + /
                                            + {currentPacki.localPackiData.repoName}
                                    else
                                        iif loggedUser && currentPacki && currentPacki.localPackiData
                                            then
                                                < Typography 
                                                    @ variant "h6"
                                                    @ color "inherit"
                                                    @ className {classes.grow}
                                                    + {currentPacki.localPackiData.id}
                                            else null
                            { 
                                iif loggedUser
                                    then
                                        < Button 
                                            @ variant "contained"
                                            @ size "small"
                                            @ className {classes.buttonIcon}
                                            @ onClick {onShowPackiManager}
                                            + Manage Packies
                                            < ExtensionIcon 
                                                @ className {classes.rightIcon}
                                    else null
                            { 
                                iif loggedUser && currentPacki
                                    then
                                        < React.Fragment 
                                            < Divider 
                                            < Button 
                                                @ variant "contained"
                                                @ size "small"
                                                @ className {classes.buttonIcon}
                                                @ onClick {onSaveCode}
                                                + Save
                                                < SaveIcon 
                                                    @ className {classes.rightIcon}
                                    else null
                            < Select 
                                @ value {this.props.splitViewKind}
                                @ onChange {this.props.onChangeSplitViewKind}
                                < MenuItem 
                                    @ value {'left'}
                                    + Left
                                < MenuItem 
                                    @ value {'right'}
                                    + Right
                                < MenuItem 
                                    @ value {'both'}
                                    + Both
                            { 
                                # 
                                    # <SearchButton />
                                    # {/* fill="#1DAEFF", fill="#1D94DD"
                            { 
                                # 
                                    # <UserMenu onLogInClick={this._handleShowAuthModal} />
                            < Tooltip 
                                @ title {'View on github'}
                                @ enterDelay {300}
                                < IconButton 
                                    @ component "a"
                                        # edge="end"
                                    @ color "inherit"
                                    @ href "https://github.com/stfnbsslki"
                                    @ aria-label {'View on github'}
                                    @ data-ga-event-category "AppBar"
                                    @ data-ga-event-action "github"
                                    < GithubIcon 
                            { 
                                iif loggedUser
                                    then
                                        < React.Fragment 
                                            < Divider 
                                            < Button 
                                                @ variant "contained"
                                                @ size "small"
                                                @ disabled {!isWizziJobWaiting}
                                                @ className {classes.buttonIcon}
                                                @ onClick {onExecuteWizziJob}
                                                + Gen
                                                < PlayArrowIcon 
                                                    @ className {classes.rightIcon}
                                            < Button 
                                                @ color "inherit"
                                                @ onClick {this._handleShowAuthModal}
                                                < Avatar 
                                                    @ alt {loggedUser.displayName}
                                                    @ src {loggedUser.picture}
                                                    @ className {classes.avatar}
                                    else
                                        < Button 
                                            @ color "inherit"
                                            @ onClick {this._handleShowAuthModal}
                                            + Login
                    < AppSidebar 
                    < ModalAuthentication 
                        @ visible {this.state.isLoggingIn && isAuthModalVisible}
                        @ loggedUser {loggedUser}
                        @ onLoggedOn {onLoggedOn}
                        @ onLoggedOff {onLoggedOff}
                        @ onDismiss {this._handleDismissAuthModal}
                        @ onComplete {this._handleDismissAuthModal}
                    { 
                        # 
                            # </ToolbarShell>
    const styles
        _ StyleSheet.create
            { 
                { logo
                    @ width 36
                    @ height 'auto'
                    @ margin '0 .5em 0 .75em'
                { logoBox
                    @ padding '20px'
                { titleBox
                    @ padding '20px'
                { buttons
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'center'
                    @ position 'relative'
                    @ zIndex 5
                { saveButton
                    @ minWidth 100
                { execWizziJobButton
                    @ minWidth 100
    const muiStyles
        => 
            param theme
                :ref Theme
            _ createStyles
                { 
                    { root
                        @ flexGrow 1
                    { appBar
                        @ zIndex theme.zIndex.drawer + 1
                        @ marginLeft
                            `lit 
                                + 
                                @ Layout.MainDrawerWidth
                                + px
                        @ width
                            `lit 
                                + calc(100% -&nbsp;
                                @ Layout.MainDrawerWidth
                                + px)
                    { grow
                        @ flexGrow 1
                    { menuButton
                        @ marginLeft -12
                        @ marginRight 20
                    { buttonIcon
                        @ margin theme.spacing.unit
                    { rightIcon
                        @ marginLeft theme.spacing.unit
                    { iconSmall
                        @ fontSize 20
                    { avatar
                        @ margin 10
    const ThemedToolbar = withThemeName(EditorToolbar)
    export-default withStyles(muiStyles)(ThemedToolbar)
