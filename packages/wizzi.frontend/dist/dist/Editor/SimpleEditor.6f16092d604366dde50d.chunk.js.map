{"version":3,"file":"Editor/SimpleEditor.6f16092d604366dde50d.chunk.js","sources":["webpack://wizzi.frontend/./src/components/Editor/SimpleEditor.tsx","webpack://wizzi.frontend/./src/components/Editor/themes/colors-dark.tsx","webpack://wizzi.frontend/./src/components/Editor/themes/colors-light.tsx","webpack://wizzi.frontend/./src/components/Editor/themes/simple-editor.tsx"],"sourcesContent":["/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.frontend\\.wizzi\\src\\components\\Editor\\SimpleEditor.tsx.ittf\n    utc time: Sat, 01 May 2021 04:43:27 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport escape from 'escape-html';\nimport {highlight, languages} from 'prismjs/components/prism-core';\nimport React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-markdown';\nimport {withThemeName, ThemeName} from '../../features/preferences/index';\nimport {EditorProps} from './EditorProps';\nimport {light, dark} from './themes/simple-editor';\nexport type SimpleEditorProps = EditorProps & { \n    theme: ThemeName;\n};\n\n// Store selection and undo stack\nconst sessions = new Map();\nclass SimpleEditorComp extends React.Component<SimpleEditorProps> {\n    static defaultProps: Partial<SimpleEditorProps> = {\n        lineNumbers: 'on'\n    }\n    ;\n    static removePath(path: string) {\n        sessions.delete(path);\n    }\n    static renamePath(oldPath: string, newPath: string) {\n        const session = sessions.get(oldPath);\n        sessions.delete(oldPath);\n        sessions.set(newPath, session);\n    }\n    componentDidUpdate(prevProps: SimpleEditorProps) {\n        const editor = this._editor.current;\n        if (this.props.selectedFile !== prevProps.selectedFile && editor) {\n            // Save the editor state for the previous file so we can restore it when it's re-opened\n            sessions.set(prevProps.selectedFile, editor.session);\n            \n            // If we find a previous session for the current file, restore it\n            \n            // Otherwise set the session session to a fresh one\n            const session = sessions.get(this.props.selectedFile);\n            if (session) {\n                editor.session = session;\n            }\n            else {\n                editor.session = {\n                    history: {\n                        stack: [], \n                        offset: -1\n                     }\n                 };\n            }\n        }\n    }\n    _highlight = (path: string, code: string) => {\n        if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n            return highlight(code, languages.ts, 'typescript');\n        }\n        else {\n            if (path.endsWith('.js')) {\n                return highlight(code, languages.jsx, 'jsx');\n            }\n            else {\n                if (path.endsWith('.json')) {\n                    return highlight(code, languages.json, 'json');\n                }\n                else {\n                    if (path.endsWith('.md')) {\n                        return highlight(code, languages.markdown, 'markdown');\n                    }\n                }\n            }\n        }\n        return escape(code);\n    };\n    _handleValueChange = (code: string) => \n        this.props.updateFiles(() => \n        \n            ({\n                [this.props.selectedFile]: {\n                    type: 'CODE', \n                    contents: code\n                 }\n             })\n        );\n    _editor = React.createRef<Editor>();\n    render() {\n        const {\n            selectedFile, \n            lineNumbers, \n            theme, \n            files\n         } = this.props;\n        const file = files[selectedFile];\n        return  (\n            <div\n             className={css(styles.container, lineNumbers === 'on' && styles.containerWithLineNumbers)}>\n                <Editor \n                    \n                    // @ts-ignore\n                    ref={this._editor}\n                    value={file?.type === 'CODE' ? file.contents : ''}\n                    onValueChange={this._handleValueChange}\n                    highlight={(code: string) =>  \n                            lineNumbers === 'on' ? this._highlight(selectedFile, code).split('\\n').map((line: string) => `<span class=\"${css(styles.line)}\">${line}</span>`\n                                ).join('\\n')\n                             : this._highlight(selectedFile, code)\n                    }\n                    padding={lineNumbers === 'on' ? 0 : 8}\n                    className={classnames(css(styles.editor), 'prism-code')}\n                 />\n                <style\n                 type=\"text/css\" dangerouslySetInnerHTML={{\n                        __html: theme === 'dark' ? dark : light\n                     }} />\n            </div>\n            )\n        ;\n    }\n}\nexport const SimpleEditor = withThemeName(SimpleEditorComp);\nexport default withThemeName(SimpleEditorComp);\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1, \n        overflow: 'auto'\n     }, \n    containerWithLineNumbers: {\n        paddingLeft: 64\n     }, \n    editor: {\n        fontFamily: 'var(--font-monospace)', \n        fontSize: 12, \n        minHeight: '100%', \n        counterReset: 'line', \n        overflow: 'visible !important' as any\n     }, \n    line: {\n        ':before': {\n            position: 'absolute', \n            right: '100%', \n            marginRight: 26, \n            textAlign: 'right', \n            opacity: 0.5, \n            userSelect: 'none', \n            counterIncrement: 'line', \n            content: 'counter(line)'\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.frontend\\.wizzi\\src\\components\\Editor\\themes\\colors-dark.tsx.ittf\n    utc time: Sat, 01 May 2021 04:43:27 GMT\n*/\nimport {c} from '../../ThemeProvider';\nimport type {SyntaxColors, UIColors} from './colors-light';\nexport const syntax: SyntaxColors = {\n    text: '#d9d7ce', \n    variable: '#d9d7ce', \n    invalid: '#ff3333', \n    constant: '#ff9d45', \n    comment: '#5c6773', \n    regexp: '#95e6cb', \n    annotation: '#5ccfe6', \n    tag: '#80d4ff', \n    number: '#ff9d45', \n    string: '#bae67e', \n    property: '#5ccfe6', \n    value: '#bae67e', \n    keyword: '#ffae57', \n    operator: '#778899', \n    predefined: '#ff00ff'\n };\nexport const ui: UIColors = {\n    background: c('background', 'dark'), \n    text: '#d9d7ce', \n    selection: '#aaaaaa', \n    indent: {\n        active: '#393b41', \n        inactive: '#494b51'\n     }\n };\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.frontend\\.wizzi\\src\\components\\Editor\\themes\\colors-light.tsx.ittf\n    utc time: Sat, 01 May 2021 04:43:27 GMT\n*/\nimport {c} from '../../ThemeProvider';\nexport const syntax = {\n    text: '#5c6773', \n    variable: '#5c6773', \n    invalid: '#ff3333', \n    constant: '#f08c36', \n    comment: '#abb0b6', \n    regexp: '#4dbf99', \n    annotation: '#41a6d9', \n    tag: '#e7c547', \n    number: '#f08c36', \n    string: '#86b300', \n    property: '#41a6d9', \n    value: '#0451a5', \n    keyword: '#f2590c', \n    operator: '#778899', \n    predefined: '#FF00FF'\n };\nexport const ui = {\n    background: c('background', 'light'), \n    text: '#5c6773', \n    selection: '#cccccc', \n    indent: {\n        active: '#e0e0e0', \n        inactive: '#ecebec'\n     }\n };\nexport type SyntaxColors = typeof syntax;\nexport type UIColors = typeof ui;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.frontend\\.wizzi\\src\\components\\Editor\\themes\\simple-editor.tsx.ittf\n    utc time: Sat, 01 May 2021 04:43:27 GMT\n*/\nimport * as darkColors from './colors-dark';\nimport * as lightColors from './colors-light';\nconst css = String.raw;\nconst theme = ({\n    ui, \n    syntax\n }: { \n    ui: lightColors.UIColors;\n    syntax: lightColors.SyntaxColors;\n}) => \n\n    css`\n  .prism-code {\n    background-color: ${ui.background};\n    color: ${ui.text};\n  }\n\n  .prism-code ::selection {\n    background: ${ui.selection};\n  }\n\n  .prism-code ::-moz-selection {\n    background: ${ui.selection};\n  }\n\n  .prism-code textarea {\n    outline: 0;\n  }\n\n  .prism-code .token.tag,\n  .prism-code .token.property {\n    color: ${syntax.property};\n  }\n\n  .prism-code .token.function {\n    color: ${syntax.constant};\n  }\n\n  .prism-code .token.entity {\n    color: ${syntax.property};\n  }\n\n  .prism-code .token.string,\n  .prism-code .token.selector,\n  .prism-code .token.char,\n  .prism-code .token.builtin,\n  .prism-code .token.inserted {\n    color: ${syntax.string};\n  }\n\n  .prism-code .token.regexp,\n  .prism-code .token.variable {\n    color: ${syntax.regexp};\n  }\n\n  .prism-code .token.keyword,\n  .prism-code .token.atrule,\n  .prism-code .token.tag > .token.punctuation,\n  .prism-code .token.important {\n    color: ${syntax.keyword};\n  }\n\n  .prism-code .token.attr-name {\n    color: ${syntax.number};\n  }\n\n  .prism-code .token.attr-value {\n    color: ${syntax.string};\n  }\n\n  .prism-code .token.markup,\n  .prism-code .token.special {\n    color: ${syntax.predefined};\n  }\n\n  .prism-code .token.comment,\n  .prism-code .token.prolog,\n  .prism-code .token.doctype,\n  .prism-code .token.cdata {\n    color: ${syntax.comment};\n  }\n\n  .prism-code .token.number {\n    color: ${syntax.number};\n  }\n\n  .prism-code .token.constant,\n  .prism-code .token.boolean,\n  .prism-code .token.constant,\n  .prism-code .token.symbol,\n  .prism-code .token.deleted {\n    color: ${syntax.constant};\n  }\n\n  .prism-code .token.operator,\n  .prism-code .token.entity,\n  .prism-code .token.url,\n  .prism-code .language-css .token.string,\n  .prism-code .style .token.string {\n    color: ${syntax.operator};\n  }\n\n  .prism-code .token.punctuation {\n    color: ${syntax.comment};\n  }\n`\n;\nexport const light = theme(lightColors);\nexport const dark = theme(darkColors);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAAA;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;;;;;;AAvDA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AADA;AAEA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAZA;AAeA;AAAA;AACA;AADA;AADA;AAOA;;;AA/FA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;AAZA;AACA;AADA;AAEA;AADA;AACA;AAoGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAfA;AACA;A;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AACA;A;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AACA;A;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAuGA;AACA;AACA;A;;A","sourceRoot":""}