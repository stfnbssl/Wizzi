/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\stfnbssl\wizzi\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Mon, 18 Jan 2021 15:50:13 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var friendsBase = (function () {
    function friendsBase(name, sourceLineInfo) {
        _classCallCheck(this, friendsBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    friendsBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    friendsBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    friendsBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    friendsBase.prototype.wzVerify = function() {
    }
    friendsBase.prototype.wzInitialize = function() {
    }
    friendsBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    friendsBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    friendsBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    friendsBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    friendsBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    friendsBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    friendsBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    friendsBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    friendsBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    friendsBase.prototype.error = function(message, node) {
        throw new _md.friendsModelException(message, node, this);
    }
    return friendsBase;
})();

_md.friendsBase = friendsBase;
// element comment
var comment = (function (friendsBase) {
    _inherits(comment, friendsBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    comment.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'friend') {
            return this.wzLoadToChildColl(child, _md.friend, this.comments);
        }
        if (name === 'friends') {
            return this.wzLoadToChildColl(child, _md.friends, this.comments);
        }
        return false;
    }
    comment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.friendsModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    comment.prototype.wzVerify = function(ctx) {
        this.comments.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.friendsBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        this.comments.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.friendsBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(friendsBase);

_md.comment = comment;
// element friends
var friends = (function (comment) {
    _inherits(friends, comment);
    function friends(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(friends.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, friends);
        this.wzElement = "friends";
        // relation friend
        this.friends = [];
    }
    friends.prototype.addFriend = function(name, sourceLineInfo) {
        var retval = new _md.friend(name, sourceLineInfo);
        retval.wzParent = this;
        this.friends.push(retval);
        return retval;
    }
    friends.prototype.getFriend = function(name) {
        var found = null;
        this.friends.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    friends.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'friend') {
            return this.wzLoadToChildColl(child, _md.friend, this.friends);
        }
        ok = _md.comment.prototype.loadChild.call(this, child);
        return ok;
    }
    friends.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.friendsModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    friends.prototype.wzVerify = function(ctx) {
        this.friends.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.comment.prototype.wzVerify.call(this, ctx);
    }
    friends.prototype.wzInitialize = function(ctx) {
        this.friends.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.comment.prototype.wzInitialize.call(this, ctx);
    }
    return friends;
})(comment);

_md.friends = friends;
// element friend
var friend = (function (comment) {
    _inherits(friend, comment);
    function friend(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(friend.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, friend);
        this.wzElement = "friend";
    }
    friend.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'cell') {
            this.mobilePhone = child.v; return true;
        }
        if (name === 'phone') {
            this.phone = child.v; return true;
        }
        if (name === 'birthday') {
            this.birthday = child.v; return true;
        }
        ok = _md.comment.prototype.loadChild.call(this, child);
        return ok;
    }
    friend.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.friendsModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    return friend;
})(comment);

_md.friend = friend;
_md.__tagElementMapping = { '#': 'comment' };
// model/replaceUnknownElement( )
var friendsModelException = (function () {
    function friendsModelException(message, node, instance) {
        _classCallCheck(this, friendsModelException);
        this.node = node;
        this.instance = instance;
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
    }
    friendsModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: friendsModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return friendsModelException;
})();

_md.friendsModelException = friendsModelException;
var friendsContext = (function () {
    function friendsContext() {
        _classCallCheck(this, friendsContext);
        this.validationErrors = [];
    }
    friendsContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    friendsContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return friendsContext;
})();

_md.friendsContext = friendsContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

