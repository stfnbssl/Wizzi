$group
    $params level|1
    ctor 
        param props
            :ref Props
        _ super(props)
        let name = props.defaults.name
        let description = DEFAULT_DESCRIPTION
        $if wzCtx.Build.useExpo
            let sdkVersion
                :ref SDKVersion
                = DEFAULT_SDK_VERSION
        let code
            :union 
                :ref PackiFiles
                :string 
            = props.files
        $if wzCtx.Build.useExpo
            let dependencies
                iif props.files === DEFAULT_CODE && !props.packi?.code
                    then DEFAULT_DEPENDENCIES
                    else
                        { 
        if props.Packi
            set code = props.Packi.code ?? code
            $if wzCtx.Build.useExpo
                set dependencies = props.Packi.dependencies ?? dependencies
            if props.Packi.manifest
                const 
                    { 
                        @ manifest
                    = props.Packi
                set name = manifest.name
                set description = manifest.description
                $if wzCtx.Build.useExpo
                    set sdkVersion = manifest.sdkVersion ?? sdkVersion
        if props.query
            set name = props.query.name ?? name
            set description = props.query.description ?? description
            $if wzCtx.Build.useExpo
                set sdkVersion =
                    iif props.query.sdkVersion === 'latest'
                        then DEFAULT_SDK_VERSION
                        else props.query.sdkVersion ?? sdkVersion
                        # @ts-ignore: "latest" is not defined in SDKVersion
                    # Allow specifying "latest" in the query to override the Snack SDK version
        $if wzCtx.Build.useExpo
            const initialSdkVersion = sdkVersion
            let wasUpgraded = false
            if !versions.hasOwnProperty(sdkVersion)
                set sdkVersion = DEFAULT_SDK_VERSION
                set wasUpgraded = true
            if props.query.dependencies?.length
                set dependencies = getDependenciesFromQuery(props.query.dependencies, sdkVersion)
        let files
            :ref PackiFiles
            =
                iif typeof code === 'string'
                    then
                        { 
                            { 'App.js'
                                @ contents code
                                @ type 'CODE'
                    else
                        ( 
                            + code
                                :as 
                                    :any 
        $if wzCtx.Build.useExpo
            if typeof window !== 'undefined'
                const 
                    { 
                        @ __snack_embedded_session embeddedSession
                    = window
                if embeddedSession?.files
                    set name = embeddedSession.name ?? name
                    set description = embeddedSession.description ?? description
                    set files = embeddedSession.files
                    set dependencies = embeddedSession.dependencies ?? dependencies
                    set sdkVersion = embeddedSession.sdkVersion ?? sdkVersion
        const isPreview
            !!
                &&
                    + isMobile(props.userAgent) && (props.match.params.id || props.match.params.projectName) 
                    $if wzCtx.Build.useExpo
                        + !props.isEmbedded
                    $else
                        + true
        const id
            iif !props.match.params.id && props.match.params.username && props.match.params.projectName
                then
                    `lit 
                        + @
                        @ props.match.params.username
                        + /
                        @ props.match.params.projectName
                else
                    $if wzCtx.Build.useExpo
                        iif props.match.params.id && !wasUpgraded
                            then props.match.params.id
                            else undefined
                    $else
                        iif props.match.params.id 
                            then props.match.params.id
                            else undefined
        const verbose = props.query.verbose === 'true'
        $if wzCtx.Build.useExpo
            const isWorker = true
        const sendCodeOnChangeEnabled = true
        $if wzCtx.Build.usePackiAspects
            const sessionSecret = null
        $else
            const sessionSecret = props.getSessionSecret()
        const snackagerURL = nullthrows(process.env.IMPORT_SERVER_URL)
        const isLocalWebPreview = false
        set this._PackiSession =
            new PackiSession
                { 
                    @ disabled true
                    $if wzCtx.Build.useExpo
                        @ channel props.defaults.channel
                    @ name
                    @ description
                    @ files
                    $if wzCtx.Build.useExpo
                        @ dependencies
                        @ sdkVersion
                    @ verbose
                    @ codeChangesDelay
                        iif sendCodeOnChangeEnabled
                            then 1000
                            else -1
                    $if wzCtx.Build.useExpo
                        @ createTransport
                            iif isWorker
                                then createSnackWorkerTransport
                                else undefined
                        @ reloadTimeout 10000
                    $if wzCtx.Build.useExpo
                        @ deviceId getDeviceId()
                    @ id
                        $if wzCtx.Build.useExpo
                            iif !wasUpgraded
                                then id
                                else undefined
                        $else
                            @expr id
                    @ user
                        iif sessionSecret
                            then
                                { 
                                    @ sessionSecret
                            else undefined
                    @ apiURL nullthrows(process.env.API_SERVER_URL)
                    @ snackagerURL
                    @ host
                        iif process.env.NODE_ENV === 'development'
                            then 'staging.snack.expo.io'
                            else new URL(nullthrows(process.env.SERVER_URL)).host
                            # Use staging server in development, otherwise Expo Go and appetize
                            # can't access the runtime. Replace with ngrok url to test locally.
                    @ webPreviewRef
                        iif typeof window !== 'undefined'
                            then this._previewRef
                            else undefined
                    @ webPlayerURL
                        iif typeof window !== 'undefined' && isLocalWebPreview
                            then
                                `lit 
                                    + 
                                    @ window.location.origin
                                    + /web-player/%%SDK_VERSION%%
                            else nullthrows(process.env.SNACK_WEBPLAYER_URL) + '/v2/%%SDK_VERSION%%'
                        # Serve local web-player through `/web-player` end-point to prevent CORS issues
        $if wzCtx.Build.useExpo
            const devicePreviewPlatformOptions
                _ PlatformOptions.filter
                    { 
                        @ sdkVersion
                        @ supportedPlatformsQueryParam props.query.supportedPlatforms
        const devicePreviewShown
            iif props.query.preview
                then props.query.preview !== 'false'
                $if wzCtx.Build.useExpo
                    else
                        iif props.isEmbedded
                            then false
                            else props.preferences.devicePreviewShown
                $else
                    else props.preferences.devicePreviewShown
        $if wzCtx.Build.useExpo
            const devicePreviewPlatform
                _ PlatformOptions.getSelectedPlatform
                    { 
                        @ options devicePreviewPlatformOptions
                        @ sdkVersion
                        @ requestedPlatform
                            || 
                                (
                                    ?? 
                                        + props.query.platform
                                        ( 
                                            iif props.isEmbedded
                                                then 'web'
                                                else props.preferences.devicePreviewPlatform
                                + 'web'
        const selectedFile
            iif files['App.js']
                then 'App.js'
                else
                    iif files['App.tsx']
                        then 'App.tsx'
                        else
                            iif files['app.js']
                                then 'app.js'
                                else
                                    iif Object.keys(files).length
                                        then Object.keys(files)[0]
                                        else ''
        
        $if wzCtx.Build.usePackiAspects
            const params
                :ref Params
                =
                    { 
                        ... 
                            ( 
                                iif !props.match.params.id && props.match.params.username && props.match.params.repoName
                                    then
                                        { 
                                            @ id
                                                `lit 
                                                    + @
                                                    @ props.match.params.username
                                                    + /
                                                    @ props.match.params.repoName
                                    else null
        
        set this.state =
            { 
                @ session this._PackiSession.getState()
                @ selectedFile
                @ sendCodeOnChangeEnabled
                $if wzCtx.Build.useExpo
                    @ autosaveEnabled !props.isEmbedded
                        # We don't have any UI for autosave in embed
                        # In addition, enabling autosave in embed will disable autosave in editor when embed dialog is open
                $else
                    @ autosaveEnabled true
                @ isSavedOnce false
                @ saveHistory props.Packi?.history ?? []
                @ saveStatus
                    iif props.Packi?.isDraft
                        then 'saved-draft'
                        else
                            iif id
                                then 'published'
                                else 'unsaved'
                $if wzCtx.Build.useExpo
                    @ connectedDevices []
                    @ deviceLogs []
                @ isPreview
                @ isLocalWebPreview
                $if wzCtx.Build.useExpo
                    @ wasUpgraded
                    @ initialSdkVersion
                @ isDownloading false
                @ devicePreviewShown
                $if wzCtx.Build.useExpo
                    @ devicePreviewPlatform
                    @ devicePreviewPlatformOptions
                @ verbose
                @ annotations []
                @ snackagerURL
                @ webPreviewURL ''
                $if wzCtx.Build.usePackiAspects
                    @ packiStoreId undefined
                    @ packiSessionReady false
                    @ fileEntries []
                    @ generatedArtifact undefined
                    @ jobGeneratedArtifacts undefined
                    @ jobError undefined
                    @ isWizziJobWaiting false
                    @ lastJobfileEntries []
                    @ params
