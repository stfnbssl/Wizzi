module
    $
        var md = {
            name: "FormControl",
            props: [
                { name: "control", type: "ControlDef", ref: true },
                { name: "value", type: "any" },
                { name: "error", type: "any", optional: true },
                { name: "onChange", type: "handler", params: [{name: "value", type: "any"}] },
            ],
            // styled: true,
            aphrodite: true
        }
    v08/react/function(&md)
        $append imports
            import
                @ c
                from '../AphroditeTheme'
            import Select
                @ ValueType
                from "react-select"
            import
                @ SelectOption 
                @ ControlDef
                from './types'
            $$ import {SingleDatePicker} from "react-dates"
            import DatePicker from "react-datepicker"
            import "react-datepicker/dist/react-datepicker.css";            
            import { registerLocale, setDefaultLocale } from  "react-datepicker"
            import it from 'date-fns/locale/it'
            _ registerLocale('it', it)
  
        function pad
            param s
                :number
            return 
                iif (s < 10)
                    then '0' + s
                    else s

        function handleChange
            param event
                :any
                $$ :ref React.ChangeEvent<HTMLInputElement>
            # log 'handleChange', 'event', event
            if control.controlType == 'text' || control.controlType == 'string'
                _ onChange(event.target.value)
            elif control.controlType == 'checkbox' || control.controlType == 'boolean'
                _ onChange(event.target.checked)
            elif control.controlType == 'select'
                _ onChange(event ? event.value : undefined)
            elif control.controlType == 'date'
                _ onChange
                    [ 
                        @ pad(event.getDate())
                        @ pad(event.getMonth() + 1)
                        @ event.getFullYear()
                        ._ join
                            @ '/'
            elif control.controlType == 'folder'
                log 'event.target.files', event.target.files
                const value = {}
                const promises = []
                _ [...event.target.files].forEach
                    => 
                        param file
                        _ promises.push
                            _ file.text()
                                ._ then
                                    =>
                                        param text
                                        set value[file.webkitRelativePath] = text
                                        log 'file', file.webkitRelativePath, text
                _ Promise.all
                    @ promises
                    ._ then
                        =>
                            log 'folder.value', value
                            _ onChange(JSON.stringify(value))
        let selectValue = null
        let dateValue = null
        if control.controlType == 'select' && control.options
            foreach option in control.options
                if option.value == value
                    set selectValue = option
        if control.controlType == 'date'
            # log 'date value', value
            if value
                const parts = value.split('/') 
                set dateValue = new Date(parts[2] + '/' + parts[1] + '/' + parts[0])
        return
            div
                @ className {css(styles.root)}
                div
                    @ className {control.required ? css(styles.required) : ''}
                    + { control.label || control.id }
                {
                    &&
                        + (control.controlType == 'text' || control.controlType == 'string')
                        input
                            type "text"
                            @ className
                                _ css
                                    @ styles.input
                                    iif error
                                        then styles.error
                                        else styles.normal
                            @ value {value}
                            @ onChange {handleChange}
                {
                    &&
                        + (control.controlType == 'checkbox' || control.controlType == 'boolean')
                        input
                            type "checkbox"
                            @ checked {value}
                            @ onChange {handleChange}

                {
                    &&
                        + control.controlType == 'select'
                        < Select 
                            :ref SelectOption
                            @ value {selectValue}
                            @ getOptionLabel
                                => 
                                    param option
                                        :ref SelectOption
                                    @expr option.label
                            @ getOptionValue
                                => 
                                    param option
                                        :ref SelectOption
                                    @expr option.value
                            @ options {control.options}
                            @ isClearable {true}
                            @ backspaceRemovesValue {true}
                            @ onChange {handleChange}
                {
                    &&
                        + control.controlType == 'date'
                        < DatePicker 
                            @ selected {dateValue}
                            @ onChange {handleChange}
                            @ locale 'it'
                            @ dateFormat 'dd/MM/yyyy'
                {
                    &&
                        + control.controlType == 'folder'
                        input
                            type 'file' 
                            @ webkitdirectory 'true'
                            @ multiple {true}
                            @ onChange {handleChange}


        $append styles_aphrodite
            { root
                @ textAlign "left"
                @ padding "5px"
            { required
                @ position 'relative'
                { "& :after"
                    @ content "'*'"
                    @ marginLeft "2px"
                    @ color "#b90000"
            { input
                @ outline 0
                @ fontSize 12
                @ borderRadius 3
                @ padding '6px 7px 6px 7px'
                @ lineHeight '12px'
                @ width '100%'
                @ borderWidth 1
                @ borderStyle 'solid'
                @ backgroundColor c('error')
                { normal
                    @ borderColor c('border')
                    { ':focus'
                        @ borderColor c('selected')
                { error
                    @ borderColor c('error')
        
        $*
        $append styles
            :interface StyledControlProps
                :p control
                    :ref ControlDef
            styled StyledRoot .div
                text-align left
                padding 5px
            styled StyledLabel .div<StyledControlProps>
                position
                    => props.control.required ? 'relative' : 'inherit'
                if props.control.required
                    & :after
                        content '*'
                        margin-left 2px
                        color #b90000
            styled StyledText .input.attrs
                =>
                    param props
                    (
                        {
                            @ type 'text'
            styled StyledCheckBox .input.attrs
                =>
                    param props
                    (
                        {
                            @ type 'checkbox'
        *$