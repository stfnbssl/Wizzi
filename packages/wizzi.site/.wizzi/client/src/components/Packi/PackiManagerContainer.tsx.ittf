module
    import 
        as React
        from 'react'
    import 
        @ Dispatch
        from 'redux'
    import 
        @ connect
        $if wzCtx.Build.usePackiAspects
            @ ConnectedProps
        from 'react-redux'
    import 
        @ StoreState
        from '../../store'
    import 
        @ LoggedUser
        from '../../features/app'
    import
        @ fileConversions
        from '../../features/file'
    import 
        @ Packi
        @ PackiFiles
        @ packiActions
        
        from '../../features/packi'
    import 
        @ PreferencesContextType
        @ withPreferences
        from '../../features/preferences'
    import 
        @ GitRepositoryMeta
        from '../../features/github'
    import PackiManager from './PackiManager'
    import Spinner from '../widgets/Spinner'
    :interface StateProps
        :p loggedUser
            :optional 
            :ref LoggedUser
        :p packiNames
            :optional 
            :[ 
                :string 
        :p currentPacki
            :optional 
            :ref Packi
        :p packiTemplateNames
            :optional 
            :[ 
                :string 
        :p ownedGitRepositories
            :optional 
            :[ 
                :ref GitRepositoryMeta
    :interface DispatchProps
        :p dispatchFetchPackiList
            :=> 
                :void 
        :p dispatchSelectPacki
            :=> 
                :void 
                param packiId
                    :string 
        :p dispatchCreatePacki
            :=> 
                :void 
                param packiId
                    :string 
                param packiKind
                    :string 
        :p dispatchDeletePacki
            :=> 
                :void 
                param packiId
                    :string 
        :p dispatchFetchPackiTemplateList
            :=> 
                :void 
        $if wzCtx.Build.usePackiAspectGithub
            :p dispatchFetchOwnedGitRepositories
                :=> 
                    :void 
                    param uid
                        :string 
            :p dispatchCloneGitRepository
                :=> 
                    :void 
                    param uid
                        :string 
                    param owner
                        :string 
                    param name
                        :string 
                    param branch
                        :string 
                    param ittfOnly
                        :boolean 
            :p dispatchCommitGitRepository
                :=> 
                    :void 
                    param uid
                        :string 
                    param owner
                        :string 
                    param name
                        :string 
                    param branch
                        :string 
                    param files
                        :ref PackiFiles
        :p dispatchUploadPackiTemplate
            :=> 
                :void 
                param uid
                    :string 
                param templateId
                    :string 
                param files
                    :ref PackiFiles
    const mapStateToProps
        => 
            param state
                :ref StoreState
            :return
                :ref StateProps
            (
                { 
                    @ loggedUser state.app.loggedUser
                    @ packiNames state.packi.packiNames
                    @ currentPacki state.packi.currentPacki
                    @ packiTemplateNames state.packi.packiTemplateNames
                    @ ownedGitRepositories state.packi.ownedGitRepositories
    const mapDispatchToProps
        => 
            param dispatch
                :ref Dispatch
            :return
                :ref DispatchProps
            (
                { 
                    @ dispatchFetchPackiList
                        => 
                            _ dispatch(packiActions.fetchPackiListRequest())
                    @ dispatchSelectPacki
                        => 
                            param packiId
                                :string 
                            _ dispatch
                                _ packiActions.selectPackiRequest
                                    { 
                                        @ id packiId
                    @ dispatchCreatePacki
                        => 
                            param packiId
                                :string 
                            param packiKind
                                :string 
                            _ dispatch
                                _ packiActions.createPackiRequest
                                    { 
                                        @ id packiId
                                        { options
                                            @ data packiKind
                    @ dispatchDeletePacki
                        => 
                            param packiId
                                :string 
                            _ dispatch
                                _ packiActions.deletePackiRequest
                                    { 
                                        @ id packiId
                    $if wzCtx.Build.usePackiAspectGithub
                        @ dispatchCloneGitRepository
                            => 
                                param uid
                                    :string 
                                param owner
                                    :string 
                                param name
                                    :string 
                                param branch
                                    :string 
                                param ittfOnly
                                    :boolean 
                                _ dispatch
                                    _ packiActions.cloneGitRepositoryRequest
                                        { 
                                            @ uid
                                            @ owner
                                            @ name
                                            @ branch 'master'
                                            @ ittfOnly
                                                # TODO
                        @ dispatchCommitGitRepository
                            => 
                                param uid
                                    :string 
                                param owner
                                    :string 
                                param name
                                    :string 
                                param branch
                                    :string 
                                param files
                                    :ref PackiFiles
                                _ dispatch
                                    _ packiActions.commitGitRepositoryRequest
                                        { 
                                            @ uid
                                            @ owner
                                            @ name
                                            @ branch 'master'
                                            @ files
                                                # TODO
                    @ dispatchFetchPackiTemplateList
                        => 
                            _ dispatch(packiActions.fetchPackiTemplateListRequest())
                    $if wzCtx.Build.usePackiAspectGithub
                        @ dispatchFetchOwnedGitRepositories
                            => 
                                param uid
                                    :string 
                                _ dispatch
                                    _ packiActions.fetchOwnedGitRepositoriesRequest
                                        { 
                                            @ uid
                    @ dispatchUploadPackiTemplate
                        => 
                            param uid
                                :string 
                            param templateId
                                :string 
                            param files
                                :ref PackiFiles
                            _ dispatch
                                _ packiActions.uploadPackiTemplateRequest
                                    { 
                                        @ uid
                                        @ templateId
                                        @ files
    :type PackiManagerContainerProps
        :intersect 
            :ref PreferencesContextType
            $if wzCtx.Build.usePackiAspects
                :ref PropsFromRedux
            :{ 
                :p onClose
                    :=> 
                        :void 
    :type State
        :intersect 
            :ref StateProps
            :{ 
    class PackiManagerContainerComp
        super React.Component
            :param 
                :ref PackiManagerContainerProps
            :param 
                :ref State
        m componentDidMount
            $if wzCtx.Build.usePackiAspectGithub
                if this.props.loggedUser
                    _ this.props.dispatchFetchPackiList()
                    _ this.props.dispatchFetchPackiTemplateList()
                    if this.props.preferences.connectGithubRepos
                        _ this.props.dispatchFetchOwnedGitRepositories(this.props.loggedUser.uid)
        p _handleSelectPacki
            async=> 
                param packiId
                    :string 
                _ this.props.dispatchSelectPacki(packiId)
                _ this.props.onClose()
        p _handleCreatePacki
            async=> 
                param packiId
                    :string 
                param packiKind
                    :string 
                _ this.props.dispatchCreatePacki(packiId, packiKind)
                _ this.props.onClose()
        p _handleDeletePacki
            async=> 
                param packiId
                    :string 
                _ this.props.dispatchDeletePacki(packiId)
        $if wzCtx.Build.usePackiAspectGithub
            p _handleCloneGitRepository
                async=> 
                    param owner
                        :string 
                    param name
                        :string 
                    param branch
                        :string 
                    param ittfOnly
                        :boolean 
                    if this.props.loggedUser
                        _ this.props.dispatchCloneGitRepository(this.props.loggedUser.uid, owner, name, branch, ittfOnly)
                        _ this.props.onClose()
            p _handleCommitGitRepository
                async=> 
                    param owner
                        :string 
                    param name
                        :string 
                    param branch
                        :string 
                    param virtualFiles
                        :boolean 
                    if this.props.loggedUser && this.props.currentPacki
                        const files
                            :ref PackiFiles
                            =
                                iif virtualFiles
                                    then this.props.currentPacki.files
                                    else fileConversions.packiFilterIttf(this.props.currentPacki.files)
                        log 'PackiManager._handleCommitGitRepository.virtualFiles', Object.keys(this.props.currentPacki.files), virtualFiles, Object.keys(files)
                        _ this.props.dispatchCommitGitRepository(this.props.loggedUser.uid, owner, name, branch, files)
                        _ this.props.onClose()
        p _handleUploadPackiTemplate
            async=> 
                param templateId
                    :string 
                param virtualFiles
                    :boolean 
                if this.props.loggedUser && this.props.currentPacki
                    const files
                        :ref PackiFiles
                        =
                            iif virtualFiles
                                then this.props.currentPacki.files
                                else fileConversions.packiFilterIttf(this.props.currentPacki.files)
                    log 'PackiManager._handleCommitGitRepository.virtualFiles', Object.keys(this.props.currentPacki.files), virtualFiles, Object.keys(files)
                    _ this.props.dispatchUploadPackiTemplate(this.props.loggedUser.uid, templateId, files)
                    _ this.props.onClose()
        m render
            const 
                { 
                    @ currentPacki
                    @ packiNames
                    @ packiTemplateNames
                    @ ownedGitRepositories
                = this.props
            log 'PackiManagerContainer.render.props', this.props
            if packiNames && packiTemplateNames
                return 
                    < PackiManager 
                        @ currentPacki {currentPacki}
                        @ packiNames {packiNames || []}
                        @ packiTemplateNames {packiTemplateNames || []}
                        $if wzCtx.Build.usePackiAspectGithub
                            @ ownedGitRepositories {ownedGitRepositories || []}
                        @ onSelectPacki {this._handleSelectPacki}
                        @ onCreatePacki {this._handleCreatePacki}
                        @ onDeletePacki {this._handleDeletePacki}
                        $if wzCtx.Build.usePackiAspectGithub
                            @ onCloneGitRepository {this._handleCloneGitRepository}
                            @ onCommitGitRepository {this._handleCommitGitRepository}
                        @ onUploadPackiTemplate {this._handleUploadPackiTemplate}
            else
                return 
                    < Spinner 

    const connector = connect(mapStateToProps, mapDispatchToProps);
    :type PropsFromRedux
        :ref ConnectedProps
            :param 
                :typeof connector
    const PackiManagerContainer = withPreferences(connector(PackiManagerContainerComp));
    export-default PackiManagerContainer
    
    $*
    export-default PackiManagerContainer
        _ connect
            :param 
                :ref StateProps
            :param 
                :ref DispatchProps
            @ mapStateToProps
            @ mapDispatchToProps
            (
                _ withPreferences(PackiManagerContainer)
    *$