module
    import 
        @ Reducer
        from 'redux'
    import 
        @ ActionType
        @ getType
        from 'typesafe-actions'
    import 
        @ Packi
        @ GitRepositoryMeta
        @ LocalPackiData
        from './types'
    import 
        @ packiCreatedFromTemplate
        @ packiCreatedFromGithubClone
        @ getPackiData
        @ savePackiData
        @ deletePackiData
        @ setSelectedPacki
        from './localManager'
    import 
        as packiActions
        from './actions'
    import 
        @ deletePacki
        from './data'
    import 
        @ mixPreviousAndGeneratedPackiFiles
        from './convertFileStructure'
    export 
        :interface PackiState
            :p loading
                :boolean 
            :p errors
                :optional 
                :string 
            :p packiNames
                :optional 
                :[ 
                    :string 
            :p currentPacki
                :optional 
                :ref Packi
            :p localPackiData
                :optional 
                :ref LocalPackiData
            :p packiTemplateNames
                :optional 
                :[ 
                    :string 
            :p ownedGitRepositories
                :optional 
                :[ 
                    :ref GitRepositoryMeta
            :p generatedArtifactContent
                :optional 
                :string 
    const initialState
        :ref PackiState
        { 
            @ loading false
            @ errors undefined
            @ packiNames undefined
            @ currentPacki undefined
            @ packiTemplateNames undefined
            @ ownedGitRepositories undefined
            @ generatedArtifactContent undefined
    export 
        :type PackiAction
            :ref ActionType
                :param 
                    :typeof packiActions
    const reducer
        :ref Reducer
            :param 
                :ref PackiState
            :param 
                :ref PackiAction
        => 
            param state = initialState
            param action
            switch action.type
                case getType(packiActions.fetchPackiListRequest)
                    _ console.log("packiActions.fetchPackiListRequest")
                    return 
                        { 
                            @ ...state
                            @ loading true
                case getType(packiActions.fetchPackiListSuccess)
                    _ console.log("packiActions.fetchPackiListSuccess", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ packiNames action.payload.packiNames
                case getType(packiActions.fetchPackiListError)
                    _ console.log("packiActions.fetchPackiListError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.initPackiRequest)
                    _ console.log("packiActions.initPackiRequest")
                    return 
                        { 
                            @ ...state
                            @ loading true
                case getType(packiActions.initPackiSuccess)
                    _ console.log("packiActions.initPackiSuccess")
                    return 
                        { 
                            @ ...state
                            @ loading false
                case getType(packiActions.initPackiError)
                    _ console.log("packiActions.initPackiRequest")
                    return 
                        { 
                            @ ...state
                            @ loading false
                case getType(packiActions.selectPackiRequest)
                    _ console.log("packiActions.selectPackiRequest")
                    return 
                        { 
                            @ ...state
                            @ loading true
                case getType(packiActions.selectPackiSuccess)
                    _ console.log("packiActions.selectPackiSuccess", action)
                    let localPackiData = getPackiData(action.payload.id)
                    if !localPackiData
                        set localPackiData =
                            { 
                                @ origin 'template'
                                @ id action.payload.id
                                @ owner undefined
                                @ repoName undefined
                                @ branch undefined
                                @ description undefined
                                @ localCreatedAt Date.now()
                                @ githubCreatedAt -1
                                @ lastCommitAt -1
                        _ savePackiData(action.payload.id, localPackiData)
                    _ setSelectedPacki(action.payload.id)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            { currentPacki
                                @ id action.payload.id
                                @ files action.payload.files
                                @ localPackiData
                case getType(packiActions.selectPackiError)
                    _ console.log("packiActions.selectPackiError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.createPackiRequest)
                    _ console.log("packiActions.createPackiRequest", action)
                    return 
                        { 
                            @ ...state
                            @ loading true
                            @ tobeCreatedPackiName action.payload.id
                case getType(packiActions.createPackiSuccess)
                    _ console.log("packiActions.createPackiSuccess", action)
                    const localPackiData = packiCreatedFromTemplate(action.payload.id)
                    _ savePackiData(action.payload.id, localPackiData)
                    _ setSelectedPacki(action.payload.id)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            { currentPacki
                                @ id action.payload.id
                                @ files action.payload.files
                                @ localPackiData
                            [ packiNames
                                @ ...state.packiNames || []
                                @ action.payload.id
                case getType(packiActions.createPackiError)
                    _ console.log("packiActions.createPackiError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.savePackiSuccess)
                    _ console.log("packiActions.savePackiSuccess", action)
                    return 
                        { 
                            @ ...state
                            { currentPacki
                                @ id action.payload.id
                                @ files action.payload.packiEntryFiles
                                @ localPackiData state.currentPacki.localPackiData
                case getType(packiActions.deletePackiRequest)
                    _ console.log("packiActions.deletePackiRequest", action)
                    return 
                        { 
                            @ ...state
                            @ loading true
                            @ tobeDeletedPackiId action.payload.id
                case getType(packiActions.deletePackiSuccess)
                    _ console.log("packiActions.deletePackiSuccess", action)
                    _ deletePacki(action.payload.id)
                    _ deletePackiData(action.payload.id)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ packiNames
                                _ state.packiNames.filter
                                    => 
                                        param item
                                        set item !== action.payload.id
                case getType(packiActions.deletePackiError)
                    _ console.log("packiActions.deletePackiError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.fetchPackiTemplateListRequest)
                    _ console.log("packiActions.fetchPackiTemplateListRequest")
                    return 
                        { 
                            @ ...state
                            @ loading true
                case getType(packiActions.fetchPackiTemplateListSuccess)
                    _ console.log("packiActions.fetchPackiTemplateListSuccess", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ packiTemplateNames action.payload.packiNames
                case getType(packiActions.fetchPackiTemplateListError)
                    _ console.log("packiActions.fetchPackiTemplateListError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.fetchOwnedGitRepositoriesRequest)
                    _ console.log("packiActions.fetchOwnedGitRepositoriesRequest")
                    return 
                        { 
                            @ ...state
                            @ loading true
                case getType(packiActions.fetchOwnedGitRepositoriesSuccess)
                    _ console.log("packiActions.fetchOwnedGitRepositoriesSuccess", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ ownedGitRepositories action.payload.repositories
                case getType(packiActions.fetchOwnedGitRepositoriesError)
                    _ console.log("packiActions.fetchOwnedGitRepositoriesError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.cloneGitRepositoryRequest)
                    _ console.log("packiActions.cloneGitRepositoryRequest")
                    return 
                        { 
                            @ ...state
                            @ loading true
                case getType(packiActions.cloneGitRepositorySuccess)
                    _ console.log("packiActions.cloneGitRepositorySuccess", action)
                    const localPackiData = packiCreatedFromGithubClone(action.payload.repository.owner, action.payload.repository.name)
                    _ setSelectedPacki(localPackiData.id)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            { currentPacki
                                @ id
                                    `lit 
                                        + 
                                        @ action.payload.repository.owner
                                        + _
                                        @ action.payload.repository.name
                                        + 
                                @ files action.payload.repository.files
                                @ localPackiData
                            @ currentPackiTemplate undefined
                case getType(packiActions.cloneGitRepositoryError)
                    _ console.log("packiActions.cloneGitRepositoryError", action)
                    return 
                        { 
                            @ ...state
                            @ loading false
                            @ errors action.payload
                case getType(packiActions.executeJobSuccess)
                    _ console.log("packiActions.executeJobSuccess", action)
                    const newPacki
                        { 
                            @ ...state.currentPacki
                            @ files mixPreviousAndGeneratedPackiFiles(action.payload.previousArtifacts, action.payload.generatedArtifacts)
                    _ console.log("packiActions.executeJobSuccess.newPacki", newPacki)
                    if !action.payload.__is_error
                        return 
                            { 
                                @ ...state
                                { currentPacki
                                    @ ...state.currentPacki
                                    @ files mixPreviousAndGeneratedPackiFiles(action.payload.previousArtifacts, action.payload.generatedArtifacts)
                    else
                        return state
                default 
                    return state
    export-default reducer
