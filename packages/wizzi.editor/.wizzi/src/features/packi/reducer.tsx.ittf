module
    import 
        @ Reducer
        from 'redux'
    import 
        @ ActionType
        @ getType
        from 'typesafe-actions'
    import 
        @ GitRepositoryMeta
        from '../github'
    import 
        @ Packi
        $if wzCtx.Build.usePackiLocal
            @ LocalPackiData
        from './types'
    $if wzCtx.Build.usePackiLocal
        import 
            @ packiCreatedFromTemplate
            @ packiCreatedFromGithubClone
            @ getPackiData
            @ savePackiData
            @ deletePackiData
            @ setSelectedPacki
            from './localManager'
    import 
        as packiActions
        from './actions'
    $if wzCtx.Build.usePackiLocal
        import 
            @ deletePacki
            from './data'
    import 
        @ mixPreviousAndGeneratedPackiFiles
        from '../file/convertFileStructure'
    export 
        :interface PackiState
            :p loading
                :boolean 
            :p errors
                :optional 
                :string 
            :p packiNames
                :optional 
                :[ 
                    :string 
            :p currentPacki
                :optional 
                :ref Packi
            $if wzCtx.Build.usePackiLocal
                :p localPackiData
                    :optional 
                    :ref LocalPackiData
            :p packiTemplateNames
                :optional 
                :[ 
                    :string 
            :p ownedGitRepositories
                :optional 
                :[ 
                    :ref GitRepositoryMeta
            :p generatedArtifactContent
                :optional 
                :string 
    const initialState
        :ref PackiState
        =
            { 
                @ loading false
                @ errors undefined
                @ packiNames undefined
                @ currentPacki undefined
                @ packiTemplateNames undefined
                @ ownedGitRepositories undefined
                @ generatedArtifactContent undefined
    export 
        :type PackiAction
            :ref ActionType
                :param 
                    :typeof packiActions
    const reducer
        :ref Reducer
            :param 
                :ref PackiState
            :param 
                :ref PackiAction
        =
            => 
                param state = initialState
                param action
                switch action.type
                    case getType(packiActions.fetchPackiListRequest)
                        log "packiActions.fetchPackiListRequest"
                        return 
                            { 
                                @ ...state
                                @ loading true
                    case getType(packiActions.fetchPackiListSuccess)
                        log "packiActions.fetchPackiListSuccess", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ packiNames action.payload.packiNames
                    case getType(packiActions.fetchPackiListError)
                        log "packiActions.fetchPackiListError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.initPackiRequest)
                        log "packiActions.initPackiRequest"
                        return 
                            { 
                                @ ...state
                                @ loading true
                    case getType(packiActions.initPackiSuccess)
                        log "packiActions.initPackiSuccess"
                        return 
                            { 
                                @ ...state
                                @ loading false
                    case getType(packiActions.initPackiError)
                        log "packiActions.initPackiRequest"
                        return 
                            { 
                                @ ...state
                                @ loading false
                    case getType(packiActions.selectPackiRequest)
                        log "packiActions.selectPackiRequest"
                        return 
                            { 
                                @ ...state
                                @ loading true
                    case getType(packiActions.selectPackiSuccess)
                        log "packiActions.selectPackiSuccess", action
                        $if wzCtx.Build.usePackiLocal
                            let localPackiData = getPackiData(action.payload.id)
                            if !localPackiData
                                set localPackiData =
                                    { 
                                        @ origin 'template'
                                        @ id action.payload.id
                                        @ owner undefined
                                        @ repoName undefined
                                        @ branch undefined
                                        @ description undefined
                                        @ localCreatedAt Date.now()
                                        @ githubCreatedAt -1
                                        @ lastCommitAt -1
                                _ savePackiData(action.payload.id, localPackiData)
                            _ setSelectedPacki(action.payload.id)
                        return 
                            { 
                                @ ...state
                                @ loading false
                                { currentPacki
                                    @ id action.payload.id
                                    @ files action.payload.files
                                    $if wzCtx.Build.usePackiLocal
                                        @ localPackiData
                    case getType(packiActions.selectPackiError)
                        log "packiActions.selectPackiError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.createPackiRequest)
                        log "packiActions.createPackiRequest", action
                        return 
                            { 
                                @ ...state
                                @ loading true
                                @ tobeCreatedPackiName action.payload.id
                    case getType(packiActions.createPackiSuccess)
                        log "packiActions.createPackiSuccess", action
                        $if wzCtx.Build.usePackiLocal
                            const localPackiData = packiCreatedFromTemplate(action.payload.id)
                            _ savePackiData(action.payload.id, localPackiData)
                            _ setSelectedPacki(action.payload.id)
                        return 
                            { 
                                @ ...state
                                @ loading false
                                { currentPacki
                                    @ id action.payload.id
                                    @ files action.payload.files
                                    $if wzCtx.Build.usePackiLocal
                                        @ localPackiData
                                [ packiNames
                                    @ ...state.packiNames || []
                                    @ action.payload.id
                    case getType(packiActions.createPackiError)
                        log "packiActions.createPackiError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.savePackiSuccess)
                        log "packiActions.savePackiSuccess", action
                        return 
                            { 
                                @ ...state
                                { currentPacki
                                    @ id action.payload.id
                                    @ files action.payload.packiEntryFiles
                                    $if wzCtx.Build.usePackiLocal
                                        @ localPackiData state.currentPacki.localPackiData
                    case getType(packiActions.deletePackiRequest)
                        log "packiActions.deletePackiRequest", action
                        return 
                            { 
                                @ ...state
                                @ loading true
                                @ tobeDeletedPackiId action.payload.id
                    case getType(packiActions.deletePackiSuccess)
                        log "packiActions.deletePackiSuccess", action
                        $if wzCtx.Build.usePackiLocal
                            _ deletePacki(action.payload.id)
                            _ deletePackiData(action.payload.id)
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ packiNames
                                    _ state.packiNames && state.packiNames.filter
                                        => 
                                            param item
                                            set item !== action.payload.id
                    case getType(packiActions.deletePackiError)
                        log "packiActions.deletePackiError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.fetchPackiTemplateListRequest)
                        log "packiActions.fetchPackiTemplateListRequest"
                        return 
                            { 
                                @ ...state
                                @ loading true
                    case getType(packiActions.fetchPackiTemplateListSuccess)
                        log "packiActions.fetchPackiTemplateListSuccess", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ packiTemplateNames action.payload.packiNames
                    case getType(packiActions.fetchPackiTemplateListError)
                        log "packiActions.fetchPackiTemplateListError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.fetchOwnedGitRepositoriesRequest)
                        log "packiActions.fetchOwnedGitRepositoriesRequest"
                        return 
                            { 
                                @ ...state
                                @ loading true
                    case getType(packiActions.fetchOwnedGitRepositoriesSuccess)
                        log "packiActions.fetchOwnedGitRepositoriesSuccess", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ ownedGitRepositories action.payload.repositories
                    case getType(packiActions.fetchOwnedGitRepositoriesError)
                        log "packiActions.fetchOwnedGitRepositoriesError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.cloneGitRepositoryRequest)
                        log "packiActions.cloneGitRepositoryRequest"
                        return 
                            { 
                                @ ...state
                                @ loading true
                    case getType(packiActions.cloneGitRepositorySuccess)
                        log "packiActions.cloneGitRepositorySuccess", action
                        $if wzCtx.Build.usePackiLocal
                            const localPackiData = packiCreatedFromGithubClone(action.payload.repository.owner, action.payload.repository.name)
                            _ setSelectedPacki(localPackiData.id)
                        return 
                            { 
                                @ ...state
                                @ loading false
                                { currentPacki
                                    @ id
                                        `lit 
                                            @ action.payload.repository.owner
                                            + _
                                            @ action.payload.repository.name
                                    @ files action.payload.repository.files
                                    $if wzCtx.Build.usePackiLocal
                                        @ localPackiData
                                @ currentPackiTemplate undefined
                    case getType(packiActions.cloneGitRepositoryError)
                        log "packiActions.cloneGitRepositoryError", action
                        return 
                            { 
                                @ ...state
                                @ loading false
                                @ errors action.payload
                    case getType(packiActions.executeJobSuccess)
                        log "packiActions.executeJobSuccess", action
                        const newPacki
                            { 
                                @ ...state.currentPacki
                                @ files mixPreviousAndGeneratedPackiFiles(action.payload.previousArtifacts, action.payload.generatedArtifacts)
                        log "packiActions.executeJobSuccess.newPacki", newPacki
                        if !action.payload.error
                            return 
                                { 
                                    @ ...state
                                    { currentPacki
                                        @ ...state.currentPacki
                                        @ files mixPreviousAndGeneratedPackiFiles(action.payload.previousArtifacts, action.payload.generatedArtifacts)
                                        :as 
                                            :ref Packi
                        else
                            return state
                    default 
                        return state
    export-default reducer
