{
  "type": "File",
  "errors": [],
  "program": {
    "type": "Program",
    "sourceType": "module",
    "interpreter": null,
    "body": [
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Variables"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Variable Declarations\r\n        let and const are two relatively new types of variable declarations in JavaScript.\r\n        As we mentioned earlier, let is similar to var in some respects, but allows users to avoid\r\n        some of the common “gotchas” that users run into in JavaScript.\r\n        const is an augmentation of let in that it prevents re-assignment to a variable.\r\n        With TypeScript being a superset of JavaScript, the language naturally supports let and const.\r\n        Here we’ll elaborate more on these new declarations and why they’re preferable to var.\r\n\r\n        If you’ve used JavaScript offhandedly, the next section might be a good way to refresh your memory.\r\n        If you’re intimately familiar with all the quirks of var declarations in JavaScript,\r\n        you might find it easier to skip ahead.",
                  "start": 33,
                  "end": 877,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 4
                    },
                    "end": {
                      "line": 13,
                      "column": 49
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        var declarations\r\n        Declaring a variable in JavaScript has always traditionally been done with the var keyword. ",
                  "start": 885,
                  "end": 1017,
                  "loc": {
                    "start": {
                      "line": 15,
                      "column": 4
                    },
                    "end": {
                      "line": 17,
                      "column": 102
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " As you might’ve figured out, we just declared a variable named a with the value 10.",
                  "start": 1040,
                  "end": 1128,
                  "loc": {
                    "start": {
                      "line": 19,
                      "column": 4
                    },
                    "end": {
                      "line": 19,
                      "column": 92
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " We can also declare a variable inside of a function:",
                  "start": 1136,
                  "end": 1193,
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 4
                    },
                    "end": {
                      "line": 21,
                      "column": 61
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "a"
                  },
                  "init": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 10,
                      "raw": "10"
                    },
                    "value": 10
                  }
                }
              ],
              "kind": "var"
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " As you might’ve figured out, we just declared a variable named a with the value 10.",
                  "start": 1040,
                  "end": 1128,
                  "loc": {
                    "start": {
                      "line": 19,
                      "column": 4
                    },
                    "end": {
                      "line": 19,
                      "column": 92
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " We can also declare a variable inside of a function:",
                  "start": 1136,
                  "end": 1193,
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 4
                    },
                    "end": {
                      "line": 21,
                      "column": 61
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f1"
              },
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "message"
                        },
                        "init": {
                          "type": "StringLiteral",
                          "extra": {
                            "rawValue": "Hello, world!",
                            "raw": "\"Hello, world!\""
                          },
                          "value": "Hello, world!"
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "message"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " and we can also access those same variables within other functions: ",
                  "start": 1303,
                  "end": 1376,
                  "loc": {
                    "start": {
                      "line": 27,
                      "column": 4
                    },
                    "end": {
                      "line": 27,
                      "column": 77
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f1"
                },
                "arguments": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " and we can also access those same variables within other functions: ",
                  "start": 1303,
                  "end": 1376,
                  "loc": {
                    "start": {
                      "line": 27,
                      "column": 4
                    },
                    "end": {
                      "line": 27,
                      "column": 77
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f2"
              },
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "a"
                        },
                        "init": {
                          "type": "NumericLiteral",
                          "extra": {
                            "rawValue": 10,
                            "raw": "10"
                          },
                          "value": 10
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "FunctionExpression",
                      "id": {
                        "type": "Identifier",
                        "name": "g"
                      },
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "b"
                                },
                                "init": {
                                  "type": "BinaryExpression",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "a"
                                  },
                                  "operator": "+",
                                  "right": {
                                    "type": "NumericLiteral",
                                    "extra": {
                                      "rawValue": 1,
                                      "raw": "1"
                                    },
                                    "value": 1
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "b"
                            }
                          }
                        ],
                        "directives": []
                      }
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f2"
                },
                "arguments": []
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "g"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "f2"
                    },
                    "arguments": []
                  }
                }
              ],
              "kind": "var"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '11'"
                },
                {
                  "type": "CommentBlock",
                  "value": " In this above example, g captured the variable a declared in f.\r\n        At any point that g gets called, the value of a will be tied to the value of a in f.\r\n        Even if g is called once f is done running, it will be able to access and modify a. ",
                  "start": 1580,
                  "end": 1836,
                  "loc": {
                    "start": {
                      "line": 38,
                      "column": 4
                    },
                    "end": {
                      "line": 40,
                      "column": 94
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "g"
                },
                "arguments": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '11'"
                },
                {
                  "type": "CommentBlock",
                  "value": " In this above example, g captured the variable a declared in f.\r\n        At any point that g gets called, the value of a will be tied to the value of a in f.\r\n        Even if g is called once f is done running, it will be able to access and modify a. ",
                  "start": 1580,
                  "end": 1836,
                  "loc": {
                    "start": {
                      "line": 38,
                      "column": 4
                    },
                    "end": {
                      "line": 40,
                      "column": 94
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f3"
              },
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "a"
                        },
                        "init": {
                          "type": "NumericLiteral",
                          "extra": {
                            "rawValue": 1,
                            "raw": "1"
                          },
                          "value": 1
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "a"
                      },
                      "right": {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      }
                    }
                  },
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "b"
                        },
                        "init": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "g"
                          },
                          "arguments": []
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "a"
                      },
                      "right": {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 3,
                          "raw": "3"
                        },
                        "value": 3
                      }
                    }
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "b"
                    }
                  },
                  {
                    "type": "FunctionDeclaration",
                    "id": {
                      "type": "Identifier",
                      "name": "g"
                    },
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "a"
                          }
                        }
                      ],
                      "directives": []
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '2'"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f3"
                },
                "arguments": []
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": " Maybe it was easy to spot out for some, but the inner for-loop will accidentally overwrite\r\n    the variable i because i refers to the same function-scoped variable.\r\n    As experienced developers know by now, similar sorts of bugs slip through code reviews\r\n    and can be an endless source of frustration. ",
            "start": 3515,
            "end": 3828,
            "loc": {
              "start": {
                "line": 94,
                "column": 0
              },
              "end": {
                "line": 97,
                "column": 51
              }
            }
          }
        ],
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_Scoping_rules"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Scoping rules\r\n        var declarations have some odd scoping rules for those used to other languages.\r\n        Take the following example:",
                  "start": 2125,
                  "end": 2278,
                  "loc": {
                    "start": {
                      "line": 60,
                      "column": 4
                    },
                    "end": {
                      "line": 63,
                      "column": 37
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "shouldInitialize",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSBooleanKeyword"
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "Identifier",
                      "name": "shouldInitialize"
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "x"
                              },
                              "init": {
                                "type": "NumericLiteral",
                                "extra": {
                                  "rawValue": 10,
                                  "raw": "10"
                                },
                                "value": 10
                              }
                            }
                          ],
                          "kind": "var"
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "x"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '10'"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f"
                },
                "arguments": [
                  {
                    "type": "BooleanLiteral",
                    "value": true
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '10'"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns 'undefined'"
                },
                {
                  "type": "CommentBlock",
                  "value": " Some readers might do a double-take at this example.\r\n        The variable x was declared within the if block, and yet we were able to access it\r\n        from outside that block.\r\n        That’s because var declarations are accessible anywhere within their containing function,\r\n        module, namespace, or global scope - all which we’ll go over later on - regardless of the containing\r\n        block.\r\n        Some people call this var-scoping or function-scoping.\r\n        Parameters are also function scoped.\r\n        These scoping rules can cause several types of mistakes.\r\n        One problem they exacerbate is the fact that it is not an error to declare the same variable multiple times: ",
                  "start": 2495,
                  "end": 3198,
                  "loc": {
                    "start": {
                      "line": 73,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 119
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f"
                },
                "arguments": [
                  {
                    "type": "BooleanLiteral",
                    "value": false
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns 'undefined'"
                },
                {
                  "type": "CommentBlock",
                  "value": " Some readers might do a double-take at this example.\r\n        The variable x was declared within the if block, and yet we were able to access it\r\n        from outside that block.\r\n        That’s because var declarations are accessible anywhere within their containing function,\r\n        module, namespace, or global scope - all which we’ll go over later on - regardless of the containing\r\n        block.\r\n        Some people call this var-scoping or function-scoping.\r\n        Parameters are also function scoped.\r\n        These scoping rules can cause several types of mistakes.\r\n        One problem they exacerbate is the fact that it is not an error to declare the same variable multiple times: ",
                  "start": 2495,
                  "end": 3198,
                  "loc": {
                    "start": {
                      "line": 73,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 119
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "sumMatrix"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "matrix",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSArrayType",
                      "elementType": {
                        "type": "TSArrayType",
                        "elementType": {
                          "type": "TSNumberKeyword"
                        }
                      }
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "sum"
                        },
                        "init": {
                          "type": "NumericLiteral",
                          "extra": {
                            "rawValue": 0,
                            "raw": "0"
                          },
                          "value": 0
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ForStatement",
                    "init": {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "i"
                          },
                          "init": {
                            "type": "NumericLiteral",
                            "extra": {
                              "rawValue": 0,
                              "raw": "0"
                            },
                            "value": 0
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    "test": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "Identifier",
                        "name": "i"
                      },
                      "operator": "<",
                      "right": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "matrix"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    },
                    "update": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "prefix": false,
                      "argument": {
                        "type": "Identifier",
                        "name": "i"
                      }
                    },
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "currentRow"
                              },
                              "init": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "matrix"
                                },
                                "computed": true,
                                "property": {
                                  "type": "Identifier",
                                  "name": "i"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ForStatement",
                          "init": {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "init": {
                                  "type": "NumericLiteral",
                                  "extra": {
                                    "rawValue": 0,
                                    "raw": "0"
                                  },
                                  "value": 0
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "i"
                            },
                            "operator": "<",
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "currentRow"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            }
                          },
                          "update": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "prefix": false,
                            "argument": {
                              "type": "Identifier",
                              "name": "i"
                            }
                          },
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "+=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "sum"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "currentRow"
                                    },
                                    "computed": true,
                                    "property": {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  }
                                }
                              }
                            ],
                            "directives": []
                          }
                        }
                      ],
                      "directives": []
                    }
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "sum"
                    }
                  }
                ],
                "directives": []
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": " Maybe it was easy to spot out for some, but the inner for-loop will accidentally overwrite\r\n    the variable i because i refers to the same function-scoped variable.\r\n    As experienced developers know by now, similar sorts of bugs slip through code reviews\r\n    and can be an endless source of frustration. ",
            "start": 3515,
            "end": 3828,
            "loc": {
              "start": {
                "line": 94,
                "column": 0
              },
              "end": {
                "line": 97,
                "column": 51
              }
            }
          }
        ],
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_capturing_quirks"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ForStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Variable capturing quirks\r\n        Take a quick second to guess what the output of the following snippet is: ",
                  "start": 3880,
                  "end": 4003,
                  "loc": {
                    "start": {
                      "line": 99,
                      "column": 4
                    },
                    "end": {
                      "line": 101,
                      "column": 84
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " For those unfamiliar, setTimeout will try to execute a function after a certain number of milliseconds\r\n        (though waiting for anything else to stop running).\r\n        Ready? Take a look:\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    Many JavaScript developers are intimately familiar with this behavior, but if you’re surprised,\r\n    you’re certainly not alone. Most people expect the output to be\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9\r\n    Remember what we mentioned earlier about variable capturing? Every function expression we pass to setTimeout actually refers to the same i from the same scope.\r\n    Let’s take a minute to consider what that means.\r\n    setTimeout will run a function after some number of milliseconds, but only after the for loop has stopped\r\n    executing; By the time the for loop has stopped executing, the value of i is 10.\r\n    So each time the given function gets called, it will print out 10!\r\n    A common work around is to use an IIFE - an Immediately Invoked Function Expression - to capture i at each iteration:",
                  "start": 4115,
                  "end": 5243,
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 4
                    },
                    "end": {
                      "line": 135,
                      "column": 123
                    }
                  }
                }
              ],
              "init": {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "i"
                    },
                    "init": {
                      "type": "NumericLiteral",
                      "extra": {
                        "rawValue": 0,
                        "raw": "0"
                      },
                      "value": 0
                    }
                  }
                ],
                "kind": "var"
              },
              "test": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "i"
                },
                "operator": "<",
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 10,
                    "raw": "10"
                  },
                  "value": 10
                }
              },
              "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "name": "i"
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "setTimeout"
                      },
                      "arguments": [
                        {
                          "type": "FunctionExpression",
                          "id": null,
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "console"
                                    },
                                    "computed": false,
                                    "property": {
                                      "type": "Identifier",
                                      "name": "log"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  ]
                                }
                              }
                            ],
                            "directives": []
                          }
                        },
                        {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "NumericLiteral",
                            "extra": {
                              "rawValue": 100,
                              "raw": "100"
                            },
                            "value": 100
                          },
                          "operator": "*",
                          "right": {
                            "type": "Identifier",
                            "name": "i"
                          }
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ForStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " For those unfamiliar, setTimeout will try to execute a function after a certain number of milliseconds\r\n        (though waiting for anything else to stop running).\r\n        Ready? Take a look:\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    Many JavaScript developers are intimately familiar with this behavior, but if you’re surprised,\r\n    you’re certainly not alone. Most people expect the output to be\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9\r\n    Remember what we mentioned earlier about variable capturing? Every function expression we pass to setTimeout actually refers to the same i from the same scope.\r\n    Let’s take a minute to consider what that means.\r\n    setTimeout will run a function after some number of milliseconds, but only after the for loop has stopped\r\n    executing; By the time the for loop has stopped executing, the value of i is 10.\r\n    So each time the given function gets called, it will print out 10!\r\n    A common work around is to use an IIFE - an Immediately Invoked Function Expression - to capture i at each iteration:",
                  "start": 4115,
                  "end": 5243,
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 4
                    },
                    "end": {
                      "line": 135,
                      "column": 123
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This odd-looking pattern is actually pretty common.\r\n        The i in the parameter list actually shadows the i declared in the for loop,\r\n        but since we named them the same, we didn’t have to modify the loop body too much.",
                  "start": 5503,
                  "end": 5737,
                  "loc": {
                    "start": {
                      "line": 143,
                      "column": 4
                    },
                    "end": {
                      "line": 145,
                      "column": 92
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        let declarations\r\n        By now you’ve figured out that var has some problems, which is precisely why let statements\r\n        were introduced.\r\n        Apart from the keyword used, let statements are written the same way var statements are. ",
                  "start": 5745,
                  "end": 6001,
                  "loc": {
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 151,
                      "column": 99
                    }
                  }
                }
              ],
              "init": {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "i"
                    },
                    "init": {
                      "type": "NumericLiteral",
                      "extra": {
                        "rawValue": 0,
                        "raw": "0"
                      },
                      "value": 0
                    }
                  }
                ],
                "kind": "var"
              },
              "test": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "i"
                },
                "operator": "<",
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 10,
                    "raw": "10"
                  },
                  "value": 10
                }
              },
              "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "name": "i"
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "leadingComments": [
                      {
                        "type": "CommentLine",
                        "value": " capture the current state of 'i'"
                      },
                      {
                        "type": "CommentLine",
                        "value": " by invoking a function with its current value"
                      }
                    ],
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "FunctionExpression",
                        "extra": {
                          "parenthesized": true,
                          "parenStart": 5392
                        },
                        "id": null,
                        "generator": false,
                        "async": false,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "i"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "setTimeout"
                                },
                                "arguments": [
                                  {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "generator": false,
                                    "async": false,
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "object": {
                                                "type": "Identifier",
                                                "name": "console"
                                              },
                                              "computed": false,
                                              "property": {
                                                "type": "Identifier",
                                                "name": "log"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "i"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "directives": []
                                    }
                                  },
                                  {
                                    "type": "BinaryExpression",
                                    "left": {
                                      "type": "NumericLiteral",
                                      "extra": {
                                        "rawValue": 100,
                                        "raw": "100"
                                      },
                                      "value": 100
                                    },
                                    "operator": "*",
                                    "right": {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "directives": []
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "i"
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This odd-looking pattern is actually pretty common.\r\n        The i in the parameter list actually shadows the i declared in the for loop,\r\n        but since we named them the same, we didn’t have to modify the loop body too much.",
                  "start": 5503,
                  "end": 5737,
                  "loc": {
                    "start": {
                      "line": 143,
                      "column": 4
                    },
                    "end": {
                      "line": 145,
                      "column": 92
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        let declarations\r\n        By now you’ve figured out that var has some problems, which is precisely why let statements\r\n        were introduced.\r\n        Apart from the keyword used, let statements are written the same way var statements are. ",
                  "start": 5745,
                  "end": 6001,
                  "loc": {
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 151,
                      "column": 99
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The key difference is not in the syntax, but in the semantics, which we’ll now dive into.",
                  "start": 6034,
                  "end": 6128,
                  "loc": {
                    "start": {
                      "line": 153,
                      "column": 4
                    },
                    "end": {
                      "line": 153,
                      "column": 98
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "hello"
                  },
                  "init": {
                    "type": "StringLiteral",
                    "extra": {
                      "rawValue": "Hello!",
                      "raw": "\"Hello!\""
                    },
                    "value": "Hello!"
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_Block_scoping"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Block-scoping\r\n        When a variable is declared using let, it uses what some call lexical-scoping or block-scoping.\r\n        Unlike variables declared with var whose scopes leak out to their containing function,\r\n        block-scoped variables are not visible outside of their nearest containing block or for-loop.",
                  "start": 6180,
                  "end": 6511,
                  "loc": {
                    "start": {
                      "line": 156,
                      "column": 4
                    },
                    "end": {
                      "line": 160,
                      "column": 103
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Here, we have two local variables a and b. a’s scope is limited to the body of f while b’s scope\r\n        is limited to the containing if statement’s block.\r\n        Variables declared in a catch clause also have similar scoping rules.",
                  "start": 6775,
                  "end": 7015,
                  "loc": {
                    "start": {
                      "line": 174,
                      "column": 4
                    },
                    "end": {
                      "line": 176,
                      "column": 79
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "input",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSBooleanKeyword"
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "a"
                        },
                        "init": {
                          "type": "NumericLiteral",
                          "extra": {
                            "rawValue": 100,
                            "raw": "100"
                          },
                          "value": 100
                        }
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "IfStatement",
                    "trailingComments": [
                      {
                        "type": "CommentLine",
                        "value": " Error: 'b' doesn't exist here"
                      }
                    ],
                    "test": {
                      "type": "Identifier",
                      "name": "input"
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "leadingComments": [
                            {
                              "type": "CommentLine",
                              "value": " Still okay to reference 'a'"
                            }
                          ],
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "b"
                              },
                              "init": {
                                "type": "BinaryExpression",
                                "left": {
                                  "type": "Identifier",
                                  "name": "a"
                                },
                                "operator": "+",
                                "right": {
                                  "type": "NumericLiteral",
                                  "extra": {
                                    "rawValue": 1,
                                    "raw": "1"
                                  },
                                  "value": 1
                                }
                              }
                            }
                          ],
                          "kind": "let"
                        },
                        {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "b"
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "leadingComments": [
                      {
                        "type": "CommentLine",
                        "value": " Error: 'b' doesn't exist here"
                      }
                    ],
                    "argument": {
                      "type": "Identifier",
                      "name": "b"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "TryStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Here, we have two local variables a and b. a’s scope is limited to the body of f while b’s scope\r\n        is limited to the containing if statement’s block.\r\n        Variables declared in a catch clause also have similar scoping rules.",
                  "start": 6775,
                  "end": 7015,
                  "loc": {
                    "start": {
                      "line": 174,
                      "column": 4
                    },
                    "end": {
                      "line": 176,
                      "column": 79
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Error: 'e' doesn't exist here"
                }
              ],
              "block": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "StringLiteral",
                      "extra": {
                        "rawValue": "oh no!",
                        "raw": "\"oh no!\""
                      },
                      "value": "oh no!"
                    }
                  }
                ],
                "directives": []
              },
              "handler": {
                "type": "CatchClause",
                "param": {
                  "type": "Identifier",
                  "name": "e"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "console"
                          },
                          "computed": false,
                          "property": {
                            "type": "Identifier",
                            "name": "log"
                          }
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "extra": {
                              "rawValue": "Oh well.",
                              "raw": "\"Oh well.\""
                            },
                            "value": "Oh well."
                          }
                        ]
                      }
                    }
                  ],
                  "directives": []
                }
              },
              "finalizer": null
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Error: 'e' doesn't exist here"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Another property of block-scoped variables is that they can’t be read or written to before\r\n        they’re actually declared. While these variables are “present” throughout their scope,\r\n        all points up until their declaration are part of their temporal dead zone.\r\n        This is just a sophisticated way of saying you can’t access them before the let statement,\r\n        and luckily TypeScript will let you know that. ",
                  "start": 7181,
                  "end": 7614,
                  "loc": {
                    "start": {
                      "line": 185,
                      "column": 4
                    },
                    "end": {
                      "line": 189,
                      "column": 57
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "console"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "log"
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "e"
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Another property of block-scoped variables is that they can’t be read or written to before\r\n        they’re actually declared. While these variables are “present” throughout their scope,\r\n        all points up until their declaration are part of their temporal dead zone.\r\n        This is just a sophisticated way of saying you can’t access them before the let statement,\r\n        and luckily TypeScript will let you know that. ",
                  "start": 7181,
                  "end": 7614,
                  "loc": {
                    "start": {
                      "line": 185,
                      "column": 4
                    },
                    "end": {
                      "line": 189,
                      "column": 57
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " illegal to use 'a' before it's declared;"
                }
              ],
              "expression": {
                "type": "UpdateExpression",
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "name": "a"
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " illegal to use 'a' before it's declared;"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Something to note is that you can still capture a block-scoped variable before it’s declared.\r\n        The only catch is that it’s illegal to call that function before the declaration.\r\n        If targeting ES2015, a modern runtime will throw an error; however, right now TypeScript\r\n        is permissive and won’t report this as an error. ",
                  "start": 7687,
                  "end": 8033,
                  "loc": {
                    "start": {
                      "line": 192,
                      "column": 4
                    },
                    "end": {
                      "line": 195,
                      "column": 59
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "a1"
                  },
                  "init": null
                }
              ],
              "kind": "let"
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Something to note is that you can still capture a block-scoped variable before it’s declared.\r\n        The only catch is that it’s illegal to call that function before the declaration.\r\n        If targeting ES2015, a modern runtime will throw an error; however, right now TypeScript\r\n        is permissive and won’t report this as an error. ",
                  "start": 7687,
                  "end": 8033,
                  "loc": {
                    "start": {
                      "line": 192,
                      "column": 4
                    },
                    "end": {
                      "line": 195,
                      "column": 59
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " illegal call 'foo' before 'a' is declared"
                },
                {
                  "type": "CommentLine",
                  "value": " runtimes should throw an error here"
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "foo"
              },
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "leadingComments": [
                      {
                        "type": "CommentLine",
                        "value": " okay to capture 'a'"
                      }
                    ],
                    "argument": {
                      "type": "Identifier",
                      "name": "a"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " illegal call 'foo' before 'a' is declared"
                },
                {
                  "type": "CommentLine",
                  "value": " runtimes should throw an error here"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "foo"
                },
                "arguments": []
              }
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " For more information on temporal dead zones, see relevant content on the Mozilla Developer Network. ",
                  "start": 8244,
                  "end": 8349,
                  "loc": {
                    "start": {
                      "line": 207,
                      "column": 4
                    },
                    "end": {
                      "line": 207,
                      "column": 109
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "a2"
                  },
                  "init": null
                }
              ],
              "kind": "let"
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_Re_declarations_and_Shadowing"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Re-declarations and Shadowing\r\n        With var declarations, we mentioned that it didn’t matter how many times you declared your variables;\r\n        you just got one. ",
                  "start": 8419,
                  "end": 8601,
                  "loc": {
                    "start": {
                      "line": 211,
                      "column": 4
                    },
                    "end": {
                      "line": 214,
                      "column": 28
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " In the above example, all declarations of x actually refer to the same x, and this is perfectly valid.\r\n        This often ends up being a source of bugs. Thankfully, let declarations are not as forgiving. ",
                  "start": 8722,
                  "end": 8933,
                  "loc": {
                    "start": {
                      "line": 223,
                      "column": 4
                    },
                    "end": {
                      "line": 224,
                      "column": 104
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f1"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "x"
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "x"
                        },
                        "init": null
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "x"
                        },
                        "init": null
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BooleanLiteral",
                      "value": true
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "x"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " In the above example, all declarations of x actually refer to the same x, and this is perfectly valid.\r\n        This often ends up being a source of bugs. Thankfully, let declarations are not as forgiving. ",
                  "start": 8722,
                  "end": 8933,
                  "loc": {
                    "start": {
                      "line": 223,
                      "column": 4
                    },
                    "end": {
                      "line": 224,
                      "column": 104
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "x1"
                  },
                  "init": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 10,
                      "raw": "10"
                    },
                    "value": 10
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error: can't re-declare 'x' in the same scope"
                },
                {
                  "type": "CommentBlock",
                  "value": " The variables don’t necessarily need to both be block-scoped for TypeScript to tell us\r\n        that there’s a problem.",
                  "start": 9024,
                  "end": 9148,
                  "loc": {
                    "start": {
                      "line": 227,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 33
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "x2"
                  },
                  "init": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 20,
                      "raw": "20"
                    },
                    "value": 20
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error: can't re-declare 'x' in the same scope"
                },
                {
                  "type": "CommentBlock",
                  "value": " The variables don’t necessarily need to both be block-scoped for TypeScript to tell us\r\n        that there’s a problem.",
                  "start": 9024,
                  "end": 9148,
                  "loc": {
                    "start": {
                      "line": 227,
                      "column": 4
                    },
                    "end": {
                      "line": 228,
                      "column": 33
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f2"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "x"
                }
              ],
              "body": {
                "type": "BlockStatement",
                "innerComments": [
                  {
                    "type": "CommentLine",
                    "value": " let x = 100; // error: interferes with parameter declaration"
                  }
                ],
                "body": [],
                "directives": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " That’s not to say that block-scoped variable can never be declared with a function-scoped variable.\r\n        The block-scoped variable just needs to be declared within a distinctly different block.",
                  "start": 9376,
                  "end": 9578,
                  "loc": {
                    "start": {
                      "line": 236,
                      "column": 4
                    },
                    "end": {
                      "line": 237,
                      "column": 98
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "g"
              },
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "leadingComments": [
                      {
                        "type": "CommentLine",
                        "value": " let x = 100;"
                      }
                    ],
                    "trailingComments": [
                      {
                        "type": "CommentLine",
                        "value": " error: can't have both declarations of 'x'"
                      }
                    ],
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "x"
                        },
                        "init": {
                          "type": "NumericLiteral",
                          "extra": {
                            "rawValue": 100,
                            "raw": "100"
                          },
                          "value": 100
                        }
                      }
                    ],
                    "kind": "var"
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " That’s not to say that block-scoped variable can never be declared with a function-scoped variable.\r\n        The block-scoped variable just needs to be declared within a distinctly different block.",
                  "start": 9376,
                  "end": 9578,
                  "loc": {
                    "start": {
                      "line": 236,
                      "column": 4
                    },
                    "end": {
                      "line": 237,
                      "column": 98
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f3"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "condition"
                },
                {
                  "type": "Identifier",
                  "name": "x"
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "Identifier",
                      "name": "condition"
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "x"
                              },
                              "init": {
                                "type": "NumericLiteral",
                                "extra": {
                                  "rawValue": 100,
                                  "raw": "100"
                                },
                                "value": 100
                              }
                            }
                          ],
                          "kind": "let"
                        },
                        {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "x"
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "x"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '0'"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f3"
                },
                "arguments": [
                  {
                    "type": "BooleanLiteral",
                    "value": false
                  },
                  {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 0,
                      "raw": "0"
                    },
                    "value": 0
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '0'"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '100'"
                },
                {
                  "type": "CommentBlock",
                  "value": " The act of introducing a new name in a more nested scope is called shadowing.\r\n        It is a bit of a double-edged sword in that it can introduce certain bugs on its own\r\n        in the event of accidental shadowing, while also preventing certain bugs.\r\n        For instance, imagine we had written our earlier sumMatrix function using let variables. ",
                  "start": 9801,
                  "end": 10159,
                  "loc": {
                    "start": {
                      "line": 248,
                      "column": 4
                    },
                    "end": {
                      "line": 251,
                      "column": 99
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f3"
                },
                "arguments": [
                  {
                    "type": "BooleanLiteral",
                    "value": true
                  },
                  {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 0,
                      "raw": "0"
                    },
                    "value": 0
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " returns '100'"
                },
                {
                  "type": "CommentBlock",
                  "value": " The act of introducing a new name in a more nested scope is called shadowing.\r\n        It is a bit of a double-edged sword in that it can introduce certain bugs on its own\r\n        in the event of accidental shadowing, while also preventing certain bugs.\r\n        For instance, imagine we had written our earlier sumMatrix function using let variables. ",
                  "start": 9801,
                  "end": 10159,
                  "loc": {
                    "start": {
                      "line": 248,
                      "column": 4
                    },
                    "end": {
                      "line": 251,
                      "column": 99
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This version of the loop will actually perform the summation correctly because the inner loop’s i\r\n        shadows i from the outer loop.\r\n        Shadowing should usually be avoided in the interest of writing clearer code.\r\n        While there are some scenarios where it may be fitting to take advantage of it,\r\n        you should use your best judgement. ",
                  "start": 10477,
                  "end": 10840,
                  "loc": {
                    "start": {
                      "line": 262,
                      "column": 4
                    },
                    "end": {
                      "line": 266,
                      "column": 46
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Block-scoped variable capturing\r\n        When we first touched on the idea of variable capturing with var declaration,\r\n        we briefly went into how variables act once captured.\r\n        To give a better intuition of this, each time a scope is run,\r\n        it creates an “environment” of variables.\r\n        That environment and its captured variables can exist even after everything within its scope\r\n        has finished executing. ",
                  "start": 10848,
                  "end": 11301,
                  "loc": {
                    "start": {
                      "line": 268,
                      "column": 4
                    },
                    "end": {
                      "line": 275,
                      "column": 34
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "sumMatrix"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "matrix",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSArrayType",
                      "elementType": {
                        "type": "TSArrayType",
                        "elementType": {
                          "type": "TSNumberKeyword"
                        }
                      }
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "sum"
                        },
                        "init": {
                          "type": "NumericLiteral",
                          "extra": {
                            "rawValue": 0,
                            "raw": "0"
                          },
                          "value": 0
                        }
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "ForStatement",
                    "init": {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "i"
                          },
                          "init": {
                            "type": "NumericLiteral",
                            "extra": {
                              "rawValue": 0,
                              "raw": "0"
                            },
                            "value": 0
                          }
                        }
                      ],
                      "kind": "let"
                    },
                    "test": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "Identifier",
                        "name": "i"
                      },
                      "operator": "<",
                      "right": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "matrix"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    },
                    "update": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "prefix": false,
                      "argument": {
                        "type": "Identifier",
                        "name": "i"
                      }
                    },
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "currentRow"
                              },
                              "init": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "matrix"
                                },
                                "computed": true,
                                "property": {
                                  "type": "Identifier",
                                  "name": "i"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ForStatement",
                          "init": {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "init": {
                                  "type": "NumericLiteral",
                                  "extra": {
                                    "rawValue": 0,
                                    "raw": "0"
                                  },
                                  "value": 0
                                }
                              }
                            ],
                            "kind": "let"
                          },
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "i"
                            },
                            "operator": "<",
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "currentRow"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            }
                          },
                          "update": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "prefix": false,
                            "argument": {
                              "type": "Identifier",
                              "name": "i"
                            }
                          },
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "+=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "sum"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "currentRow"
                                    },
                                    "computed": true,
                                    "property": {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  }
                                }
                              }
                            ],
                            "directives": []
                          }
                        }
                      ],
                      "directives": []
                    }
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "sum"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This version of the loop will actually perform the summation correctly because the inner loop’s i\r\n        shadows i from the outer loop.\r\n        Shadowing should usually be avoided in the interest of writing clearer code.\r\n        While there are some scenarios where it may be fitting to take advantage of it,\r\n        you should use your best judgement. ",
                  "start": 10477,
                  "end": 10840,
                  "loc": {
                    "start": {
                      "line": 262,
                      "column": 4
                    },
                    "end": {
                      "line": 266,
                      "column": 46
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Block-scoped variable capturing\r\n        When we first touched on the idea of variable capturing with var declaration,\r\n        we briefly went into how variables act once captured.\r\n        To give a better intuition of this, each time a scope is run,\r\n        it creates an “environment” of variables.\r\n        That environment and its captured variables can exist even after everything within its scope\r\n        has finished executing. ",
                  "start": 10848,
                  "end": 11301,
                  "loc": {
                    "start": {
                      "line": 268,
                      "column": 4
                    },
                    "end": {
                      "line": 275,
                      "column": 34
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Because we’ve captured city from within its environment, we’re still able to access it despite\r\n        the fact that the if block finished executing.\r\n        Recall that with our earlier setTimeout example, we ended up needing to use an IIFE to capture\r\n        the state of a variable for every iteration of the for loop.\r\n        In effect, what we were doing was creating a new variable environment for our captured variables.\r\n        That was a bit of a pain, but luckily, you’ll never have to do that again in TypeScript.\r\n\r\n        let declarations have drastically different behavior when declared as part of a loop.\r\n        Rather than just introducing a new environment to the loop itself,\r\n        these declarations sort of create a new scope per iteration.\r\n        Since this is what we were doing anyway with our IIFE, we can change our old setTimeout\r\n        example to just use a let declaration. ",
                  "start": 11556,
                  "end": 12479,
                  "loc": {
                    "start": {
                      "line": 287,
                      "column": 4
                    },
                    "end": {
                      "line": 298,
                      "column": 49
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "theCityThatAlwaysSleeps"
              },
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "getCity"
                        },
                        "init": null
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BooleanLiteral",
                      "value": true
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "city"
                              },
                              "init": {
                                "type": "StringLiteral",
                                "extra": {
                                  "rawValue": "Seattle",
                                  "raw": "\"Seattle\""
                                },
                                "value": "Seattle"
                              }
                            }
                          ],
                          "kind": "let"
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "getCity"
                            },
                            "right": {
                              "type": "FunctionExpression",
                              "id": null,
                              "generator": false,
                              "async": false,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "city"
                                    }
                                  }
                                ],
                                "directives": []
                              }
                            }
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getCity"
                      },
                      "arguments": []
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ForStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Because we’ve captured city from within its environment, we’re still able to access it despite\r\n        the fact that the if block finished executing.\r\n        Recall that with our earlier setTimeout example, we ended up needing to use an IIFE to capture\r\n        the state of a variable for every iteration of the for loop.\r\n        In effect, what we were doing was creating a new variable environment for our captured variables.\r\n        That was a bit of a pain, but luckily, you’ll never have to do that again in TypeScript.\r\n\r\n        let declarations have drastically different behavior when declared as part of a loop.\r\n        Rather than just introducing a new environment to the loop itself,\r\n        these declarations sort of create a new scope per iteration.\r\n        Since this is what we were doing anyway with our IIFE, we can change our old setTimeout\r\n        example to just use a let declaration. ",
                  "start": 11556,
                  "end": 12479,
                  "loc": {
                    "start": {
                      "line": 287,
                      "column": 4
                    },
                    "end": {
                      "line": 298,
                      "column": 49
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " and as expected, this will print out\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9 ",
                  "start": 12591,
                  "end": 12703,
                  "loc": {
                    "start": {
                      "line": 302,
                      "column": 4
                    },
                    "end": {
                      "line": 312,
                      "column": 8
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        const declarations\r\n        const declarations are another way of declaring variables. ",
                  "start": 12711,
                  "end": 12812,
                  "loc": {
                    "start": {
                      "line": 314,
                      "column": 4
                    },
                    "end": {
                      "line": 316,
                      "column": 69
                    }
                  }
                }
              ],
              "init": {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "i"
                    },
                    "init": {
                      "type": "NumericLiteral",
                      "extra": {
                        "rawValue": 0,
                        "raw": "0"
                      },
                      "value": 0
                    }
                  }
                ],
                "kind": "let"
              },
              "test": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "i"
                },
                "operator": "<",
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 10,
                    "raw": "10"
                  },
                  "value": 10
                }
              },
              "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "name": "i"
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "setTimeout"
                      },
                      "arguments": [
                        {
                          "type": "FunctionExpression",
                          "id": null,
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "console"
                                    },
                                    "computed": false,
                                    "property": {
                                      "type": "Identifier",
                                      "name": "log"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  ]
                                }
                              }
                            ],
                            "directives": []
                          }
                        },
                        {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "NumericLiteral",
                            "extra": {
                              "rawValue": 100,
                              "raw": "100"
                            },
                            "value": 100
                          },
                          "operator": "*",
                          "right": {
                            "type": "Identifier",
                            "name": "i"
                          }
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " and as expected, this will print out\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9 ",
                  "start": 12591,
                  "end": 12703,
                  "loc": {
                    "start": {
                      "line": 302,
                      "column": 4
                    },
                    "end": {
                      "line": 312,
                      "column": 8
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        const declarations\r\n        const declarations are another way of declaring variables. ",
                  "start": 12711,
                  "end": 12812,
                  "loc": {
                    "start": {
                      "line": 314,
                      "column": 4
                    },
                    "end": {
                      "line": 316,
                      "column": 69
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " They are like let declarations but, as their name implies, their value cannot be changed once\r\n        they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them.\r\n        This should not be confused with the idea that the values they refer to are immutable. ",
                  "start": 12850,
                  "end": 13160,
                  "loc": {
                    "start": {
                      "line": 318,
                      "column": 4
                    },
                    "end": {
                      "line": 320,
                      "column": 97
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "numLivesForCat1"
                  },
                  "init": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 9,
                      "raw": "9"
                    },
                    "value": 9
                  }
                }
              ],
              "kind": "const"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " They are like let declarations but, as their name implies, their value cannot be changed once\r\n        they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them.\r\n        This should not be confused with the idea that the values they refer to are immutable. ",
                  "start": 12850,
                  "end": 13160,
                  "loc": {
                    "start": {
                      "line": 318,
                      "column": 4
                    },
                    "end": {
                      "line": 320,
                      "column": 97
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "numLivesForCat2"
                  },
                  "init": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 9,
                      "raw": "9"
                    },
                    "value": 9
                  }
                }
              ],
              "kind": "const"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Error ",
                  "start": 13287,
                  "end": 13298,
                  "loc": {
                    "start": {
                      "line": 326,
                      "column": 4
                    },
                    "end": {
                      "line": 326,
                      "column": 15
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "kitty"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "extra": {
                      "trailingComma": 13273
                    },
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 13223,
                        "end": 13237,
                        "loc": {
                          "start": {
                            "line": 323,
                            "column": 8
                          },
                          "end": {
                            "line": 323,
                            "column": 22
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 13223,
                          "end": 13227,
                          "loc": {
                            "start": {
                              "line": 323,
                              "column": 8
                            },
                            "end": {
                              "line": 323,
                              "column": 12
                            },
                            "identifierName": "name"
                          },
                          "name": "name"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 13229,
                          "end": 13237,
                          "loc": {
                            "start": {
                              "line": 323,
                              "column": 14
                            },
                            "end": {
                              "line": 323,
                              "column": 22
                            }
                          },
                          "extra": {
                            "rawValue": "Aurora",
                            "raw": "\"Aurora\""
                          },
                          "value": "Aurora"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 13248,
                        "end": 13273,
                        "loc": {
                          "start": {
                            "line": 324,
                            "column": 8
                          },
                          "end": {
                            "line": 324,
                            "column": 33
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 13248,
                          "end": 13256,
                          "loc": {
                            "start": {
                              "line": 324,
                              "column": 8
                            },
                            "end": {
                              "line": 324,
                              "column": 16
                            },
                            "identifierName": "numLives"
                          },
                          "name": "numLives"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "Identifier",
                          "start": 13258,
                          "end": 13273,
                          "loc": {
                            "start": {
                              "line": 324,
                              "column": 18
                            },
                            "end": {
                              "line": 324,
                              "column": 33
                            },
                            "identifierName": "numLivesForCat2"
                          },
                          "name": "numLivesForCat2"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "const"
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Error ",
                  "start": 13287,
                  "end": 13298,
                  "loc": {
                    "start": {
                      "line": 326,
                      "column": 4
                    },
                    "end": {
                      "line": 326,
                      "column": 15
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " all \"okay\""
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "kitty"
                },
                "right": {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "ObjectProperty",
                      "start": 13323,
                      "end": 13339,
                      "loc": {
                        "start": {
                          "line": 328,
                          "column": 8
                        },
                        "end": {
                          "line": 328,
                          "column": 24
                        }
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 13323,
                        "end": 13327,
                        "loc": {
                          "start": {
                            "line": 328,
                            "column": 8
                          },
                          "end": {
                            "line": 328,
                            "column": 12
                          },
                          "identifierName": "name"
                        },
                        "name": "name"
                      },
                      "computed": false,
                      "shorthand": false,
                      "value": {
                        "type": "StringLiteral",
                        "start": 13329,
                        "end": 13339,
                        "loc": {
                          "start": {
                            "line": 328,
                            "column": 14
                          },
                          "end": {
                            "line": 328,
                            "column": 24
                          }
                        },
                        "extra": {
                          "rawValue": "Danielle",
                          "raw": "\"Danielle\""
                        },
                        "value": "Danielle"
                      }
                    },
                    {
                      "type": "ObjectProperty",
                      "start": 13350,
                      "end": 13375,
                      "loc": {
                        "start": {
                          "line": 329,
                          "column": 8
                        },
                        "end": {
                          "line": 329,
                          "column": 33
                        }
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 13350,
                        "end": 13358,
                        "loc": {
                          "start": {
                            "line": 329,
                            "column": 8
                          },
                          "end": {
                            "line": 329,
                            "column": 16
                          },
                          "identifierName": "numLives"
                        },
                        "name": "numLives"
                      },
                      "computed": false,
                      "shorthand": false,
                      "value": {
                        "type": "Identifier",
                        "start": 13360,
                        "end": 13375,
                        "loc": {
                          "start": {
                            "line": 329,
                            "column": 18
                          },
                          "end": {
                            "line": 329,
                            "column": 33
                          },
                          "identifierName": "numLivesForCat2"
                        },
                        "name": "numLivesForCat2"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " all \"okay\""
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "kitty"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "name"
                  }
                },
                "right": {
                  "type": "StringLiteral",
                  "extra": {
                    "rawValue": "Rory",
                    "raw": "\"Rory\""
                  },
                  "value": "Rory"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "kitty"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "name"
                  }
                },
                "right": {
                  "type": "StringLiteral",
                  "extra": {
                    "rawValue": "Kitty",
                    "raw": "\"Kitty\""
                  },
                  "value": "Kitty"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "kitty"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "name"
                  }
                },
                "right": {
                  "type": "StringLiteral",
                  "extra": {
                    "rawValue": "Cat",
                    "raw": "\"Cat\""
                  },
                  "value": "Cat"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Unless you take specific measures to avoid it, the internal state of a const variable is still modifiable.\r\n        Fortunately, TypeScript allows you to specify that members of an object are readonly.\r\n        The chapter on Interfaces has the details.",
                  "start": 13509,
                  "end": 13767,
                  "loc": {
                    "start": {
                      "line": 336,
                      "column": 4
                    },
                    "end": {
                      "line": 338,
                      "column": 52
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        let vs. const\r\n        Given that we have two types of declarations with similar scoping semantics, it’s natural\r\n        to find ourselves asking which one to use. Like most broad questions, the answer is: it depends.\r\n        Applying the principle of least privilege, all declarations other than those you plan to modify\r\n        should use const.\r\n        The rationale is that if a variable didn’t need to get written to, others working on the same\r\n        codebase shouldn’t automatically be able to write to the object, and will need to consider whether\r\n        they really need to reassign to the variable.\r\n        Using const also makes code more predictable when reasoning about flow of data.\r\n        Use your best judgement, and if applicable, consult the matter with the rest of your team.\r\n        The majority of this handbook uses let declarations. ",
                  "start": 13775,
                  "end": 14657,
                  "loc": {
                    "start": {
                      "line": 340,
                      "column": 4
                    },
                    "end": {
                      "line": 351,
                      "column": 63
                    }
                  }
                }
              ],
              "expression": {
                "type": "UpdateExpression",
                "operator": "--",
                "prefix": false,
                "argument": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "kitty"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "numLives"
                  }
                }
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_Destructuring"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Destructuring\r\n        Another ECMAScript 2015 feature that TypeScript has is destructuring.\r\n        For a complete reference, see the article on the Mozilla Developer Network.\r\n        In this section, we’ll give a short overview. ",
                  "start": 14713,
                  "end": 14960,
                  "loc": {
                    "start": {
                      "line": 354,
                      "column": 8
                    },
                    "end": {
                      "line": 358,
                      "column": 56
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Array destructuring\r\n        The simplest form of destructuring is array destructuring assignment: ",
                  "start": 14968,
                  "end": 15081,
                  "loc": {
                    "start": {
                      "line": 360,
                      "column": 4
                    },
                    "end": {
                      "line": 362,
                      "column": 80
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "input"
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ArrayPattern",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "first1"
                      },
                      {
                        "type": "Identifier",
                        "name": "second1"
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "input"
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 1"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "console"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "log"
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "first1"
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 1"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 2"
                },
                {
                  "type": "CommentBlock",
                  "value": " This creates two new variables named first and second. This is equivalent to using indexing,\r\n        but is much more convenient:",
                  "start": 15227,
                  "end": 15362,
                  "loc": {
                    "start": {
                      "line": 367,
                      "column": 4
                    },
                    "end": {
                      "line": 368,
                      "column": 38
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "console"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "log"
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "second1"
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 2"
                },
                {
                  "type": "CommentBlock",
                  "value": " This creates two new variables named first and second. This is equivalent to using indexing,\r\n        but is much more convenient:",
                  "start": 15227,
                  "end": 15362,
                  "loc": {
                    "start": {
                      "line": 367,
                      "column": 4
                    },
                    "end": {
                      "line": 368,
                      "column": 38
                    }
                  }
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "first1"
                },
                "right": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "input"
                  },
                  "computed": true,
                  "property": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 0,
                      "raw": "0"
                    },
                    "value": 0
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Destructuring works with already-declared variables as well:",
                  "start": 15417,
                  "end": 15482,
                  "loc": {
                    "start": {
                      "line": 371,
                      "column": 4
                    },
                    "end": {
                      "line": 371,
                      "column": 69
                    }
                  }
                },
                {
                  "type": "CommentLine",
                  "value": " swap variables"
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "second1"
                },
                "right": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "input"
                  },
                  "computed": true,
                  "property": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 1,
                      "raw": "1"
                    },
                    "value": 1
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Destructuring works with already-declared variables as well:",
                  "start": 15417,
                  "end": 15482,
                  "loc": {
                    "start": {
                      "line": 371,
                      "column": 4
                    },
                    "end": {
                      "line": 371,
                      "column": 69
                    }
                  }
                },
                {
                  "type": "CommentLine",
                  "value": " swap variables"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " And with parameters to a function:",
                  "start": 15557,
                  "end": 15596,
                  "loc": {
                    "start": {
                      "line": 375,
                      "column": 4
                    },
                    "end": {
                      "line": 375,
                      "column": 43
                    }
                  }
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "ArrayPattern",
                  "elements": [
                    {
                      "type": "Identifier",
                      "name": "first1"
                    },
                    {
                      "type": "Identifier",
                      "name": "second1"
                    }
                  ]
                },
                "right": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "Identifier",
                      "name": "second1"
                    },
                    {
                      "type": "Identifier",
                      "name": "first1"
                    }
                  ]
                }
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " And with parameters to a function:",
                  "start": 15557,
                  "end": 15596,
                  "loc": {
                    "start": {
                      "line": 375,
                      "column": 4
                    },
                    "end": {
                      "line": 375,
                      "column": 43
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "ArrayPattern",
                  "elements": [
                    {
                      "type": "Identifier",
                      "name": "first"
                    },
                    {
                      "type": "Identifier",
                      "name": "second"
                    }
                  ],
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTupleType",
                      "elementTypes": [
                        {
                          "type": "TSNumberKeyword"
                        },
                        {
                          "type": "TSNumberKeyword"
                        }
                      ]
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "console"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "log"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "first"
                        }
                      ]
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "console"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "log"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "second"
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " You can create a variable for the remaining items in a list using the syntax ...: ",
                  "start": 15739,
                  "end": 15826,
                  "loc": {
                    "start": {
                      "line": 382,
                      "column": 4
                    },
                    "end": {
                      "line": 382,
                      "column": 91
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f"
                },
                "arguments": [
                  {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " You can create a variable for the remaining items in a list using the syntax ...: ",
                  "start": 15739,
                  "end": 15826,
                  "loc": {
                    "start": {
                      "line": 382,
                      "column": 4
                    },
                    "end": {
                      "line": 382,
                      "column": 91
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ArrayPattern",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "first2"
                      },
                      {
                        "type": "RestElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "rest"
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 3,
                          "raw": "3"
                        },
                        "value": 3
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 4,
                          "raw": "4"
                        },
                        "value": 4
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 1"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "console"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "log"
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "first2"
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 1"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs [ 2, 3, 4 ]"
                },
                {
                  "type": "CommentBlock",
                  "value": " Of course, since this is JavaScript, you can just ignore trailing elements you don’t care about: ",
                  "start": 15961,
                  "end": 16063,
                  "loc": {
                    "start": {
                      "line": 386,
                      "column": 4
                    },
                    "end": {
                      "line": 386,
                      "column": 106
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "console"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "log"
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "rest"
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs [ 2, 3, 4 ]"
                },
                {
                  "type": "CommentBlock",
                  "value": " Of course, since this is JavaScript, you can just ignore trailing elements you don’t care about: ",
                  "start": 15961,
                  "end": 16063,
                  "loc": {
                    "start": {
                      "line": 386,
                      "column": 4
                    },
                    "end": {
                      "line": 386,
                      "column": 106
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ArrayPattern",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "first3"
                      }
                    ]
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 3,
                          "raw": "3"
                        },
                        "value": 3
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 4,
                          "raw": "4"
                        },
                        "value": 4
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 1"
                },
                {
                  "type": "CommentBlock",
                  "value": " Or other elements:",
                  "start": 16142,
                  "end": 16165,
                  "loc": {
                    "start": {
                      "line": 389,
                      "column": 4
                    },
                    "end": {
                      "line": 389,
                      "column": 27
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "console"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "log"
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "first3"
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " outputs 1"
                },
                {
                  "type": "CommentBlock",
                  "value": " Or other elements:",
                  "start": 16142,
                  "end": 16165,
                  "loc": {
                    "start": {
                      "line": 389,
                      "column": 4
                    },
                    "end": {
                      "line": 389,
                      "column": 27
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Object destructuring\r\n        You can also destructure objects: ",
                  "start": 16219,
                  "end": 16297,
                  "loc": {
                    "start": {
                      "line": 392,
                      "column": 4
                    },
                    "end": {
                      "line": 394,
                      "column": 44
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ArrayPattern",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "second"
                      },
                      {
                        "type": "Identifier",
                        "name": "fourth"
                      }
                    ]
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 3,
                          "raw": "3"
                        },
                        "value": 3
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 4,
                          "raw": "4"
                        },
                        "value": 4
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Object destructuring\r\n        You can also destructure objects: ",
                  "start": 16219,
                  "end": 16297,
                  "loc": {
                    "start": {
                      "line": 392,
                      "column": 4
                    },
                    "end": {
                      "line": 394,
                      "column": 44
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "o"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 16322,
                        "end": 16330,
                        "loc": {
                          "start": {
                            "line": 396,
                            "column": 8
                          },
                          "end": {
                            "line": 396,
                            "column": 16
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16322,
                          "end": 16323,
                          "loc": {
                            "start": {
                              "line": 396,
                              "column": 8
                            },
                            "end": {
                              "line": 396,
                              "column": 9
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 16325,
                          "end": 16330,
                          "loc": {
                            "start": {
                              "line": 396,
                              "column": 11
                            },
                            "end": {
                              "line": 396,
                              "column": 16
                            }
                          },
                          "extra": {
                            "rawValue": "foo",
                            "raw": "\"foo\""
                          },
                          "value": "foo"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 16341,
                        "end": 16346,
                        "loc": {
                          "start": {
                            "line": 397,
                            "column": 8
                          },
                          "end": {
                            "line": 397,
                            "column": 13
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16341,
                          "end": 16342,
                          "loc": {
                            "start": {
                              "line": 397,
                              "column": 8
                            },
                            "end": {
                              "line": 397,
                              "column": 9
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 16344,
                          "end": 16346,
                          "loc": {
                            "start": {
                              "line": 397,
                              "column": 11
                            },
                            "end": {
                              "line": 397,
                              "column": 13
                            }
                          },
                          "extra": {
                            "rawValue": 12,
                            "raw": "12"
                          },
                          "value": 12
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 16357,
                        "end": 16365,
                        "loc": {
                          "start": {
                            "line": 398,
                            "column": 8
                          },
                          "end": {
                            "line": 398,
                            "column": 16
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16357,
                          "end": 16358,
                          "loc": {
                            "start": {
                              "line": 398,
                              "column": 8
                            },
                            "end": {
                              "line": 398,
                              "column": 9
                            },
                            "identifierName": "c"
                          },
                          "name": "c"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 16360,
                          "end": 16365,
                          "loc": {
                            "start": {
                              "line": 398,
                              "column": 11
                            },
                            "end": {
                              "line": 398,
                              "column": 16
                            }
                          },
                          "extra": {
                            "rawValue": "bar",
                            "raw": "\"bar\""
                          },
                          "value": "bar"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This creates new variables a and b from o.a and o.b. Notice that you can skip c if you don’t need it.\r\n        Like array destructuring, you can have assignment without declaration:",
                  "start": 16402,
                  "end": 16588,
                  "loc": {
                    "start": {
                      "line": 401,
                      "column": 4
                    },
                    "end": {
                      "line": 402,
                      "column": 80
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ObjectPattern",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 16385,
                        "end": 16386,
                        "loc": {
                          "start": {
                            "line": 400,
                            "column": 10
                          },
                          "end": {
                            "line": 400,
                            "column": 11
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16385,
                          "end": 16386,
                          "loc": {
                            "start": {
                              "line": 400,
                              "column": 10
                            },
                            "end": {
                              "line": 400,
                              "column": 11
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "Identifier",
                          "start": 16385,
                          "end": 16386,
                          "loc": {
                            "start": {
                              "line": 400,
                              "column": 10
                            },
                            "end": {
                              "line": 400,
                              "column": 11
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 16388,
                        "end": 16389,
                        "loc": {
                          "start": {
                            "line": 400,
                            "column": 13
                          },
                          "end": {
                            "line": 400,
                            "column": 14
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16388,
                          "end": 16389,
                          "loc": {
                            "start": {
                              "line": 400,
                              "column": 13
                            },
                            "end": {
                              "line": 400,
                              "column": 14
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "Identifier",
                          "start": 16388,
                          "end": 16389,
                          "loc": {
                            "start": {
                              "line": 400,
                              "column": 13
                            },
                            "end": {
                              "line": 400,
                              "column": 14
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "o"
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This creates new variables a and b from o.a and o.b. Notice that you can skip c if you don’t need it.\r\n        Like array destructuring, you can have assignment without declaration:",
                  "start": 16402,
                  "end": 16588,
                  "loc": {
                    "start": {
                      "line": 401,
                      "column": 4
                    },
                    "end": {
                      "line": 402,
                      "column": 80
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Notice that we had to surround this statement with parentheses. JavaScript normally parses\r\n        a { as the start of block.\r\n        You can create a variable for the remaining items in an object using the syntax ...: ",
                  "start": 16634,
                  "end": 16860,
                  "loc": {
                    "start": {
                      "line": 404,
                      "column": 4
                    },
                    "end": {
                      "line": 406,
                      "column": 95
                    }
                  }
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "extra": {
                  "parenthesized": true,
                  "parenStart": 16594
                },
                "operator": "=",
                "left": {
                  "type": "ObjectPattern",
                  "properties": [
                    {
                      "type": "ObjectProperty",
                      "start": 16597,
                      "end": 16598,
                      "loc": {
                        "start": {
                          "line": 403,
                          "column": 7
                        },
                        "end": {
                          "line": 403,
                          "column": 8
                        }
                      },
                      "extra": {
                        "shorthand": true
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 16597,
                        "end": 16598,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 7
                          },
                          "end": {
                            "line": 403,
                            "column": 8
                          },
                          "identifierName": "a"
                        },
                        "name": "a"
                      },
                      "computed": false,
                      "shorthand": true,
                      "value": {
                        "type": "Identifier",
                        "start": 16597,
                        "end": 16598,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 7
                          },
                          "end": {
                            "line": 403,
                            "column": 8
                          },
                          "identifierName": "a"
                        },
                        "name": "a"
                      }
                    },
                    {
                      "type": "ObjectProperty",
                      "start": 16600,
                      "end": 16601,
                      "loc": {
                        "start": {
                          "line": 403,
                          "column": 10
                        },
                        "end": {
                          "line": 403,
                          "column": 11
                        }
                      },
                      "extra": {
                        "shorthand": true
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 16600,
                        "end": 16601,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 10
                          },
                          "end": {
                            "line": 403,
                            "column": 11
                          },
                          "identifierName": "b"
                        },
                        "name": "b"
                      },
                      "computed": false,
                      "shorthand": true,
                      "value": {
                        "type": "Identifier",
                        "start": 16600,
                        "end": 16601,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 10
                          },
                          "end": {
                            "line": 403,
                            "column": 11
                          },
                          "identifierName": "b"
                        },
                        "name": "b"
                      }
                    }
                  ]
                },
                "right": {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "ObjectProperty",
                      "start": 16608,
                      "end": 16616,
                      "loc": {
                        "start": {
                          "line": 403,
                          "column": 18
                        },
                        "end": {
                          "line": 403,
                          "column": 26
                        }
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 16608,
                        "end": 16609,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 18
                          },
                          "end": {
                            "line": 403,
                            "column": 19
                          },
                          "identifierName": "a"
                        },
                        "name": "a"
                      },
                      "computed": false,
                      "shorthand": false,
                      "value": {
                        "type": "StringLiteral",
                        "start": 16611,
                        "end": 16616,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 21
                          },
                          "end": {
                            "line": 403,
                            "column": 26
                          }
                        },
                        "extra": {
                          "rawValue": "baz",
                          "raw": "\"baz\""
                        },
                        "value": "baz"
                      }
                    },
                    {
                      "type": "ObjectProperty",
                      "start": 16618,
                      "end": 16624,
                      "loc": {
                        "start": {
                          "line": 403,
                          "column": 28
                        },
                        "end": {
                          "line": 403,
                          "column": 34
                        }
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 16618,
                        "end": 16619,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 28
                          },
                          "end": {
                            "line": 403,
                            "column": 29
                          },
                          "identifierName": "b"
                        },
                        "name": "b"
                      },
                      "computed": false,
                      "shorthand": false,
                      "value": {
                        "type": "NumericLiteral",
                        "start": 16621,
                        "end": 16624,
                        "loc": {
                          "start": {
                            "line": 403,
                            "column": 31
                          },
                          "end": {
                            "line": 403,
                            "column": 34
                          }
                        },
                        "extra": {
                          "rawValue": 101,
                          "raw": "101"
                        },
                        "value": 101
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Notice that we had to surround this statement with parentheses. JavaScript normally parses\r\n        a { as the start of block.\r\n        You can create a variable for the remaining items in an object using the syntax ...: ",
                  "start": 16634,
                  "end": 16860,
                  "loc": {
                    "start": {
                      "line": 404,
                      "column": 4
                    },
                    "end": {
                      "line": 406,
                      "column": 95
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ObjectPattern",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 16872,
                        "end": 16877,
                        "loc": {
                          "start": {
                            "line": 407,
                            "column": 10
                          },
                          "end": {
                            "line": 407,
                            "column": 15
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16872,
                          "end": 16873,
                          "loc": {
                            "start": {
                              "line": 407,
                              "column": 10
                            },
                            "end": {
                              "line": 407,
                              "column": 11
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "Identifier",
                          "start": 16876,
                          "end": 16877,
                          "loc": {
                            "start": {
                              "line": 407,
                              "column": 14
                            },
                            "end": {
                              "line": 407,
                              "column": 15
                            },
                            "identifierName": "n"
                          },
                          "name": "n"
                        }
                      },
                      {
                        "type": "RestElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "passthrough"
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "o"
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "total"
                  },
                  "init": {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "passthrough"
                      },
                      "computed": false,
                      "property": {
                        "type": "Identifier",
                        "name": "b"
                      }
                    },
                    "operator": "+",
                    "right": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "passthrough"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "c"
                        }
                      },
                      "computed": false,
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_Property_renaming"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Property renaming\r\n        You can also give different names to properties: ",
                  "start": 17139,
                  "end": 17229,
                  "loc": {
                    "start": {
                      "line": 418,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 59
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "o"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 17048,
                        "end": 17056,
                        "loc": {
                          "start": {
                            "line": 413,
                            "column": 16
                          },
                          "end": {
                            "line": 413,
                            "column": 24
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17048,
                          "end": 17049,
                          "loc": {
                            "start": {
                              "line": 413,
                              "column": 16
                            },
                            "end": {
                              "line": 413,
                              "column": 17
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 17051,
                          "end": 17056,
                          "loc": {
                            "start": {
                              "line": 413,
                              "column": 19
                            },
                            "end": {
                              "line": 413,
                              "column": 24
                            }
                          },
                          "extra": {
                            "rawValue": "foo",
                            "raw": "\"foo\""
                          },
                          "value": "foo"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 17075,
                        "end": 17080,
                        "loc": {
                          "start": {
                            "line": 414,
                            "column": 16
                          },
                          "end": {
                            "line": 414,
                            "column": 21
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17075,
                          "end": 17076,
                          "loc": {
                            "start": {
                              "line": 414,
                              "column": 16
                            },
                            "end": {
                              "line": 414,
                              "column": 17
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 17078,
                          "end": 17080,
                          "loc": {
                            "start": {
                              "line": 414,
                              "column": 19
                            },
                            "end": {
                              "line": 414,
                              "column": 21
                            }
                          },
                          "extra": {
                            "rawValue": 12,
                            "raw": "12"
                          },
                          "value": 12
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 17099,
                        "end": 17107,
                        "loc": {
                          "start": {
                            "line": 415,
                            "column": 16
                          },
                          "end": {
                            "line": 415,
                            "column": 24
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17099,
                          "end": 17100,
                          "loc": {
                            "start": {
                              "line": 415,
                              "column": 16
                            },
                            "end": {
                              "line": 415,
                              "column": 17
                            },
                            "identifierName": "c"
                          },
                          "name": "c"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 17102,
                          "end": 17107,
                          "loc": {
                            "start": {
                              "line": 415,
                              "column": 19
                            },
                            "end": {
                              "line": 415,
                              "column": 24
                            }
                          },
                          "extra": {
                            "rawValue": "bar",
                            "raw": "\"bar\""
                          },
                          "value": "bar"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Property renaming\r\n        You can also give different names to properties: ",
                  "start": 17139,
                  "end": 17229,
                  "loc": {
                    "start": {
                      "line": 418,
                      "column": 4
                    },
                    "end": {
                      "line": 420,
                      "column": 59
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Here the syntax starts to get confusing. You can read a: newName1 as “a as newName1”.\r\n            The direction is left-to-right, as if you had written: ",
                  "start": 17278,
                  "end": 17437,
                  "loc": {
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 423,
                      "column": 69
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ObjectPattern",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 17241,
                        "end": 17252,
                        "loc": {
                          "start": {
                            "line": 421,
                            "column": 10
                          },
                          "end": {
                            "line": 421,
                            "column": 21
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17241,
                          "end": 17242,
                          "loc": {
                            "start": {
                              "line": 421,
                              "column": 10
                            },
                            "end": {
                              "line": 421,
                              "column": 11
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "Identifier",
                          "start": 17244,
                          "end": 17252,
                          "loc": {
                            "start": {
                              "line": 421,
                              "column": 13
                            },
                            "end": {
                              "line": 421,
                              "column": 21
                            },
                            "identifierName": "newName1"
                          },
                          "name": "newName1"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 17254,
                        "end": 17265,
                        "loc": {
                          "start": {
                            "line": 421,
                            "column": 23
                          },
                          "end": {
                            "line": 421,
                            "column": 34
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17254,
                          "end": 17255,
                          "loc": {
                            "start": {
                              "line": 421,
                              "column": 23
                            },
                            "end": {
                              "line": 421,
                              "column": 24
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "Identifier",
                          "start": 17257,
                          "end": 17265,
                          "loc": {
                            "start": {
                              "line": 421,
                              "column": 26
                            },
                            "end": {
                              "line": 421,
                              "column": 34
                            },
                            "identifierName": "newName2"
                          },
                          "name": "newName2"
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "o"
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Here the syntax starts to get confusing. You can read a: newName1 as “a as newName1”.\r\n            The direction is left-to-right, as if you had written: ",
                  "start": 17278,
                  "end": 17437,
                  "loc": {
                    "start": {
                      "line": 422,
                      "column": 4
                    },
                    "end": {
                      "line": 423,
                      "column": 69
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "newName3"
                  },
                  "init": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "o"
                    },
                    "computed": false,
                    "property": {
                      "type": "Identifier",
                      "name": "a"
                    }
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Confusingly, the colon here does not indicate the type.\r\n        The type, if you specify it, still needs to be written after the entire destructuring: ",
                  "start": 17493,
                  "end": 17650,
                  "loc": {
                    "start": {
                      "line": 426,
                      "column": 4
                    },
                    "end": {
                      "line": 427,
                      "column": 97
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "newName4"
                  },
                  "init": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "o"
                    },
                    "computed": false,
                    "property": {
                      "type": "Identifier",
                      "name": "b"
                    }
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Confusingly, the colon here does not indicate the type.\r\n        The type, if you specify it, still needs to be written after the entire destructuring: ",
                  "start": 17493,
                  "end": 17650,
                  "loc": {
                    "start": {
                      "line": 426,
                      "column": 4
                    },
                    "end": {
                      "line": 427,
                      "column": 97
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Default values\r\n        Default values let you specify a default value in case a property is undefined: ",
                  "start": 17707,
                  "end": 17825,
                  "loc": {
                    "start": {
                      "line": 430,
                      "column": 4
                    },
                    "end": {
                      "line": 432,
                      "column": 90
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "ObjectPattern",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 17662,
                        "end": 17663,
                        "loc": {
                          "start": {
                            "line": 428,
                            "column": 10
                          },
                          "end": {
                            "line": 428,
                            "column": 11
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17662,
                          "end": 17663,
                          "loc": {
                            "start": {
                              "line": 428,
                              "column": 10
                            },
                            "end": {
                              "line": 428,
                              "column": 11
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "Identifier",
                          "start": 17662,
                          "end": 17663,
                          "loc": {
                            "start": {
                              "line": 428,
                              "column": 10
                            },
                            "end": {
                              "line": 428,
                              "column": 11
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 17665,
                        "end": 17666,
                        "loc": {
                          "start": {
                            "line": 428,
                            "column": 13
                          },
                          "end": {
                            "line": 428,
                            "column": 14
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 17665,
                          "end": 17666,
                          "loc": {
                            "start": {
                              "line": 428,
                              "column": 13
                            },
                            "end": {
                              "line": 428,
                              "column": 14
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "Identifier",
                          "start": 17665,
                          "end": 17666,
                          "loc": {
                            "start": {
                              "line": 428,
                              "column": 13
                            },
                            "end": {
                              "line": 428,
                              "column": 14
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeLiteral",
                        "members": [
                          {
                            "type": "TSPropertySignature",
                            "key": {
                              "type": "Identifier",
                              "name": "a"
                            },
                            "computed": false,
                            "typeAnnotation": {
                              "type": "TSTypeAnnotation",
                              "typeAnnotation": {
                                "type": "TSStringKeyword"
                              }
                            }
                          },
                          {
                            "type": "TSPropertySignature",
                            "key": {
                              "type": "Identifier",
                              "name": "b"
                            },
                            "computed": false,
                            "typeAnnotation": {
                              "type": "TSTypeAnnotation",
                              "typeAnnotation": {
                                "type": "TSNumberKeyword"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "o"
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Default values\r\n        Default values let you specify a default value in case a property is undefined: ",
                  "start": 17707,
                  "end": 17825,
                  "loc": {
                    "start": {
                      "line": 430,
                      "column": 4
                    },
                    "end": {
                      "line": 432,
                      "column": 90
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " keepWholeObject now has a variable for wholeObject as well as the properties a and b,\r\n            even if b is undefined.",
                  "start": 17954,
                  "end": 18081,
                  "loc": {
                    "start": {
                      "line": 436,
                      "column": 4
                    },
                    "end": {
                      "line": 437,
                      "column": 37
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "keepWholeObject"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "wholeObject",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeLiteral",
                      "members": [
                        {
                          "type": "TSPropertySignature",
                          "key": {
                            "type": "Identifier",
                            "name": "a"
                          },
                          "computed": false,
                          "typeAnnotation": {
                            "type": "TSTypeAnnotation",
                            "typeAnnotation": {
                              "type": "TSStringKeyword"
                            }
                          }
                        },
                        {
                          "type": "TSPropertySignature",
                          "key": {
                            "type": "Identifier",
                            "name": "b"
                          },
                          "computed": false,
                          "optional": true,
                          "typeAnnotation": {
                            "type": "TSTypeAnnotation",
                            "typeAnnotation": {
                              "type": "TSNumberKeyword"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "ObjectPattern",
                          "properties": [
                            {
                              "type": "ObjectProperty",
                              "start": 17913,
                              "end": 17914,
                              "loc": {
                                "start": {
                                  "line": 434,
                                  "column": 14
                                },
                                "end": {
                                  "line": 434,
                                  "column": 15
                                }
                              },
                              "extra": {
                                "shorthand": true
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 17913,
                                "end": 17914,
                                "loc": {
                                  "start": {
                                    "line": 434,
                                    "column": 14
                                  },
                                  "end": {
                                    "line": 434,
                                    "column": 15
                                  },
                                  "identifierName": "a"
                                },
                                "name": "a"
                              },
                              "computed": false,
                              "shorthand": true,
                              "value": {
                                "type": "Identifier",
                                "start": 17913,
                                "end": 17914,
                                "loc": {
                                  "start": {
                                    "line": 434,
                                    "column": 14
                                  },
                                  "end": {
                                    "line": 434,
                                    "column": 15
                                  },
                                  "identifierName": "a"
                                },
                                "name": "a"
                              }
                            },
                            {
                              "type": "ObjectProperty",
                              "start": 17916,
                              "end": 17924,
                              "loc": {
                                "start": {
                                  "line": 434,
                                  "column": 17
                                },
                                "end": {
                                  "line": 434,
                                  "column": 25
                                }
                              },
                              "extra": {
                                "shorthand": true
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 17916,
                                "end": 17917,
                                "loc": {
                                  "start": {
                                    "line": 434,
                                    "column": 17
                                  },
                                  "end": {
                                    "line": 434,
                                    "column": 18
                                  },
                                  "identifierName": "b"
                                },
                                "name": "b"
                              },
                              "computed": false,
                              "shorthand": true,
                              "value": {
                                "type": "AssignmentPattern",
                                "start": 17916,
                                "end": 17924,
                                "loc": {
                                  "start": {
                                    "line": 434,
                                    "column": 17
                                  },
                                  "end": {
                                    "line": 434,
                                    "column": 25
                                  }
                                },
                                "left": {
                                  "type": "Identifier",
                                  "start": 17916,
                                  "end": 17917,
                                  "loc": {
                                    "start": {
                                      "line": 434,
                                      "column": 17
                                    },
                                    "end": {
                                      "line": 434,
                                      "column": 18
                                    },
                                    "identifierName": "b"
                                  },
                                  "name": "b"
                                },
                                "right": {
                                  "type": "NumericLiteral",
                                  "start": 17920,
                                  "end": 17924,
                                  "loc": {
                                    "start": {
                                      "line": 434,
                                      "column": 21
                                    },
                                    "end": {
                                      "line": 434,
                                      "column": 25
                                    }
                                  },
                                  "extra": {
                                    "rawValue": 1001,
                                    "raw": "1001"
                                  },
                                  "value": 1001
                                }
                              }
                            }
                          ]
                        },
                        "init": {
                          "type": "Identifier",
                          "name": "wholeObject"
                        }
                      }
                    ],
                    "kind": "let"
                  }
                ],
                "directives": []
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Variables_Function_declarations"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSTypeAliasDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Function declarations\r\n        Destructuring also works in function declarations.\r\n        For simple cases this is straightforward: ",
                  "start": 18143,
                  "end": 18290,
                  "loc": {
                    "start": {
                      "line": 441,
                      "column": 4
                    },
                    "end": {
                      "line": 444,
                      "column": 52
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "C1"
              },
              "typeAnnotation": {
                "type": "TSTypeLiteral",
                "members": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "a"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "b"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " But specifying defaults is more common for parameters, and getting defaults right\r\n        with destructuring can be tricky.\r\n        First of all, you need to remember to put the pattern before the default value. ",
                  "start": 18399,
                  "end": 18618,
                  "loc": {
                    "start": {
                      "line": 449,
                      "column": 4
                    },
                    "end": {
                      "line": 451,
                      "column": 90
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f1"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "ObjectPattern",
                  "properties": [
                    {
                      "type": "ObjectProperty",
                      "start": 18351,
                      "end": 18352,
                      "loc": {
                        "start": {
                          "line": 446,
                          "column": 18
                        },
                        "end": {
                          "line": 446,
                          "column": 19
                        }
                      },
                      "extra": {
                        "shorthand": true
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 18351,
                        "end": 18352,
                        "loc": {
                          "start": {
                            "line": 446,
                            "column": 18
                          },
                          "end": {
                            "line": 446,
                            "column": 19
                          },
                          "identifierName": "a"
                        },
                        "name": "a"
                      },
                      "computed": false,
                      "shorthand": true,
                      "value": {
                        "type": "Identifier",
                        "start": 18351,
                        "end": 18352,
                        "loc": {
                          "start": {
                            "line": 446,
                            "column": 18
                          },
                          "end": {
                            "line": 446,
                            "column": 19
                          },
                          "identifierName": "a"
                        },
                        "name": "a"
                      }
                    },
                    {
                      "type": "ObjectProperty",
                      "start": 18354,
                      "end": 18355,
                      "loc": {
                        "start": {
                          "line": 446,
                          "column": 21
                        },
                        "end": {
                          "line": 446,
                          "column": 22
                        }
                      },
                      "extra": {
                        "shorthand": true
                      },
                      "method": false,
                      "key": {
                        "type": "Identifier",
                        "start": 18354,
                        "end": 18355,
                        "loc": {
                          "start": {
                            "line": 446,
                            "column": 21
                          },
                          "end": {
                            "line": 446,
                            "column": 22
                          },
                          "identifierName": "b"
                        },
                        "name": "b"
                      },
                      "computed": false,
                      "shorthand": true,
                      "value": {
                        "type": "Identifier",
                        "start": 18354,
                        "end": 18355,
                        "loc": {
                          "start": {
                            "line": 446,
                            "column": 21
                          },
                          "end": {
                            "line": 446,
                            "column": 22
                          },
                          "identifierName": "b"
                        },
                        "name": "b"
                      }
                    }
                  ],
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeReference",
                      "typeName": {
                        "type": "Identifier",
                        "name": "C1"
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSVoidKeyword"
                }
              },
              "body": {
                "type": "BlockStatement",
                "innerComments": [
                  {
                    "type": "CommentLine",
                    "value": " ..."
                  }
                ],
                "body": [],
                "directives": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " But specifying defaults is more common for parameters, and getting defaults right\r\n        with destructuring can be tricky.\r\n        First of all, you need to remember to put the pattern before the default value. ",
                  "start": 18399,
                  "end": 18618,
                  "loc": {
                    "start": {
                      "line": 449,
                      "column": 4
                    },
                    "end": {
                      "line": 451,
                      "column": 90
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f2"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "AssignmentPattern",
                  "left": {
                    "type": "ObjectPattern",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 18638,
                        "end": 18644,
                        "loc": {
                          "start": {
                            "line": 452,
                            "column": 18
                          },
                          "end": {
                            "line": 452,
                            "column": 24
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 18638,
                          "end": 18639,
                          "loc": {
                            "start": {
                              "line": 452,
                              "column": 18
                            },
                            "end": {
                              "line": 452,
                              "column": 19
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "AssignmentPattern",
                          "start": 18638,
                          "end": 18644,
                          "loc": {
                            "start": {
                              "line": 452,
                              "column": 18
                            },
                            "end": {
                              "line": 452,
                              "column": 24
                            }
                          },
                          "left": {
                            "type": "Identifier",
                            "start": 18638,
                            "end": 18639,
                            "loc": {
                              "start": {
                                "line": 452,
                                "column": 18
                              },
                              "end": {
                                "line": 452,
                                "column": 19
                              },
                              "identifierName": "a"
                            },
                            "name": "a"
                          },
                          "right": {
                            "type": "StringLiteral",
                            "start": 18642,
                            "end": 18644,
                            "loc": {
                              "start": {
                                "line": 452,
                                "column": 22
                              },
                              "end": {
                                "line": 452,
                                "column": 24
                              }
                            },
                            "extra": {
                              "rawValue": "",
                              "raw": "\"\""
                            },
                            "value": ""
                          }
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 18646,
                        "end": 18651,
                        "loc": {
                          "start": {
                            "line": 452,
                            "column": 26
                          },
                          "end": {
                            "line": 452,
                            "column": 31
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 18646,
                          "end": 18647,
                          "loc": {
                            "start": {
                              "line": 452,
                              "column": 26
                            },
                            "end": {
                              "line": 452,
                              "column": 27
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "AssignmentPattern",
                          "start": 18646,
                          "end": 18651,
                          "loc": {
                            "start": {
                              "line": 452,
                              "column": 26
                            },
                            "end": {
                              "line": 452,
                              "column": 31
                            }
                          },
                          "left": {
                            "type": "Identifier",
                            "start": 18646,
                            "end": 18647,
                            "loc": {
                              "start": {
                                "line": 452,
                                "column": 26
                              },
                              "end": {
                                "line": 452,
                                "column": 27
                              },
                              "identifierName": "b"
                            },
                            "name": "b"
                          },
                          "right": {
                            "type": "NumericLiteral",
                            "start": 18650,
                            "end": 18651,
                            "loc": {
                              "start": {
                                "line": 452,
                                "column": 30
                              },
                              "end": {
                                "line": 452,
                                "column": 31
                              }
                            },
                            "extra": {
                              "rawValue": 0,
                              "raw": "0"
                            },
                            "value": 0
                          }
                        }
                      }
                    ]
                  },
                  "right": {
                    "type": "ObjectExpression",
                    "properties": []
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSVoidKeyword"
                }
              },
              "body": {
                "type": "BlockStatement",
                "innerComments": [
                  {
                    "type": "CommentLine",
                    "value": " ..."
                  }
                ],
                "body": [],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The snippet above is an example of type inference, explained later in the handbook.\r\n        Then, you need to remember to give a default for optional properties on the destructured property\r\n        instead of the main initializer. Remember that C was defined with b optional:",
                  "start": 18709,
                  "end": 18991,
                  "loc": {
                    "start": {
                      "line": 457,
                      "column": 4
                    },
                    "end": {
                      "line": 459,
                      "column": 87
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f2"
                },
                "arguments": []
              }
            },
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The snippet above is an example of type inference, explained later in the handbook.\r\n        Then, you need to remember to give a default for optional properties on the destructured property\r\n        instead of the main initializer. Remember that C was defined with b optional:",
                  "start": 18709,
                  "end": 18991,
                  "loc": {
                    "start": {
                      "line": 457,
                      "column": 4
                    },
                    "end": {
                      "line": 459,
                      "column": 87
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "f3"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "AssignmentPattern",
                  "left": {
                    "type": "ObjectPattern",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 19011,
                        "end": 19012,
                        "loc": {
                          "start": {
                            "line": 460,
                            "column": 18
                          },
                          "end": {
                            "line": 460,
                            "column": 19
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 19011,
                          "end": 19012,
                          "loc": {
                            "start": {
                              "line": 460,
                              "column": 18
                            },
                            "end": {
                              "line": 460,
                              "column": 19
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "Identifier",
                          "start": 19011,
                          "end": 19012,
                          "loc": {
                            "start": {
                              "line": 460,
                              "column": 18
                            },
                            "end": {
                              "line": 460,
                              "column": 19
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 19014,
                        "end": 19019,
                        "loc": {
                          "start": {
                            "line": 460,
                            "column": 21
                          },
                          "end": {
                            "line": 460,
                            "column": 26
                          }
                        },
                        "extra": {
                          "shorthand": true
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 19014,
                          "end": 19015,
                          "loc": {
                            "start": {
                              "line": 460,
                              "column": 21
                            },
                            "end": {
                              "line": 460,
                              "column": 22
                            },
                            "identifierName": "b"
                          },
                          "name": "b"
                        },
                        "computed": false,
                        "shorthand": true,
                        "value": {
                          "type": "AssignmentPattern",
                          "start": 19014,
                          "end": 19019,
                          "loc": {
                            "start": {
                              "line": 460,
                              "column": 21
                            },
                            "end": {
                              "line": 460,
                              "column": 26
                            }
                          },
                          "left": {
                            "type": "Identifier",
                            "start": 19014,
                            "end": 19015,
                            "loc": {
                              "start": {
                                "line": 460,
                                "column": 21
                              },
                              "end": {
                                "line": 460,
                                "column": 22
                              },
                              "identifierName": "b"
                            },
                            "name": "b"
                          },
                          "right": {
                            "type": "NumericLiteral",
                            "start": 19018,
                            "end": 19019,
                            "loc": {
                              "start": {
                                "line": 460,
                                "column": 25
                              },
                              "end": {
                                "line": 460,
                                "column": 26
                              }
                            },
                            "extra": {
                              "rawValue": 0,
                              "raw": "0"
                            },
                            "value": 0
                          }
                        }
                      }
                    ]
                  },
                  "right": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 19026,
                        "end": 19031,
                        "loc": {
                          "start": {
                            "line": 460,
                            "column": 33
                          },
                          "end": {
                            "line": 460,
                            "column": 38
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 19026,
                          "end": 19027,
                          "loc": {
                            "start": {
                              "line": 460,
                              "column": 33
                            },
                            "end": {
                              "line": 460,
                              "column": 34
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 19029,
                          "end": 19031,
                          "loc": {
                            "start": {
                              "line": 460,
                              "column": 36
                            },
                            "end": {
                              "line": 460,
                              "column": 38
                            }
                          },
                          "extra": {
                            "rawValue": "",
                            "raw": "\"\""
                          },
                          "value": ""
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSVoidKeyword"
                }
              },
              "body": {
                "type": "BlockStatement",
                "innerComments": [
                  {
                    "type": "CommentLine",
                    "value": " ..."
                  }
                ],
                "body": [],
                "directives": []
              }
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " ok, default b = 0"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f3"
                },
                "arguments": [
                  {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 19076,
                        "end": 19084,
                        "loc": {
                          "start": {
                            "line": 463,
                            "column": 9
                          },
                          "end": {
                            "line": 463,
                            "column": 17
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 19076,
                          "end": 19077,
                          "loc": {
                            "start": {
                              "line": 463,
                              "column": 9
                            },
                            "end": {
                              "line": 463,
                              "column": 10
                            },
                            "identifierName": "a"
                          },
                          "name": "a"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 19079,
                          "end": 19084,
                          "loc": {
                            "start": {
                              "line": 463,
                              "column": 12
                            },
                            "end": {
                              "line": 463,
                              "column": 17
                            }
                          },
                          "extra": {
                            "rawValue": "yes",
                            "raw": "\"yes\""
                          },
                          "value": "yes"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " ok, default b = 0"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " ok, default to { a: \"\" }, which then defaults b = 0"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f3"
                },
                "arguments": []
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " ok, default to { a: \"\" }, which then defaults b = 0"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error, 'a' is required if you supply an argument"
                },
                {
                  "type": "CommentBlock",
                  "value": " Use destructuring with care.\r\n        As the previous example demonstrates, anything but the simplest destructuring expression is confusing.\r\n        This is especially true with deeply nested destructuring, which gets really hard to understand\r\n        even without piling on renaming, default values, and type annotations.\r\n        Try to keep destructuring expressions small and simple.\r\n        You can always write the assignments that destructuring would generate yourself.\r\n    /*\r\n        Spread\r\n        The spread operator is the opposite of destructuring.\r\n        It allows you to spread an array into another array, or an object into another object. For example:",
                  "start": 19246,
                  "end": 19926,
                  "loc": {
                    "start": {
                      "line": 466,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 109
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f3"
                },
                "arguments": [
                  {
                    "type": "ObjectExpression",
                    "properties": []
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error, 'a' is required if you supply an argument"
                },
                {
                  "type": "CommentBlock",
                  "value": " Use destructuring with care.\r\n        As the previous example demonstrates, anything but the simplest destructuring expression is confusing.\r\n        This is especially true with deeply nested destructuring, which gets really hard to understand\r\n        even without piling on renaming, default values, and type annotations.\r\n        Try to keep destructuring expressions small and simple.\r\n        You can always write the assignments that destructuring would generate yourself.\r\n    /*\r\n        Spread\r\n        The spread operator is the opposite of destructuring.\r\n        It allows you to spread an array into another array, or an object into another object. For example:",
                  "start": 19246,
                  "end": 19926,
                  "loc": {
                    "start": {
                      "line": 466,
                      "column": 4
                    },
                    "end": {
                      "line": 475,
                      "column": 109
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "first"
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "second"
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 3,
                          "raw": "3"
                        },
                        "value": 3
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 4,
                          "raw": "4"
                        },
                        "value": 4
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This gives bothPlus the value [0, 1, 2, 3, 4, 5]. Spreading creates a shallow copy of first and second.\r\n        They are not changed by the spread. ",
                  "start": 20032,
                  "end": 20186,
                  "loc": {
                    "start": {
                      "line": 479,
                      "column": 4
                    },
                    "end": {
                      "line": 480,
                      "column": 46
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " You can also spread objects: ",
                  "start": 20194,
                  "end": 20228,
                  "loc": {
                    "start": {
                      "line": 482,
                      "column": 4
                    },
                    "end": {
                      "line": 482,
                      "column": 38
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "bothPlus"
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 0,
                          "raw": "0"
                        },
                        "value": 0
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "first"
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "second"
                        }
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 5,
                          "raw": "5"
                        },
                        "value": 5
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " This gives bothPlus the value [0, 1, 2, 3, 4, 5]. Spreading creates a shallow copy of first and second.\r\n        They are not changed by the spread. ",
                  "start": 20032,
                  "end": 20186,
                  "loc": {
                    "start": {
                      "line": 479,
                      "column": 4
                    },
                    "end": {
                      "line": 480,
                      "column": 46
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " You can also spread objects: ",
                  "start": 20194,
                  "end": 20228,
                  "loc": {
                    "start": {
                      "line": 482,
                      "column": 4
                    },
                    "end": {
                      "line": 482,
                      "column": 38
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "defaults1"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 20252,
                        "end": 20265,
                        "loc": {
                          "start": {
                            "line": 483,
                            "column": 22
                          },
                          "end": {
                            "line": 483,
                            "column": 35
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20252,
                          "end": 20256,
                          "loc": {
                            "start": {
                              "line": 483,
                              "column": 22
                            },
                            "end": {
                              "line": 483,
                              "column": 26
                            },
                            "identifierName": "food"
                          },
                          "name": "food"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20258,
                          "end": 20265,
                          "loc": {
                            "start": {
                              "line": 483,
                              "column": 28
                            },
                            "end": {
                              "line": 483,
                              "column": 35
                            }
                          },
                          "extra": {
                            "rawValue": "spicy",
                            "raw": "\"spicy\""
                          },
                          "value": "spicy"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 20267,
                        "end": 20278,
                        "loc": {
                          "start": {
                            "line": 483,
                            "column": 37
                          },
                          "end": {
                            "line": 483,
                            "column": 48
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20267,
                          "end": 20272,
                          "loc": {
                            "start": {
                              "line": 483,
                              "column": 37
                            },
                            "end": {
                              "line": 483,
                              "column": 42
                            },
                            "identifierName": "price"
                          },
                          "name": "price"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20274,
                          "end": 20278,
                          "loc": {
                            "start": {
                              "line": 483,
                              "column": 44
                            },
                            "end": {
                              "line": 483,
                              "column": 48
                            }
                          },
                          "extra": {
                            "rawValue": "$$",
                            "raw": "\"$$\""
                          },
                          "value": "$$"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 20280,
                        "end": 20297,
                        "loc": {
                          "start": {
                            "line": 483,
                            "column": 50
                          },
                          "end": {
                            "line": 483,
                            "column": 67
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20280,
                          "end": 20288,
                          "loc": {
                            "start": {
                              "line": 483,
                              "column": 50
                            },
                            "end": {
                              "line": 483,
                              "column": 58
                            },
                            "identifierName": "ambiance"
                          },
                          "name": "ambiance"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20290,
                          "end": 20297,
                          "loc": {
                            "start": {
                              "line": 483,
                              "column": 60
                            },
                            "end": {
                              "line": 483,
                              "column": 67
                            }
                          },
                          "extra": {
                            "rawValue": "noisy",
                            "raw": "\"noisy\""
                          },
                          "value": "noisy"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Now search is { food: \"rich\", price: \"$$\", ambiance: \"noisy\" }.\r\n        Object spreading is more complex than array spreading.\r\n        Like array spreading, it proceeds from left-to-right, but the result is still an object.\r\n        This means that properties that come later in the spread object overwrite properties that come earlier.\r\n        So if we modify the previous example to spread at the end: ",
                  "start": 20357,
                  "end": 20769,
                  "loc": {
                    "start": {
                      "line": 485,
                      "column": 4
                    },
                    "end": {
                      "line": 489,
                      "column": 69
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "search1"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "defaults1"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 20336,
                        "end": 20348,
                        "loc": {
                          "start": {
                            "line": 484,
                            "column": 34
                          },
                          "end": {
                            "line": 484,
                            "column": 46
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20336,
                          "end": 20340,
                          "loc": {
                            "start": {
                              "line": 484,
                              "column": 34
                            },
                            "end": {
                              "line": 484,
                              "column": 38
                            },
                            "identifierName": "food"
                          },
                          "name": "food"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20342,
                          "end": 20348,
                          "loc": {
                            "start": {
                              "line": 484,
                              "column": 40
                            },
                            "end": {
                              "line": 484,
                              "column": 46
                            }
                          },
                          "extra": {
                            "rawValue": "rich",
                            "raw": "\"rich\""
                          },
                          "value": "rich"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Now search is { food: \"rich\", price: \"$$\", ambiance: \"noisy\" }.\r\n        Object spreading is more complex than array spreading.\r\n        Like array spreading, it proceeds from left-to-right, but the result is still an object.\r\n        This means that properties that come later in the spread object overwrite properties that come earlier.\r\n        So if we modify the previous example to spread at the end: ",
                  "start": 20357,
                  "end": 20769,
                  "loc": {
                    "start": {
                      "line": 485,
                      "column": 4
                    },
                    "end": {
                      "line": 489,
                      "column": 69
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "defaults2"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 20793,
                        "end": 20806,
                        "loc": {
                          "start": {
                            "line": 490,
                            "column": 22
                          },
                          "end": {
                            "line": 490,
                            "column": 35
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20793,
                          "end": 20797,
                          "loc": {
                            "start": {
                              "line": 490,
                              "column": 22
                            },
                            "end": {
                              "line": 490,
                              "column": 26
                            },
                            "identifierName": "food"
                          },
                          "name": "food"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20799,
                          "end": 20806,
                          "loc": {
                            "start": {
                              "line": 490,
                              "column": 28
                            },
                            "end": {
                              "line": 490,
                              "column": 35
                            }
                          },
                          "extra": {
                            "rawValue": "spicy",
                            "raw": "\"spicy\""
                          },
                          "value": "spicy"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 20808,
                        "end": 20819,
                        "loc": {
                          "start": {
                            "line": 490,
                            "column": 37
                          },
                          "end": {
                            "line": 490,
                            "column": 48
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20808,
                          "end": 20813,
                          "loc": {
                            "start": {
                              "line": 490,
                              "column": 37
                            },
                            "end": {
                              "line": 490,
                              "column": 42
                            },
                            "identifierName": "price"
                          },
                          "name": "price"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20815,
                          "end": 20819,
                          "loc": {
                            "start": {
                              "line": 490,
                              "column": 44
                            },
                            "end": {
                              "line": 490,
                              "column": 48
                            }
                          },
                          "extra": {
                            "rawValue": "$$",
                            "raw": "\"$$\""
                          },
                          "value": "$$"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 20821,
                        "end": 20838,
                        "loc": {
                          "start": {
                            "line": 490,
                            "column": 50
                          },
                          "end": {
                            "line": 490,
                            "column": 67
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20821,
                          "end": 20829,
                          "loc": {
                            "start": {
                              "line": 490,
                              "column": 50
                            },
                            "end": {
                              "line": 490,
                              "column": 58
                            },
                            "identifierName": "ambiance"
                          },
                          "name": "ambiance"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20831,
                          "end": 20838,
                          "loc": {
                            "start": {
                              "line": 490,
                              "column": 60
                            },
                            "end": {
                              "line": 490,
                              "column": 67
                            }
                          },
                          "extra": {
                            "rawValue": "noisy",
                            "raw": "\"noisy\""
                          },
                          "value": "noisy"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Then the food property in defaults overwrites food: \"rich\", which is not what we want in this case.\r\n        Object spread also has a couple of other surprising limits. First, it only includes an objects’ own,\r\n        enumerable properties. Basically, that means you lose methods when you spread instances of an object: ",
                  "start": 20900,
                  "end": 21226,
                  "loc": {
                    "start": {
                      "line": 493,
                      "column": 4
                    },
                    "end": {
                      "line": 495,
                      "column": 112
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "search2"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 20863,
                        "end": 20875,
                        "loc": {
                          "start": {
                            "line": 491,
                            "column": 20
                          },
                          "end": {
                            "line": 491,
                            "column": 32
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 20863,
                          "end": 20867,
                          "loc": {
                            "start": {
                              "line": 491,
                              "column": 20
                            },
                            "end": {
                              "line": 491,
                              "column": 24
                            },
                            "identifierName": "food"
                          },
                          "name": "food"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 20869,
                          "end": 20875,
                          "loc": {
                            "start": {
                              "line": 491,
                              "column": 26
                            },
                            "end": {
                              "line": 491,
                              "column": 32
                            }
                          },
                          "extra": {
                            "rawValue": "rich",
                            "raw": "\"rich\""
                          },
                          "value": "rich"
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "defaults2"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ClassDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Then the food property in defaults overwrites food: \"rich\", which is not what we want in this case.\r\n        Object spread also has a couple of other surprising limits. First, it only includes an objects’ own,\r\n        enumerable properties. Basically, that means you lose methods when you spread instances of an object: ",
                  "start": 20900,
                  "end": 21226,
                  "loc": {
                    "start": {
                      "line": 493,
                      "column": 4
                    },
                    "end": {
                      "line": 495,
                      "column": 112
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "C3"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "p"
                    },
                    "computed": false,
                    "value": {
                      "type": "NumericLiteral",
                      "extra": {
                        "rawValue": 12,
                        "raw": "12"
                      },
                      "value": 12
                    }
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "m"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "c"
                  },
                  "init": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "C3"
                    },
                    "arguments": []
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "clone"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "c"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " ok"
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "init": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "clone"
                    },
                    "computed": false,
                    "property": {
                      "type": "Identifier",
                      "name": "p"
                    }
                  }
                }
              ],
              "kind": "var"
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " ok"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                },
                {
                  "type": "CommentBlock",
                  "value": " Second, the Typescript compiler doesn’t allow spreads of type parameters from generic functions. \r\n        That feature is expected in future versions of the language. ",
                  "start": 21402,
                  "end": 21575,
                  "loc": {
                    "start": {
                      "line": 505,
                      "column": 4
                    },
                    "end": {
                      "line": 506,
                      "column": 71
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "clone"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "m"
                  }
                },
                "arguments": []
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Introduction"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "FunctionDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Introduction\r\n        One of TypeScript’s core principles is that type-checking focuses on the shape that values have.\r\n        This is sometimes called “duck typing” or “structural subtyping”.\r\n        In TypeScript, interfaces fill the role of naming these types, and are a powerful way of\r\n        defining contracts within your code as well as contracts with code outside of your project. ",
                  "start": 21626,
                  "end": 22033,
                  "loc": {
                    "start": {
                      "line": 509,
                      "column": 4
                    },
                    "end": {
                      "line": 514,
                      "column": 102
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " Our First Interface\r\n        The easiest way to see how interfaces work is to start with a simple example:",
                  "start": 22039,
                  "end": 22150,
                  "loc": {
                    "start": {
                      "line": 515,
                      "column": 4
                    },
                    "end": {
                      "line": 516,
                      "column": 87
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "printLabel"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "labelledObj",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeLiteral",
                      "members": [
                        {
                          "type": "TSPropertySignature",
                          "key": {
                            "type": "Identifier",
                            "name": "label"
                          },
                          "computed": false,
                          "typeAnnotation": {
                            "type": "TSTypeAnnotation",
                            "typeAnnotation": {
                              "type": "TSStringKeyword"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "console"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "log"
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "labelledObj"
                          },
                          "computed": false,
                          "property": {
                            "type": "Identifier",
                            "name": "label"
                          }
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "myObj"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 22277,
                        "end": 22285,
                        "loc": {
                          "start": {
                            "line": 520,
                            "column": 18
                          },
                          "end": {
                            "line": 520,
                            "column": 26
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 22277,
                          "end": 22281,
                          "loc": {
                            "start": {
                              "line": 520,
                              "column": 18
                            },
                            "end": {
                              "line": 520,
                              "column": 22
                            },
                            "identifierName": "size"
                          },
                          "name": "size"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 22283,
                          "end": 22285,
                          "loc": {
                            "start": {
                              "line": 520,
                              "column": 24
                            },
                            "end": {
                              "line": 520,
                              "column": 26
                            }
                          },
                          "extra": {
                            "rawValue": 10,
                            "raw": "10"
                          },
                          "value": 10
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 22287,
                        "end": 22310,
                        "loc": {
                          "start": {
                            "line": 520,
                            "column": 28
                          },
                          "end": {
                            "line": 520,
                            "column": 51
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 22287,
                          "end": 22292,
                          "loc": {
                            "start": {
                              "line": 520,
                              "column": 28
                            },
                            "end": {
                              "line": 520,
                              "column": 33
                            },
                            "identifierName": "label"
                          },
                          "name": "label"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 22294,
                          "end": 22310,
                          "loc": {
                            "start": {
                              "line": 520,
                              "column": 35
                            },
                            "end": {
                              "line": 520,
                              "column": 51
                            }
                          },
                          "extra": {
                            "rawValue": "Size 10 Object",
                            "raw": "\"Size 10 Object\""
                          },
                          "value": "Size 10 Object"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The type-checker checks the call to printLabel.\r\n        The printLabel function has a single parameter that requires that the object passed in\r\n        has a property called label of type string.\r\n        Notice that our object actually has more properties than this,\r\n        but the compiler only checks that at least the ones required are present and\r\n        match the types required.\r\n        There are some cases where TypeScript isn’t as lenient, which we’ll cover in a bit.\r\n        We can write the same example again, this time using an interface to describe the requirement\r\n        of having the label property that is a string: ",
                  "start": 22343,
                  "end": 22990,
                  "loc": {
                    "start": {
                      "line": 522,
                      "column": 4
                    },
                    "end": {
                      "line": 530,
                      "column": 57
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "printLabel"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "myObj"
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The type-checker checks the call to printLabel.\r\n        The printLabel function has a single parameter that requires that the object passed in\r\n        has a property called label of type string.\r\n        Notice that our object actually has more properties than this,\r\n        but the compiler only checks that at least the ones required are present and\r\n        match the types required.\r\n        There are some cases where TypeScript isn’t as lenient, which we’ll cover in a bit.\r\n        We can write the same example again, this time using an interface to describe the requirement\r\n        of having the label property that is a string: ",
                  "start": 22343,
                  "end": 22990,
                  "loc": {
                    "start": {
                      "line": 522,
                      "column": 4
                    },
                    "end": {
                      "line": 530,
                      "column": 57
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "LabelledValue"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "label"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "id": {
                "type": "Identifier",
                "name": "printLabel2"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "labelledObj",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeReference",
                      "typeName": {
                        "type": "Identifier",
                        "name": "LabelledValue"
                      }
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "console"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "log"
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "labelledObj"
                          },
                          "computed": false,
                          "property": {
                            "type": "Identifier",
                            "name": "label"
                          }
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "myObj2"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 23177,
                        "end": 23185,
                        "loc": {
                          "start": {
                            "line": 537,
                            "column": 19
                          },
                          "end": {
                            "line": 537,
                            "column": 27
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 23177,
                          "end": 23181,
                          "loc": {
                            "start": {
                              "line": 537,
                              "column": 19
                            },
                            "end": {
                              "line": 537,
                              "column": 23
                            },
                            "identifierName": "size"
                          },
                          "name": "size"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 23183,
                          "end": 23185,
                          "loc": {
                            "start": {
                              "line": 537,
                              "column": 25
                            },
                            "end": {
                              "line": 537,
                              "column": 27
                            }
                          },
                          "extra": {
                            "rawValue": 10,
                            "raw": "10"
                          },
                          "value": 10
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 23187,
                        "end": 23210,
                        "loc": {
                          "start": {
                            "line": 537,
                            "column": 29
                          },
                          "end": {
                            "line": 537,
                            "column": 52
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 23187,
                          "end": 23192,
                          "loc": {
                            "start": {
                              "line": 537,
                              "column": 29
                            },
                            "end": {
                              "line": 537,
                              "column": 34
                            },
                            "identifierName": "label"
                          },
                          "name": "label"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 23194,
                          "end": 23210,
                          "loc": {
                            "start": {
                              "line": 537,
                              "column": 36
                            },
                            "end": {
                              "line": 537,
                              "column": 52
                            }
                          },
                          "extra": {
                            "rawValue": "Size 10 Object",
                            "raw": "\"Size 10 Object\""
                          },
                          "value": "Size 10 Object"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The interface LabelledValue is a name we can now use to describe the requirement\r\n    in the previous example.\r\n    It still represents having a single property called label that is of type string.\r\n    Notice we didn’t have to explicitly say that the object we pass to printLabel implements\r\n    this interface like we might have to in other languages.\r\n    Here, it’s only the shape that matters.\r\n    If the object we pass to the function meets the requirements listed, then it’s allowed.\r\n    It’s worth pointing out that the type- checker does not require that these properties come in\r\n    any sort of order, only that the properties the interface requires are present and have the required type.",
                  "start": 23241,
                  "end": 23948,
                  "loc": {
                    "start": {
                      "line": 539,
                      "column": 0
                    },
                    "end": {
                      "line": 547,
                      "column": 112
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n    Optional Properties\r\n    Not all properties of an interface may be required.\r\n    Some exist under certain conditions or may not be there at all.\r\n    These optional properties are popular when creating patterns like “option bags” where you pass\r\n    an object to a function that only has a couple of properties filled in.\r\n\r\n    Here’s an example of this pattern:",
                  "start": 23952,
                  "end": 24326,
                  "loc": {
                    "start": {
                      "line": 549,
                      "column": 0
                    },
                    "end": {
                      "line": 556,
                      "column": 40
                    }
                  }
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "printLabel2"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "myObj2"
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " The interface LabelledValue is a name we can now use to describe the requirement\r\n    in the previous example.\r\n    It still represents having a single property called label that is of type string.\r\n    Notice we didn’t have to explicitly say that the object we pass to printLabel implements\r\n    this interface like we might have to in other languages.\r\n    Here, it’s only the shape that matters.\r\n    If the object we pass to the function meets the requirements listed, then it’s allowed.\r\n    It’s worth pointing out that the type- checker does not require that these properties come in\r\n    any sort of order, only that the properties the interface requires are present and have the required type.",
                  "start": 23241,
                  "end": 23948,
                  "loc": {
                    "start": {
                      "line": 539,
                      "column": 0
                    },
                    "end": {
                      "line": 547,
                      "column": 112
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": "\r\n    Optional Properties\r\n    Not all properties of an interface may be required.\r\n    Some exist under certain conditions or may not be there at all.\r\n    These optional properties are popular when creating patterns like “option bags” where you pass\r\n    an object to a function that only has a couple of properties filled in.\r\n\r\n    Here’s an example of this pattern:",
                  "start": 23952,
                  "end": 24326,
                  "loc": {
                    "start": {
                      "line": 549,
                      "column": 0
                    },
                    "end": {
                      "line": 556,
                      "column": 40
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "SquareConfig"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "color"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "width"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "id": {
                "type": "Identifier",
                "name": "createSquare"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "config",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeReference",
                      "typeName": {
                        "type": "Identifier",
                        "name": "SquareConfig"
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSTypeLiteral",
                  "members": [
                    {
                      "type": "TSPropertySignature",
                      "key": {
                        "type": "Identifier",
                        "name": "color"
                      },
                      "computed": false,
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    },
                    {
                      "type": "TSPropertySignature",
                      "key": {
                        "type": "Identifier",
                        "name": "area"
                      },
                      "computed": false,
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSNumberKeyword"
                        }
                      }
                    }
                  ]
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "newSquare"
                        },
                        "init": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "ObjectProperty",
                              "start": 24531,
                              "end": 24545,
                              "loc": {
                                "start": {
                                  "line": 563,
                                  "column": 26
                                },
                                "end": {
                                  "line": 563,
                                  "column": 40
                                }
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 24531,
                                "end": 24536,
                                "loc": {
                                  "start": {
                                    "line": 563,
                                    "column": 26
                                  },
                                  "end": {
                                    "line": 563,
                                    "column": 31
                                  },
                                  "identifierName": "color"
                                },
                                "name": "color"
                              },
                              "computed": false,
                              "shorthand": false,
                              "value": {
                                "type": "StringLiteral",
                                "start": 24538,
                                "end": 24545,
                                "loc": {
                                  "start": {
                                    "line": 563,
                                    "column": 33
                                  },
                                  "end": {
                                    "line": 563,
                                    "column": 40
                                  }
                                },
                                "extra": {
                                  "rawValue": "white",
                                  "raw": "\"white\""
                                },
                                "value": "white"
                              }
                            },
                            {
                              "type": "ObjectProperty",
                              "start": 24547,
                              "end": 24556,
                              "loc": {
                                "start": {
                                  "line": 563,
                                  "column": 42
                                },
                                "end": {
                                  "line": 563,
                                  "column": 51
                                }
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 24547,
                                "end": 24551,
                                "loc": {
                                  "start": {
                                    "line": 563,
                                    "column": 42
                                  },
                                  "end": {
                                    "line": 563,
                                    "column": 46
                                  },
                                  "identifierName": "area"
                                },
                                "name": "area"
                              },
                              "computed": false,
                              "shorthand": false,
                              "value": {
                                "type": "NumericLiteral",
                                "start": 24553,
                                "end": 24556,
                                "loc": {
                                  "start": {
                                    "line": 563,
                                    "column": 48
                                  },
                                  "end": {
                                    "line": 563,
                                    "column": 51
                                  }
                                },
                                "extra": {
                                  "rawValue": 100,
                                  "raw": "100"
                                },
                                "value": 100
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "config"
                      },
                      "computed": false,
                      "property": {
                        "type": "Identifier",
                        "name": "color"
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "newSquare"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "color"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "config"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "color"
                              }
                            }
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "config"
                      },
                      "computed": false,
                      "property": {
                        "type": "Identifier",
                        "name": "width"
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "newSquare"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "area"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "config"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "width"
                                }
                              },
                              "operator": "*",
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "config"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "width"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "newSquare"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Interfaces with optional properties are written similar to other interfaces,\r\n        with each optional property denoted by a ? at the end of the property name in the declaration.\r\n\r\n        The advantage of optional properties is that you can describe these possibly available properties\r\n        while still also preventing use of properties that are not part of the interface.\r\n        For example, had we mistyped the name of the color property in createSquare,\r\n        we would get an error message letting us know: ",
                  "start": 24837,
                  "end": 25365,
                  "loc": {
                    "start": {
                      "line": 573,
                      "column": 4
                    },
                    "end": {
                      "line": 579,
                      "column": 57
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySquare"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createSquare"
                    },
                    "arguments": [
                      {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "ObjectProperty",
                            "start": 24813,
                            "end": 24827,
                            "loc": {
                              "start": {
                                "line": 572,
                                "column": 34
                              },
                              "end": {
                                "line": 572,
                                "column": 48
                              }
                            },
                            "method": false,
                            "key": {
                              "type": "Identifier",
                              "start": 24813,
                              "end": 24818,
                              "loc": {
                                "start": {
                                  "line": 572,
                                  "column": 34
                                },
                                "end": {
                                  "line": 572,
                                  "column": 39
                                },
                                "identifierName": "color"
                              },
                              "name": "color"
                            },
                            "computed": false,
                            "shorthand": false,
                            "value": {
                              "type": "StringLiteral",
                              "start": 24820,
                              "end": 24827,
                              "loc": {
                                "start": {
                                  "line": 572,
                                  "column": 41
                                },
                                "end": {
                                  "line": 572,
                                  "column": 48
                                }
                              },
                              "extra": {
                                "rawValue": "black",
                                "raw": "\"black\""
                              },
                              "value": "black"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Interfaces with optional properties are written similar to other interfaces,\r\n        with each optional property denoted by a ? at the end of the property name in the declaration.\r\n\r\n        The advantage of optional properties is that you can describe these possibly available properties\r\n        while still also preventing use of properties that are not part of the interface.\r\n        For example, had we mistyped the name of the color property in createSquare,\r\n        we would get an error message letting us know: ",
                  "start": 24837,
                  "end": 25365,
                  "loc": {
                    "start": {
                      "line": 573,
                      "column": 4
                    },
                    "end": {
                      "line": 579,
                      "column": 57
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "SquareConfig2"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "color"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "width"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "id": {
                "type": "Identifier",
                "name": "createSquare2"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "config",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeReference",
                      "typeName": {
                        "type": "Identifier",
                        "name": "SquareConfig2"
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSTypeLiteral",
                  "members": [
                    {
                      "type": "TSPropertySignature",
                      "key": {
                        "type": "Identifier",
                        "name": "color"
                      },
                      "computed": false,
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    },
                    {
                      "type": "TSPropertySignature",
                      "key": {
                        "type": "Identifier",
                        "name": "area"
                      },
                      "computed": false,
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSNumberKeyword"
                        }
                      }
                    }
                  ]
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "newSquare"
                        },
                        "init": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "ObjectProperty",
                              "start": 25567,
                              "end": 25581,
                              "loc": {
                                "start": {
                                  "line": 585,
                                  "column": 26
                                },
                                "end": {
                                  "line": 585,
                                  "column": 40
                                }
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 25567,
                                "end": 25572,
                                "loc": {
                                  "start": {
                                    "line": 585,
                                    "column": 26
                                  },
                                  "end": {
                                    "line": 585,
                                    "column": 31
                                  },
                                  "identifierName": "color"
                                },
                                "name": "color"
                              },
                              "computed": false,
                              "shorthand": false,
                              "value": {
                                "type": "StringLiteral",
                                "start": 25574,
                                "end": 25581,
                                "loc": {
                                  "start": {
                                    "line": 585,
                                    "column": 33
                                  },
                                  "end": {
                                    "line": 585,
                                    "column": 40
                                  }
                                },
                                "extra": {
                                  "rawValue": "white",
                                  "raw": "\"white\""
                                },
                                "value": "white"
                              }
                            },
                            {
                              "type": "ObjectProperty",
                              "start": 25583,
                              "end": 25592,
                              "loc": {
                                "start": {
                                  "line": 585,
                                  "column": 42
                                },
                                "end": {
                                  "line": 585,
                                  "column": 51
                                }
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 25583,
                                "end": 25587,
                                "loc": {
                                  "start": {
                                    "line": 585,
                                    "column": 42
                                  },
                                  "end": {
                                    "line": 585,
                                    "column": 46
                                  },
                                  "identifierName": "area"
                                },
                                "name": "area"
                              },
                              "computed": false,
                              "shorthand": false,
                              "value": {
                                "type": "NumericLiteral",
                                "start": 25589,
                                "end": 25592,
                                "loc": {
                                  "start": {
                                    "line": 585,
                                    "column": 48
                                  },
                                  "end": {
                                    "line": 585,
                                    "column": 51
                                  }
                                },
                                "extra": {
                                  "rawValue": 100,
                                  "raw": "100"
                                },
                                "value": 100
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "config"
                      },
                      "computed": false,
                      "property": {
                        "type": "Identifier",
                        "name": "color"
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "leadingComments": [
                            {
                              "type": "CommentLine",
                              "value": " Error: Property 'clor' does not exist on type 'SquareConfig'"
                            }
                          ],
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "newSquare"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "color"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "config"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "color"
                              }
                            }
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "config"
                      },
                      "computed": false,
                      "property": {
                        "type": "Identifier",
                        "name": "width"
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "newSquare"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "area"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "config"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "width"
                                }
                              },
                              "operator": "*",
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "config"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "width"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "directives": []
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "newSquare"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySquare2"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createSquare2"
                    },
                    "arguments": [
                      {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "ObjectProperty",
                            "start": 25928,
                            "end": 25942,
                            "loc": {
                              "start": {
                                "line": 595,
                                "column": 36
                              },
                              "end": {
                                "line": 595,
                                "column": 50
                              }
                            },
                            "method": false,
                            "key": {
                              "type": "Identifier",
                              "start": 25928,
                              "end": 25933,
                              "loc": {
                                "start": {
                                  "line": 595,
                                  "column": 36
                                },
                                "end": {
                                  "line": 595,
                                  "column": 41
                                },
                                "identifierName": "color"
                              },
                              "name": "color"
                            },
                            "computed": false,
                            "shorthand": false,
                            "value": {
                              "type": "StringLiteral",
                              "start": 25935,
                              "end": 25942,
                              "loc": {
                                "start": {
                                  "line": 595,
                                  "column": 43
                                },
                                "end": {
                                  "line": 595,
                                  "column": 50
                                }
                              },
                              "extra": {
                                "rawValue": "black",
                                "raw": "\"black\""
                              },
                              "value": "black"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Readonly_properties"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Readonly properties\r\n        Some properties should only be modifiable when an object is first created.You can specify this\r\n        by putting readonly before the name of the property:\r\n    ",
                  "start": 26007,
                  "end": 26212,
                  "loc": {
                    "start": {
                      "line": 599,
                      "column": 4
                    },
                    "end": {
                      "line": 603,
                      "column": 6
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " You can construct a Point by assigning an object literal.After the assignment, x and y can’t be changed."
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Point"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "x"
                    },
                    "computed": false,
                    "readonly": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "y"
                    },
                    "computed": false,
                    "readonly": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " You can construct a Point by assigning an object literal.After the assignment, x and y can’t be changed."
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "p1",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Point"
                        }
                      }
                    }
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 26437,
                        "end": 26442,
                        "loc": {
                          "start": {
                            "line": 609,
                            "column": 22
                          },
                          "end": {
                            "line": 609,
                            "column": 27
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 26437,
                          "end": 26438,
                          "loc": {
                            "start": {
                              "line": 609,
                              "column": 22
                            },
                            "end": {
                              "line": 609,
                              "column": 23
                            },
                            "identifierName": "x"
                          },
                          "name": "x"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 26440,
                          "end": 26442,
                          "loc": {
                            "start": {
                              "line": 609,
                              "column": 25
                            },
                            "end": {
                              "line": 609,
                              "column": 27
                            }
                          },
                          "extra": {
                            "rawValue": 10,
                            "raw": "10"
                          },
                          "value": 10
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 26444,
                        "end": 26449,
                        "loc": {
                          "start": {
                            "line": 609,
                            "column": 29
                          },
                          "end": {
                            "line": 609,
                            "column": 34
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 26444,
                          "end": 26445,
                          "loc": {
                            "start": {
                              "line": 609,
                              "column": 29
                            },
                            "end": {
                              "line": 609,
                              "column": 30
                            },
                            "identifierName": "y"
                          },
                          "name": "y"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 26447,
                          "end": 26449,
                          "loc": {
                            "start": {
                              "line": 609,
                              "column": 32
                            },
                            "end": {
                              "line": 609,
                              "column": 34
                            }
                          },
                          "extra": {
                            "rawValue": 20,
                            "raw": "20"
                          },
                          "value": 20
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                },
                {
                  "type": "CommentLine",
                  "value": " TypeScript comes with a ReadonlyArray< T > type that is the same as Array<T> with all mutating "
                },
                {
                  "type": "CommentLine",
                  "value": " methods removed, so you can make sure you don’t change your arrays after creation:"
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "p1"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "x"
                  }
                },
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 5,
                    "raw": "5"
                  },
                  "value": 5
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                },
                {
                  "type": "CommentLine",
                  "value": " TypeScript comes with a ReadonlyArray< T > type that is the same as Array<T> with all mutating "
                },
                {
                  "type": "CommentLine",
                  "value": " methods removed, so you can make sure you don’t change your arrays after creation:"
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "a",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSArrayType",
                        "elementType": {
                          "type": "TSNumberKeyword"
                        }
                      }
                    }
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 1,
                          "raw": "1"
                        },
                        "value": 1
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 2,
                          "raw": "2"
                        },
                        "value": 2
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 3,
                          "raw": "3"
                        },
                        "value": 3
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 4,
                          "raw": "4"
                        },
                        "value": 4
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "ro",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "ReadonlyArray"
                        },
                        "typeParameters": {
                          "type": "TSTypeParameterInstantiation",
                          "params": [
                            {
                              "type": "TSNumberKeyword"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "a"
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "ro"
                  },
                  "computed": true,
                  "property": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 0,
                      "raw": "0"
                    },
                    "value": 0
                  }
                },
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 12,
                    "raw": "12"
                  },
                  "value": 12
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                }
              ],
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "ro"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "push"
                  }
                },
                "arguments": [
                  {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 5,
                      "raw": "5"
                    },
                    "value": 5
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "ro"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 100,
                    "raw": "100"
                  },
                  "value": 100
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                },
                {
                  "type": "CommentLine",
                  "value": " On the last line of the snippet you can see that even assigning the entire ReadonlyArray back to a "
                },
                {
                  "type": "CommentLine",
                  "value": " normal array is illegal.You can still override it with a type assertion, though:"
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "a"
                },
                "right": {
                  "type": "Identifier",
                  "name": "ro"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                },
                {
                  "type": "CommentLine",
                  "value": " On the last line of the snippet you can see that even assigning the entire ReadonlyArray back to a "
                },
                {
                  "type": "CommentLine",
                  "value": " normal array is illegal.You can still override it with a type assertion, though:"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        readonly vs const\r\n        The easiest way to remember whether to use readonly or const is to ask whether you’re using it\r\n        on a variable or a property. Variables use const whereas properties use readonly.\r\n    ",
                  "start": 27086,
                  "end": 27318,
                  "loc": {
                    "start": {
                      "line": 622,
                      "column": 4
                    },
                    "end": {
                      "line": 626,
                      "column": 6
                    }
                  }
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "a"
                },
                "right": {
                  "type": "TSAsExpression",
                  "expression": {
                    "type": "Identifier",
                    "name": "ro"
                  },
                  "typeAnnotation": {
                    "type": "TSArrayType",
                    "elementType": {
                      "type": "TSNumberKeyword"
                    }
                  }
                }
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Excess_Property_Checks"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Excess Property Checks\r\n        In our first example using interfaces, TypeScript lets us pass { size: number; label: string; }\r\n        to something that only expected a { label: string; }. We also just learned about optional properties,\r\n        and how they’re useful when describing so- called “option bags”.\r\n        However, combining the two naively would let you to shoot yourself in the foot the same way\r\n        you might in JavaScript.For example, taking our last example using createSquare:\r\n    ",
                  "start": 27380,
                  "end": 27903,
                  "loc": {
                    "start": {
                      "line": 629,
                      "column": 4
                    },
                    "end": {
                      "line": 636,
                      "column": 6
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "SquareConfig"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "color"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "width"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "id": {
                "type": "Identifier",
                "name": "createSquare"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "config",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeReference",
                      "typeName": {
                        "type": "Identifier",
                        "name": "SquareConfig"
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSTypeLiteral",
                  "members": [
                    {
                      "type": "TSPropertySignature",
                      "key": {
                        "type": "Identifier",
                        "name": "color"
                      },
                      "computed": false,
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    },
                    {
                      "type": "TSPropertySignature",
                      "key": {
                        "type": "Identifier",
                        "name": "area"
                      },
                      "computed": false,
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSNumberKeyword"
                        }
                      }
                    }
                  ]
                }
              },
              "body": {
                "type": "BlockStatement",
                "innerComments": [
                  {
                    "type": "CommentLine",
                    "value": " ..."
                  }
                ],
                "body": [],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n    Notice the given argument to createSquare is spelled colour instead of color.In plain JavaScript,\r\n    this sort of thing fails silently.\r\n    You could argue that this program is correctly typed, since the width properties are compatible,\r\n    there’s no color property present, and the extra colour property is insignificant.\r\n    However, TypeScript takes the stance that there’s probably a bug in this code.Object literals\r\n    get special treatment and undergo excess property checking when assigning them to other variables,\r\n    or passing them as arguments.If an object literal has any properties that the “target type” doesn’t have,\r\n    you’ll get an error.\r\n    ",
                  "start": 28172,
                  "end": 28855,
                  "loc": {
                    "start": {
                      "line": 647,
                      "column": 4
                    },
                    "end": {
                      "line": 656,
                      "column": 6
                    }
                  }
                },
                {
                  "type": "CommentLine",
                  "value": " error: 'colour' not expected in type 'SquareConfig'"
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySquare"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createSquare"
                    },
                    "arguments": [
                      {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "ObjectProperty",
                            "start": 28137,
                            "end": 28150,
                            "loc": {
                              "start": {
                                "line": 646,
                                "column": 34
                              },
                              "end": {
                                "line": 646,
                                "column": 47
                              }
                            },
                            "method": false,
                            "key": {
                              "type": "Identifier",
                              "start": 28137,
                              "end": 28143,
                              "loc": {
                                "start": {
                                  "line": 646,
                                  "column": 34
                                },
                                "end": {
                                  "line": 646,
                                  "column": 40
                                },
                                "identifierName": "colour"
                              },
                              "name": "colour"
                            },
                            "computed": false,
                            "shorthand": false,
                            "value": {
                              "type": "StringLiteral",
                              "start": 28145,
                              "end": 28150,
                              "loc": {
                                "start": {
                                  "line": 646,
                                  "column": 42
                                },
                                "end": {
                                  "line": 646,
                                  "column": 47
                                }
                              },
                              "extra": {
                                "rawValue": "red",
                                "raw": "\"red\""
                              },
                              "value": "red"
                            }
                          },
                          {
                            "type": "ObjectProperty",
                            "start": 28152,
                            "end": 28162,
                            "loc": {
                              "start": {
                                "line": 646,
                                "column": 49
                              },
                              "end": {
                                "line": 646,
                                "column": 59
                              }
                            },
                            "method": false,
                            "key": {
                              "type": "Identifier",
                              "start": 28152,
                              "end": 28157,
                              "loc": {
                                "start": {
                                  "line": 646,
                                  "column": 49
                                },
                                "end": {
                                  "line": 646,
                                  "column": 54
                                },
                                "identifierName": "width"
                              },
                              "name": "width"
                            },
                            "computed": false,
                            "shorthand": false,
                            "value": {
                              "type": "NumericLiteral",
                              "start": 28159,
                              "end": 28162,
                              "loc": {
                                "start": {
                                  "line": 646,
                                  "column": 56
                                },
                                "end": {
                                  "line": 646,
                                  "column": 59
                                }
                              },
                              "extra": {
                                "rawValue": 100,
                                "raw": "100"
                              },
                              "value": 100
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n    Notice the given argument to createSquare is spelled colour instead of color.In plain JavaScript,\r\n    this sort of thing fails silently.\r\n    You could argue that this program is correctly typed, since the width properties are compatible,\r\n    there’s no color property present, and the extra colour property is insignificant.\r\n    However, TypeScript takes the stance that there’s probably a bug in this code.Object literals\r\n    get special treatment and undergo excess property checking when assigning them to other variables,\r\n    or passing them as arguments.If an object literal has any properties that the “target type” doesn’t have,\r\n    you’ll get an error.\r\n    ",
                  "start": 28172,
                  "end": 28855,
                  "loc": {
                    "start": {
                      "line": 647,
                      "column": 4
                    },
                    "end": {
                      "line": 656,
                      "column": 6
                    }
                  }
                },
                {
                  "type": "CommentLine",
                  "value": " error: 'colour' not expected in type 'SquareConfig'"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Getting around these checks is actually really simple.The easiest method is to just use a type assertion:"
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySquare2"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createSquare"
                    },
                    "arguments": [
                      {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "ObjectProperty",
                            "start": 28952,
                            "end": 28965,
                            "loc": {
                              "start": {
                                "line": 658,
                                "column": 35
                              },
                              "end": {
                                "line": 658,
                                "column": 48
                              }
                            },
                            "method": false,
                            "key": {
                              "type": "Identifier",
                              "start": 28952,
                              "end": 28958,
                              "loc": {
                                "start": {
                                  "line": 658,
                                  "column": 35
                                },
                                "end": {
                                  "line": 658,
                                  "column": 41
                                },
                                "identifierName": "colour"
                              },
                              "name": "colour"
                            },
                            "computed": false,
                            "shorthand": false,
                            "value": {
                              "type": "StringLiteral",
                              "start": 28960,
                              "end": 28965,
                              "loc": {
                                "start": {
                                  "line": 658,
                                  "column": 43
                                },
                                "end": {
                                  "line": 658,
                                  "column": 48
                                }
                              },
                              "extra": {
                                "rawValue": "red",
                                "raw": "\"red\""
                              },
                              "value": "red"
                            }
                          },
                          {
                            "type": "ObjectProperty",
                            "start": 28967,
                            "end": 28977,
                            "loc": {
                              "start": {
                                "line": 658,
                                "column": 50
                              },
                              "end": {
                                "line": 658,
                                "column": 60
                              }
                            },
                            "method": false,
                            "key": {
                              "type": "Identifier",
                              "start": 28967,
                              "end": 28972,
                              "loc": {
                                "start": {
                                  "line": 658,
                                  "column": 50
                                },
                                "end": {
                                  "line": 658,
                                  "column": 55
                                },
                                "identifierName": "width"
                              },
                              "name": "width"
                            },
                            "computed": false,
                            "shorthand": false,
                            "value": {
                              "type": "NumericLiteral",
                              "start": 28974,
                              "end": 28977,
                              "loc": {
                                "start": {
                                  "line": 658,
                                  "column": 57
                                },
                                "end": {
                                  "line": 658,
                                  "column": 60
                                }
                              },
                              "extra": {
                                "rawValue": 100,
                                "raw": "100"
                              },
                              "value": 100
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Getting around these checks is actually really simple.The easiest method is to just use a type assertion:"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " However, a better approach might be to add a string index signature if you’re sure that "
                },
                {
                  "type": "CommentLine",
                  "value": " the object can have some extra properties that are used in some special way.If SquareConfig "
                },
                {
                  "type": "CommentLine",
                  "value": " can have color and width properties with the above types, but could also have any number "
                },
                {
                  "type": "CommentLine",
                  "value": " of other properties, then we could define it like so:"
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySquare3"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createSquare"
                    },
                    "arguments": [
                      {
                        "type": "TSAsExpression",
                        "expression": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "ObjectProperty",
                              "start": 29134,
                              "end": 29144,
                              "loc": {
                                "start": {
                                  "line": 661,
                                  "column": 35
                                },
                                "end": {
                                  "line": 661,
                                  "column": 45
                                }
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 29134,
                                "end": 29139,
                                "loc": {
                                  "start": {
                                    "line": 661,
                                    "column": 35
                                  },
                                  "end": {
                                    "line": 661,
                                    "column": 40
                                  },
                                  "identifierName": "width"
                                },
                                "name": "width"
                              },
                              "computed": false,
                              "shorthand": false,
                              "value": {
                                "type": "NumericLiteral",
                                "start": 29141,
                                "end": 29144,
                                "loc": {
                                  "start": {
                                    "line": 661,
                                    "column": 42
                                  },
                                  "end": {
                                    "line": 661,
                                    "column": 45
                                  }
                                },
                                "extra": {
                                  "rawValue": 100,
                                  "raw": "100"
                                },
                                "value": 100
                              }
                            },
                            {
                              "type": "ObjectProperty",
                              "start": 29146,
                              "end": 29158,
                              "loc": {
                                "start": {
                                  "line": 661,
                                  "column": 47
                                },
                                "end": {
                                  "line": 661,
                                  "column": 59
                                }
                              },
                              "method": false,
                              "key": {
                                "type": "Identifier",
                                "start": 29146,
                                "end": 29153,
                                "loc": {
                                  "start": {
                                    "line": 661,
                                    "column": 47
                                  },
                                  "end": {
                                    "line": 661,
                                    "column": 54
                                  },
                                  "identifierName": "opacity"
                                },
                                "name": "opacity"
                              },
                              "computed": false,
                              "shorthand": false,
                              "value": {
                                "type": "NumericLiteral",
                                "start": 29155,
                                "end": 29158,
                                "loc": {
                                  "start": {
                                    "line": 661,
                                    "column": 56
                                  },
                                  "end": {
                                    "line": 661,
                                    "column": 59
                                  }
                                },
                                "extra": {
                                  "rawValue": 0.5,
                                  "raw": "0.5"
                                },
                                "value": 0.5
                              }
                            }
                          ]
                        },
                        "typeAnnotation": {
                          "type": "TSTypeReference",
                          "typeName": {
                            "type": "Identifier",
                            "name": "SquareConfig"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " However, a better approach might be to add a string index signature if you’re sure that "
                },
                {
                  "type": "CommentLine",
                  "value": " the object can have some extra properties that are used in some special way.If SquareConfig "
                },
                {
                  "type": "CommentLine",
                  "value": " can have color and width properties with the above types, but could also have any number "
                },
                {
                  "type": "CommentLine",
                  "value": " of other properties, then we could define it like so:"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " We’ll discuss index signatures in a bit, but here we’re saying a SquareConfig can have any number of properties, and as long as they aren’t color or width, their types don’t matter."
                },
                {
                  "type": "CommentLine",
                  "value": " One final way to get around these checks, which might be a bit surprising, is to assign the object to another variable: Since squareOptions won’t undergo excess property checks, the compiler won’t give you an error."
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "SquareConfig"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "color"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "width"
                    },
                    "computed": false,
                    "optional": true,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSIndexSignature",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "propName",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSStringKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSAnyKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " We’ll discuss index signatures in a bit, but here we’re saying a SquareConfig can have any number of properties, and as long as they aren’t color or width, their types don’t matter."
                },
                {
                  "type": "CommentLine",
                  "value": " One final way to get around these checks, which might be a bit surprising, is to assign the object to another variable: Since squareOptions won’t undergo excess property checks, the compiler won’t give you an error."
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "squareOptions"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "ObjectProperty",
                        "start": 30105,
                        "end": 30118,
                        "loc": {
                          "start": {
                            "line": 674,
                            "column": 26
                          },
                          "end": {
                            "line": 674,
                            "column": 39
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 30105,
                          "end": 30111,
                          "loc": {
                            "start": {
                              "line": 674,
                              "column": 26
                            },
                            "end": {
                              "line": 674,
                              "column": 32
                            },
                            "identifierName": "colour"
                          },
                          "name": "colour"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "StringLiteral",
                          "start": 30113,
                          "end": 30118,
                          "loc": {
                            "start": {
                              "line": 674,
                              "column": 34
                            },
                            "end": {
                              "line": 674,
                              "column": 39
                            }
                          },
                          "extra": {
                            "rawValue": "red",
                            "raw": "\"red\""
                          },
                          "value": "red"
                        }
                      },
                      {
                        "type": "ObjectProperty",
                        "start": 30120,
                        "end": 30130,
                        "loc": {
                          "start": {
                            "line": 674,
                            "column": 41
                          },
                          "end": {
                            "line": 674,
                            "column": 51
                          }
                        },
                        "method": false,
                        "key": {
                          "type": "Identifier",
                          "start": 30120,
                          "end": 30125,
                          "loc": {
                            "start": {
                              "line": 674,
                              "column": 41
                            },
                            "end": {
                              "line": 674,
                              "column": 46
                            },
                            "identifierName": "width"
                          },
                          "name": "width"
                        },
                        "computed": false,
                        "shorthand": false,
                        "value": {
                          "type": "NumericLiteral",
                          "start": 30127,
                          "end": 30130,
                          "loc": {
                            "start": {
                              "line": 674,
                              "column": 48
                            },
                            "end": {
                              "line": 674,
                              "column": 51
                            }
                          },
                          "extra": {
                            "rawValue": 100,
                            "raw": "100"
                          },
                          "value": 100
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Keep in mind that for simple code like above, you probably shouldn’t be trying to “get around” these checks.\r\n        For more complex object literals that have methods and hold state, you might need to keep these techniques in mind,\r\n        but a majority of excess property errors are actually bugs.\r\n        That means if you’re running into excess property checking problems for something like option bags,\r\n        you might need to revise some of your type declarations.\r\n        In this instance, if it’s okay to pass an object with both a color or colour property to createSquare,\r\n        you should fix up the definition of SquareConfig to reflect that.",
                  "start": 30189,
                  "end": 30858,
                  "loc": {
                    "start": {
                      "line": 676,
                      "column": 4
                    },
                    "end": {
                      "line": 682,
                      "column": 75
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySquare4"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createSquare"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "squareOptions"
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Function_Types"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Function Types\r\n        Interfaces are capable of describing the wide range of shapes that JavaScript objects can take.\r\n        In addition to describing an object with properties, interfaces are also capable of describing\r\n        function types.\r\n        To describe a function type with an interface, we give the interface a call signature.\r\n        This is like a function declaration with only the parameter list and return type given.\r\n        Each parameter in the parameter list requires both name and type.\r\n    ",
                  "start": 30912,
                  "end": 31448,
                  "loc": {
                    "start": {
                      "line": 685,
                      "column": 4
                    },
                    "end": {
                      "line": 693,
                      "column": 6
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Once defined, we can use this function type interface like we would other interfaces."
                },
                {
                  "type": "CommentLine",
                  "value": " Here, we show how you can create a variable of a function type and assign it a function value"
                },
                {
                  "type": "CommentLine",
                  "value": " of the same type."
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "SearchFunc"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSCallSignatureDeclaration",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "source",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSStringKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "subString",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSStringKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSBooleanKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Once defined, we can use this function type interface like we would other interfaces."
                },
                {
                  "type": "CommentLine",
                  "value": " Here, we show how you can create a variable of a function type and assign it a function value"
                },
                {
                  "type": "CommentLine",
                  "value": " of the same type."
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySearch",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "SearchFunc"
                        }
                      }
                    }
                  },
                  "init": null
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " For function types to correctly type-check, the names of the parameters do not need to match. "
                },
                {
                  "type": "CommentLine",
                  "value": " We could have, for example, written the above example like this:"
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "mySearch"
                },
                "right": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "source",
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "subString",
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "source"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "search"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "subString"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "operator": ">",
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "prefix": true,
                            "argument": {
                              "type": "NumericLiteral",
                              "extra": {
                                "rawValue": 1,
                                "raw": "1"
                              },
                              "value": 1
                            }
                          }
                        }
                      }
                    ],
                    "directives": []
                  }
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " For function types to correctly type-check, the names of the parameters do not need to match. "
                },
                {
                  "type": "CommentLine",
                  "value": " We could have, for example, written the above example like this:"
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySearch2",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "SearchFunc"
                        }
                      }
                    }
                  },
                  "init": null
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Function parameters are checked one at a time, with the type in each corresponding parameter position"
                },
                {
                  "type": "CommentLine",
                  "value": " checked against each other.If you do not want to specify types at all, TypeScript’s contextual"
                },
                {
                  "type": "CommentLine",
                  "value": " typing can infer the argument types since the function value is assigned directly to a variable"
                },
                {
                  "type": "CommentLine",
                  "value": " of type SearchFunc. Here, also, the return type of our function expression is implied by the values "
                },
                {
                  "type": "CommentLine",
                  "value": " it returns (here false and true).Had the function expression returned numbers or strings, "
                },
                {
                  "type": "CommentLine",
                  "value": " the type- checker would have warned us that return type doesn’t match the return type described in "
                },
                {
                  "type": "CommentLine",
                  "value": " the SearchFunc interface."
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "mySearch2"
                },
                "right": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "src",
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "sub",
                      "typeAnnotation": {
                        "type": "TSTypeAnnotation",
                        "typeAnnotation": {
                          "type": "TSStringKeyword"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSBooleanKeyword"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "src"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "search"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "sub"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "operator": ">",
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "prefix": true,
                            "argument": {
                              "type": "NumericLiteral",
                              "extra": {
                                "rawValue": 1,
                                "raw": "1"
                              },
                              "value": 1
                            }
                          }
                        }
                      }
                    ],
                    "directives": []
                  }
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Function parameters are checked one at a time, with the type in each corresponding parameter position"
                },
                {
                  "type": "CommentLine",
                  "value": " checked against each other.If you do not want to specify types at all, TypeScript’s contextual"
                },
                {
                  "type": "CommentLine",
                  "value": " typing can infer the argument types since the function value is assigned directly to a variable"
                },
                {
                  "type": "CommentLine",
                  "value": " of type SearchFunc. Here, also, the return type of our function expression is implied by the values "
                },
                {
                  "type": "CommentLine",
                  "value": " it returns (here false and true).Had the function expression returned numbers or strings, "
                },
                {
                  "type": "CommentLine",
                  "value": " the type- checker would have warned us that return type doesn’t match the return type described in "
                },
                {
                  "type": "CommentLine",
                  "value": " the SearchFunc interface."
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "mySearch3",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "SearchFunc"
                        }
                      }
                    }
                  },
                  "init": null
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "mySearch3"
                },
                "right": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "src"
                    },
                    {
                      "type": "Identifier",
                      "name": "sub"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "src"
                                },
                                "computed": false,
                                "property": {
                                  "type": "Identifier",
                                  "name": "search"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "sub"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "operator": ">",
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "prefix": true,
                            "argument": {
                              "type": "NumericLiteral",
                              "extra": {
                                "rawValue": 1,
                                "raw": "1"
                              },
                              "value": 1
                            }
                          }
                        }
                      }
                    ],
                    "directives": []
                  }
                }
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Indexable_Types"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Indexable Types\r\n        Similarly to how we can use interfaces to describe function types,\r\n        we can also describe types that we can “index into” like a[10],\r\n        or ageMap[\"daniel\"].\r\n        Indexable types have an index signature that describes the types\r\n        we can use to index into the object, along with the corresponding\r\n        return types when indexing. Let’s take an example:\r\n    ",
                  "start": 33153,
                  "end": 33576,
                  "loc": {
                    "start": {
                      "line": 726,
                      "column": 4
                    },
                    "end": {
                      "line": 734,
                      "column": 6
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "StringArray"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSIndexSignature",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "index",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "myArray",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "StringArray"
                        }
                      }
                    }
                  },
                  "init": null
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "myArray"
                },
                "right": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "StringLiteral",
                      "extra": {
                        "rawValue": "Bob",
                        "raw": "\"Bob\""
                      },
                      "value": "Bob"
                    },
                    {
                      "type": "StringLiteral",
                      "extra": {
                        "rawValue": "Fred",
                        "raw": "\"Fred\""
                      },
                      "value": "Fred"
                    }
                  ]
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Above, we have a StringArray interface that has an index signature. "
                },
                {
                  "type": "CommentLine",
                  "value": " This index signature states that when a StringArray is indexed with a number, "
                },
                {
                  "type": "CommentLine",
                  "value": " it will return a string."
                },
                {
                  "type": "CommentBlock",
                  "value": " There are two types of supported index signatures: string and number. It is possible to support both types of indexers, \r\n        but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer.\r\n        This is because when indexing with a number, JavaScript will actually convert that to a string before indexing into an object.\r\n        That means that indexing with 100 (a number) is the same thing as indexing with \"100\" (a string), so the two need to be consistent. ",
                  "start": 33955,
                  "end": 34476,
                  "loc": {
                    "start": {
                      "line": 747,
                      "column": 4
                    },
                    "end": {
                      "line": 750,
                      "column": 142
                    }
                  }
                }
              ],
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "myStr",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "myArray"
                    },
                    "computed": true,
                    "property": {
                      "type": "NumericLiteral",
                      "extra": {
                        "rawValue": 0,
                        "raw": "0"
                      },
                      "value": 0
                    }
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ClassDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Above, we have a StringArray interface that has an index signature. "
                },
                {
                  "type": "CommentLine",
                  "value": " This index signature states that when a StringArray is indexed with a number, "
                },
                {
                  "type": "CommentLine",
                  "value": " it will return a string."
                },
                {
                  "type": "CommentBlock",
                  "value": " There are two types of supported index signatures: string and number. It is possible to support both types of indexers, \r\n        but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer.\r\n        This is because when indexing with a number, JavaScript will actually convert that to a string before indexing into an object.\r\n        That means that indexing with 100 (a number) is the same thing as indexing with \"100\" (a string), so the two need to be consistent. ",
                  "start": 33955,
                  "end": 34476,
                  "loc": {
                    "start": {
                      "line": 747,
                      "column": 4
                    },
                    "end": {
                      "line": 750,
                      "column": 142
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Animal"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "name"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    },
                    "value": null
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Error: indexing with a numeric string might get you a completely separate type of Animal!"
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Dog"
              },
              "superClass": {
                "type": "Identifier",
                "name": "Animal"
              },
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "breed"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    },
                    "value": null
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Error: indexing with a numeric string might get you a completely separate type of Animal!"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " While string index signatures are a powerful way to describe the “dictionary” pattern, "
                },
                {
                  "type": "CommentLine",
                  "value": " they also enforce that all properties match their return type."
                },
                {
                  "type": "CommentLine",
                  "value": " This is because a string index declares that obj.property is also available "
                },
                {
                  "type": "CommentLine",
                  "value": " as obj[\"property\"].In the following example, name’s type does not match the string index’s type, "
                },
                {
                  "type": "CommentLine",
                  "value": " and the type- checker gives an error:"
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "NotOkay"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSIndexSignature",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "x",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Animal"
                        }
                      }
                    }
                  },
                  {
                    "type": "TSIndexSignature",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "x",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSStringKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Dog"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " While string index signatures are a powerful way to describe the “dictionary” pattern, "
                },
                {
                  "type": "CommentLine",
                  "value": " they also enforce that all properties match their return type."
                },
                {
                  "type": "CommentLine",
                  "value": " This is because a string index declares that obj.property is also available "
                },
                {
                  "type": "CommentLine",
                  "value": " as obj[\"property\"].In the following example, name’s type does not match the string index’s type, "
                },
                {
                  "type": "CommentLine",
                  "value": " and the type- checker gives an error:"
                }
              ],
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Finally, you can make index signatures readonly"
                },
                {
                  "type": "CommentLine",
                  "value": " in order to prevent assignment to their indices:"
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "NumberDictionary"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSIndexSignature",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "index",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSStringKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "trailingComments": [
                      {
                        "type": "CommentLine",
                        "value": " ok, length is a number"
                      }
                    ],
                    "key": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "leadingComments": [
                      {
                        "type": "CommentLine",
                        "value": " ok, length is a number"
                      }
                    ],
                    "trailingComments": [
                      {
                        "type": "CommentLine",
                        "value": " error, the type of 'name' is not a subtype of the indexer"
                      }
                    ],
                    "key": {
                      "type": "Identifier",
                      "name": "name"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Finally, you can make index signatures readonly"
                },
                {
                  "type": "CommentLine",
                  "value": " in order to prevent assignment to their indices:"
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "ReadonlyStringArray"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSIndexSignature",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "index",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    },
                    "readonly": true
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "myArray2",
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "ReadonlyStringArray"
                        }
                      }
                    }
                  },
                  "init": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "StringLiteral",
                        "extra": {
                          "rawValue": "Alice",
                          "raw": "\"Alice\""
                        },
                        "value": "Alice"
                      },
                      {
                        "type": "StringLiteral",
                        "extra": {
                          "rawValue": "Bob",
                          "raw": "\"Bob\""
                        },
                        "value": "Bob"
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " error!"
                },
                {
                  "type": "CommentLine",
                  "value": " You can’t set myArray[2] because the index signature is readonly."
                }
              ],
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "myArray2"
                  },
                  "computed": true,
                  "property": {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 2,
                      "raw": "2"
                    },
                    "value": 2
                  }
                },
                "right": {
                  "type": "StringLiteral",
                  "extra": {
                    "rawValue": "Mallory",
                    "raw": "\"Mallory\""
                  },
                  "value": "Mallory"
                }
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Class_Types"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Class Types\r\n    ",
                  "start": 35828,
                  "end": 35859,
                  "loc": {
                    "start": {
                      "line": 785,
                      "column": 4
                    },
                    "end": {
                      "line": 787,
                      "column": 6
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "ClockInterface"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "currentTime"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Date"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "id": {
                "type": "Identifier",
                "name": "Clock"
              },
              "superClass": null,
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "ClockInterface"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "currentTime"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Date"
                        }
                      }
                    },
                    "value": null
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "constructor"
                    },
                    "computed": false,
                    "kind": "constructor",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "h",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "m",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "id": {
                "type": "Identifier",
                "name": "ClockInterface2"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "currentTime"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Date"
                        }
                      }
                    }
                  },
                  {
                    "type": "TSMethodSignature",
                    "key": {
                      "type": "Identifier",
                      "name": "setTime"
                    },
                    "computed": false,
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "d",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSTypeReference",
                            "typeName": {
                              "type": "Identifier",
                              "name": "Date"
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Difference between the static and instance sides of classes\r\n    ",
                  "start": 36361,
                  "end": 36440,
                  "loc": {
                    "start": {
                      "line": 808,
                      "column": 4
                    },
                    "end": {
                      "line": 810,
                      "column": 6
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " When working with classes and interfaces, it helps to keep in mind that a class has two types:\r\n        the type of the static side and the type of the instance side.\r\n        You may notice that if you create an interface with a construct signature and try\r\n        to create a class that implements this interface you get an error:\r\n        This is because when a class implements an interface, only the instance side of the class is checked.\r\n        Since the constructor sits in the static side, it is not included in this check. ",
                  "start": 36446,
                  "end": 36986,
                  "loc": {
                    "start": {
                      "line": 811,
                      "column": 4
                    },
                    "end": {
                      "line": 816,
                      "column": 91
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Clock2"
              },
              "superClass": null,
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "ClockInterface2"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "currentTime"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Date"
                        }
                      }
                    },
                    "value": null
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "setTime"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "d",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSTypeReference",
                            "typeName": {
                              "type": "Identifier",
                              "name": "Date"
                            }
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "ThisExpression"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "currentTime"
                              }
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "d"
                            }
                          }
                        }
                      ],
                      "directives": []
                    }
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "constructor"
                    },
                    "computed": false,
                    "kind": "constructor",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "h",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "m",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Difference between the static and instance sides of classes\r\n    ",
                  "start": 36361,
                  "end": 36440,
                  "loc": {
                    "start": {
                      "line": 808,
                      "column": 4
                    },
                    "end": {
                      "line": 810,
                      "column": 6
                    }
                  }
                },
                {
                  "type": "CommentBlock",
                  "value": " When working with classes and interfaces, it helps to keep in mind that a class has two types:\r\n        the type of the static side and the type of the instance side.\r\n        You may notice that if you create an interface with a construct signature and try\r\n        to create a class that implements this interface you get an error:\r\n        This is because when a class implements an interface, only the instance side of the class is checked.\r\n        Since the constructor sits in the static side, it is not included in this check. ",
                  "start": 36446,
                  "end": 36986,
                  "loc": {
                    "start": {
                      "line": 811,
                      "column": 4
                    },
                    "end": {
                      "line": 816,
                      "column": 91
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "ClockConstructor"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSConstructSignatureDeclaration",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "hour",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "minute",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "trailingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Instead, you would need to work with the static side of the class directly.\r\n        In this example, we define two interfaces, ClockConstructor for the constructor\r\n        and ClockInterface for the instance methods.\r\n        Then for convenience we define a constructor function createClock that creates\r\n        instances of the type that is passed to it.\r\n        Because createClock’s first parameter is of type ClockConstructor, in createClock(AnalogClock, 7, 32),\r\n        it checks that AnalogClock has the correct constructor signature.",
                  "start": 37210,
                  "end": 37761,
                  "loc": {
                    "start": {
                      "line": 825,
                      "column": 4
                    },
                    "end": {
                      "line": 831,
                      "column": 75
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Clock3"
              },
              "superClass": null,
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "ClockConstructor"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "currentTime"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "Date"
                        }
                      }
                    },
                    "value": null
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "constructor"
                    },
                    "computed": false,
                    "kind": "constructor",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "h",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "m",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": " Instead, you would need to work with the static side of the class directly.\r\n        In this example, we define two interfaces, ClockConstructor for the constructor\r\n        and ClockInterface for the instance methods.\r\n        Then for convenience we define a constructor function createClock that creates\r\n        instances of the type that is passed to it.\r\n        Because createClock’s first parameter is of type ClockConstructor, in createClock(AnalogClock, 7, 32),\r\n        it checks that AnalogClock has the correct constructor signature.",
                  "start": 37210,
                  "end": 37761,
                  "loc": {
                    "start": {
                      "line": 825,
                      "column": 4
                    },
                    "end": {
                      "line": 831,
                      "column": 75
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "ClockConstructor"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSConstructSignatureDeclaration",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "hour",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "minute",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSTypeReference",
                        "typeName": {
                          "type": "Identifier",
                          "name": "ClockInterface"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "id": {
                "type": "Identifier",
                "name": "ClockInterface3"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSMethodSignature",
                    "key": {
                      "type": "Identifier",
                      "name": "tick"
                    },
                    "computed": false,
                    "parameters": []
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "id": {
                "type": "Identifier",
                "name": "createClock"
              },
              "generator": false,
              "async": false,
              "params": [
                {
                  "type": "Identifier",
                  "name": "ctor",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSTypeReference",
                      "typeName": {
                        "type": "Identifier",
                        "name": "ClockConstructor"
                      }
                    }
                  }
                },
                {
                  "type": "Identifier",
                  "name": "hour",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSNumberKeyword"
                    }
                  }
                },
                {
                  "type": "Identifier",
                  "name": "minute",
                  "typeAnnotation": {
                    "type": "TSTypeAnnotation",
                    "typeAnnotation": {
                      "type": "TSNumberKeyword"
                    }
                  }
                }
              ],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSTypeReference",
                  "typeName": {
                    "type": "Identifier",
                    "name": "ClockInterface"
                  }
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ctor"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "hour"
                        },
                        {
                          "type": "Identifier",
                          "name": "minute"
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "ClassDeclaration",
              "id": {
                "type": "Identifier",
                "name": "DigitalClock"
              },
              "superClass": null,
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "ClockInterface3"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "constructor"
                    },
                    "computed": false,
                    "kind": "constructor",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "h",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "m",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "tick"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "console"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "log"
                              }
                            },
                            "arguments": [
                              {
                                "type": "StringLiteral",
                                "extra": {
                                  "rawValue": "beep beep",
                                  "raw": "\"beep beep\""
                                },
                                "value": "beep beep"
                              }
                            ]
                          }
                        }
                      ],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "id": {
                "type": "Identifier",
                "name": "AnalogClock"
              },
              "superClass": null,
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "ClockInterface3"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "constructor"
                    },
                    "computed": false,
                    "kind": "constructor",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "h",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "m",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  },
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "tick"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "console"
                              },
                              "computed": false,
                              "property": {
                                "type": "Identifier",
                                "name": "log"
                              }
                            },
                            "arguments": [
                              {
                                "type": "StringLiteral",
                                "extra": {
                                  "rawValue": "tick tock",
                                  "raw": "\"tick tock\""
                                },
                                "value": "tick tock"
                              }
                            ]
                          }
                        }
                      ],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "digital"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createClock"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "DigitalClock"
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 12,
                          "raw": "12"
                        },
                        "value": 12
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 17,
                          "raw": "17"
                        },
                        "value": 17
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "analog"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createClock"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "AnalogClock"
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 7,
                          "raw": "7"
                        },
                        "value": 7
                      },
                      {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 32,
                          "raw": "32"
                        },
                        "value": 32
                      }
                    ]
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Extending_Interfaces"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "innerComments": [
            {
              "type": "CommentBlock",
              "value": "\r\n        Extending Interfaces\r\n    \r\n    interface Shape {\r\n        color: string;\r\n    }\r\n    interface Square extends Shape {\r\n        sideLength: number;\r\n    }\r\n    let square = <Square>{};\r\n    square.color = \"blue\";\r\n    square.sideLength = 10;\r\n\r\n    interface PenStroke {\r\n        // penWidth: number;\r\n    }\r\n\r\n    interface Square2 extends Shape, PenStroke {\r\n        // sideLength: number;\r\n    }\r\n\r\n    let square2 = <Square2>{};\r\n    square2.color = \"blue\";\r\n    // square2.sideLength = 10;\r\n    // square2.penWidth = 5.0;\r\n    ",
              "start": 38585,
              "end": 39131,
              "loc": {
                "start": {
                  "line": 860,
                  "column": 4
                },
                "end": {
                  "line": 885,
                  "column": 6
                }
              }
            }
          ],
          "body": [],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Hybrid_Types"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "TSInterfaceDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Hybrid Types\r\n    ",
                  "start": 39185,
                  "end": 39217,
                  "loc": {
                    "start": {
                      "line": 889,
                      "column": 4
                    },
                    "end": {
                      "line": 891,
                      "column": 6
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Counter"
              },
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSCallSignatureDeclaration",
                    "parameters": [
                      {
                        "type": "Identifier",
                        "name": "start",
                        "typeAnnotation": {
                          "type": "TSTypeAnnotation",
                          "typeAnnotation": {
                            "type": "TSNumberKeyword"
                          }
                        }
                      }
                    ],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSStringKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSPropertySignature",
                    "key": {
                      "type": "Identifier",
                      "name": "interval"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSNumberKeyword"
                      }
                    }
                  },
                  {
                    "type": "TSMethodSignature",
                    "key": {
                      "type": "Identifier",
                      "name": "reset"
                    },
                    "computed": false,
                    "parameters": [],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSVoidKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "FunctionDeclaration",
              "id": {
                "type": "Identifier",
                "name": "getCounter"
              },
              "generator": false,
              "async": false,
              "params": [],
              "returnType": {
                "type": "TSTypeAnnotation",
                "typeAnnotation": {
                  "type": "TSTypeReference",
                  "typeName": {
                    "type": "Identifier",
                    "name": "Counter"
                  }
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "counter"
                        },
                        "init": {
                          "type": "TSAsExpression",
                          "expression": {
                            "type": "FunctionExpression",
                            "id": null,
                            "generator": false,
                            "async": false,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "start",
                                "typeAnnotation": {
                                  "type": "TSTypeAnnotation",
                                  "typeAnnotation": {
                                    "type": "TSNumberKeyword"
                                  }
                                }
                              }
                            ],
                            "body": {
                              "type": "BlockStatement",
                              "body": [],
                              "directives": []
                            }
                          },
                          "typeAnnotation": {
                            "type": "TSTypeReference",
                            "typeName": {
                              "type": "Identifier",
                              "name": "Counter"
                            }
                          }
                        }
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "counter"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "interval"
                        }
                      },
                      "right": {
                        "type": "NumericLiteral",
                        "extra": {
                          "rawValue": 123,
                          "raw": "123"
                        },
                        "value": 123
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "counter"
                        },
                        "computed": false,
                        "property": {
                          "type": "Identifier",
                          "name": "reset"
                        }
                      },
                      "right": {
                        "type": "FunctionExpression",
                        "id": null,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [],
                          "directives": []
                        }
                      }
                    }
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Identifier",
                      "name": "counter"
                    }
                  }
                ],
                "directives": []
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "c"
                  },
                  "init": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "getCounter"
                    },
                    "arguments": []
                  }
                }
              ],
              "kind": "let"
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "c"
                },
                "arguments": [
                  {
                    "type": "NumericLiteral",
                    "extra": {
                      "rawValue": 10,
                      "raw": "10"
                    },
                    "value": 10
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "c"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "reset"
                  }
                },
                "arguments": []
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "c"
                  },
                  "computed": false,
                  "property": {
                    "type": "Identifier",
                    "name": "interval"
                  }
                },
                "right": {
                  "type": "NumericLiteral",
                  "extra": {
                    "rawValue": 5,
                    "raw": "5.0"
                  },
                  "value": 5
                }
              }
            }
          ],
          "directives": []
        }
      },
      {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "docs_Interfaces_Extending_Classes"
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ClassDeclaration",
              "leadingComments": [
                {
                  "type": "CommentBlock",
                  "value": "\r\n        Interfaces Extending Classes\r\n    ",
                  "start": 39682,
                  "end": 39730,
                  "loc": {
                    "start": {
                      "line": 911,
                      "column": 4
                    },
                    "end": {
                      "line": 913,
                      "column": 6
                    }
                  }
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Control"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassProperty",
                    "accessibility": "private",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "state"
                    },
                    "computed": false,
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSAnyKeyword"
                      }
                    },
                    "value": null
                  }
                ]
              }
            },
            {
              "type": "TSInterfaceDeclaration",
              "id": {
                "type": "Identifier",
                "name": "SelectableControl"
              },
              "extends": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "Control"
                  }
                }
              ],
              "body": {
                "type": "TSInterfaceBody",
                "body": [
                  {
                    "type": "TSMethodSignature",
                    "key": {
                      "type": "Identifier",
                      "name": "select"
                    },
                    "computed": false,
                    "parameters": [],
                    "typeAnnotation": {
                      "type": "TSTypeAnnotation",
                      "typeAnnotation": {
                        "type": "TSVoidKeyword"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "id": {
                "type": "Identifier",
                "name": "Button"
              },
              "superClass": {
                "type": "Identifier",
                "name": "Control"
              },
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "SelectableControl"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "select"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "trailingComments": [
                {
                  "type": "CommentLine",
                  "value": " Error: Property 'state' is missing in type 'Image'."
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "TextBox"
              },
              "superClass": {
                "type": "Identifier",
                "name": "Control"
              },
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "select"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "leadingComments": [
                {
                  "type": "CommentLine",
                  "value": " Error: Property 'state' is missing in type 'Image'."
                }
              ],
              "id": {
                "type": "Identifier",
                "name": "Image"
              },
              "superClass": null,
              "implements": [
                {
                  "type": "TSExpressionWithTypeArguments",
                  "expression": {
                    "type": "Identifier",
                    "name": "SelectableControl"
                  }
                }
              ],
              "body": {
                "type": "ClassBody",
                "body": [
                  {
                    "type": "ClassMethod",
                    "static": false,
                    "key": {
                      "type": "Identifier",
                      "name": "select"
                    },
                    "computed": false,
                    "kind": "method",
                    "id": null,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "directives": []
                    }
                  }
                ]
              }
            },
            {
              "type": "ClassDeclaration",
              "id": {
                "type": "Identifier",
                "name": "Location"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "body": []
              }
            }
          ],
          "directives": []
        }
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "\r\n        Variable Declarations\r\n        let and const are two relatively new types of variable declarations in JavaScript.\r\n        As we mentioned earlier, let is similar to var in some respects, but allows users to avoid\r\n        some of the common “gotchas” that users run into in JavaScript.\r\n        const is an augmentation of let in that it prevents re-assignment to a variable.\r\n        With TypeScript being a superset of JavaScript, the language naturally supports let and const.\r\n        Here we’ll elaborate more on these new declarations and why they’re preferable to var.\r\n\r\n        If you’ve used JavaScript offhandedly, the next section might be a good way to refresh your memory.\r\n        If you’re intimately familiar with all the quirks of var declarations in JavaScript,\r\n        you might find it easier to skip ahead.",
      "start": 33,
      "end": 877,
      "loc": {
        "start": {
          "line": 2,
          "column": 4
        },
        "end": {
          "line": 13,
          "column": 49
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        var declarations\r\n        Declaring a variable in JavaScript has always traditionally been done with the var keyword. ",
      "start": 885,
      "end": 1017,
      "loc": {
        "start": {
          "line": 15,
          "column": 4
        },
        "end": {
          "line": 17,
          "column": 102
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " As you might’ve figured out, we just declared a variable named a with the value 10.",
      "start": 1040,
      "end": 1128,
      "loc": {
        "start": {
          "line": 19,
          "column": 4
        },
        "end": {
          "line": 19,
          "column": 92
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " We can also declare a variable inside of a function:",
      "start": 1136,
      "end": 1193,
      "loc": {
        "start": {
          "line": 21,
          "column": 4
        },
        "end": {
          "line": 21,
          "column": 61
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " and we can also access those same variables within other functions: ",
      "start": 1303,
      "end": 1376,
      "loc": {
        "start": {
          "line": 27,
          "column": 4
        },
        "end": {
          "line": 27,
          "column": 77
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " returns '11'"
    },
    {
      "type": "CommentBlock",
      "value": " In this above example, g captured the variable a declared in f.\r\n        At any point that g gets called, the value of a will be tied to the value of a in f.\r\n        Even if g is called once f is done running, it will be able to access and modify a. ",
      "start": 1580,
      "end": 1836,
      "loc": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 94
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " returns '2'"
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Scoping rules\r\n        var declarations have some odd scoping rules for those used to other languages.\r\n        Take the following example:",
      "start": 2125,
      "end": 2278,
      "loc": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 37
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " returns '10'"
    },
    {
      "type": "CommentLine",
      "value": " returns 'undefined'"
    },
    {
      "type": "CommentBlock",
      "value": " Some readers might do a double-take at this example.\r\n        The variable x was declared within the if block, and yet we were able to access it\r\n        from outside that block.\r\n        That’s because var declarations are accessible anywhere within their containing function,\r\n        module, namespace, or global scope - all which we’ll go over later on - regardless of the containing\r\n        block.\r\n        Some people call this var-scoping or function-scoping.\r\n        Parameters are also function scoped.\r\n        These scoping rules can cause several types of mistakes.\r\n        One problem they exacerbate is the fact that it is not an error to declare the same variable multiple times: ",
      "start": 2495,
      "end": 3198,
      "loc": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 119
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Maybe it was easy to spot out for some, but the inner for-loop will accidentally overwrite\r\n    the variable i because i refers to the same function-scoped variable.\r\n    As experienced developers know by now, similar sorts of bugs slip through code reviews\r\n    and can be an endless source of frustration. ",
      "start": 3515,
      "end": 3828,
      "loc": {
        "start": {
          "line": 94,
          "column": 0
        },
        "end": {
          "line": 97,
          "column": 51
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Variable capturing quirks\r\n        Take a quick second to guess what the output of the following snippet is: ",
      "start": 3880,
      "end": 4003,
      "loc": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 84
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " For those unfamiliar, setTimeout will try to execute a function after a certain number of milliseconds\r\n        (though waiting for anything else to stop running).\r\n        Ready? Take a look:\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    10\r\n    Many JavaScript developers are intimately familiar with this behavior, but if you’re surprised,\r\n    you’re certainly not alone. Most people expect the output to be\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9\r\n    Remember what we mentioned earlier about variable capturing? Every function expression we pass to setTimeout actually refers to the same i from the same scope.\r\n    Let’s take a minute to consider what that means.\r\n    setTimeout will run a function after some number of milliseconds, but only after the for loop has stopped\r\n    executing; By the time the for loop has stopped executing, the value of i is 10.\r\n    So each time the given function gets called, it will print out 10!\r\n    A common work around is to use an IIFE - an Immediately Invoked Function Expression - to capture i at each iteration:",
      "start": 4115,
      "end": 5243,
      "loc": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 123
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " capture the current state of 'i'"
    },
    {
      "type": "CommentLine",
      "value": " by invoking a function with its current value"
    },
    {
      "type": "CommentBlock",
      "value": " This odd-looking pattern is actually pretty common.\r\n        The i in the parameter list actually shadows the i declared in the for loop,\r\n        but since we named them the same, we didn’t have to modify the loop body too much.",
      "start": 5503,
      "end": 5737,
      "loc": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 92
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        let declarations\r\n        By now you’ve figured out that var has some problems, which is precisely why let statements\r\n        were introduced.\r\n        Apart from the keyword used, let statements are written the same way var statements are. ",
      "start": 5745,
      "end": 6001,
      "loc": {
        "start": {
          "line": 147,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 99
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " The key difference is not in the syntax, but in the semantics, which we’ll now dive into.",
      "start": 6034,
      "end": 6128,
      "loc": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 98
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Block-scoping\r\n        When a variable is declared using let, it uses what some call lexical-scoping or block-scoping.\r\n        Unlike variables declared with var whose scopes leak out to their containing function,\r\n        block-scoped variables are not visible outside of their nearest containing block or for-loop.",
      "start": 6180,
      "end": 6511,
      "loc": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 103
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Still okay to reference 'a'"
    },
    {
      "type": "CommentLine",
      "value": " Error: 'b' doesn't exist here"
    },
    {
      "type": "CommentBlock",
      "value": " Here, we have two local variables a and b. a’s scope is limited to the body of f while b’s scope\r\n        is limited to the containing if statement’s block.\r\n        Variables declared in a catch clause also have similar scoping rules.",
      "start": 6775,
      "end": 7015,
      "loc": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 176,
          "column": 79
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Error: 'e' doesn't exist here"
    },
    {
      "type": "CommentBlock",
      "value": " Another property of block-scoped variables is that they can’t be read or written to before\r\n        they’re actually declared. While these variables are “present” throughout their scope,\r\n        all points up until their declaration are part of their temporal dead zone.\r\n        This is just a sophisticated way of saying you can’t access them before the let statement,\r\n        and luckily TypeScript will let you know that. ",
      "start": 7181,
      "end": 7614,
      "loc": {
        "start": {
          "line": 185,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 57
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " illegal to use 'a' before it's declared;"
    },
    {
      "type": "CommentBlock",
      "value": " Something to note is that you can still capture a block-scoped variable before it’s declared.\r\n        The only catch is that it’s illegal to call that function before the declaration.\r\n        If targeting ES2015, a modern runtime will throw an error; however, right now TypeScript\r\n        is permissive and won’t report this as an error. ",
      "start": 7687,
      "end": 8033,
      "loc": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 59
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " okay to capture 'a'"
    },
    {
      "type": "CommentLine",
      "value": " illegal call 'foo' before 'a' is declared"
    },
    {
      "type": "CommentLine",
      "value": " runtimes should throw an error here"
    },
    {
      "type": "CommentBlock",
      "value": " For more information on temporal dead zones, see relevant content on the Mozilla Developer Network. ",
      "start": 8244,
      "end": 8349,
      "loc": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 109
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Re-declarations and Shadowing\r\n        With var declarations, we mentioned that it didn’t matter how many times you declared your variables;\r\n        you just got one. ",
      "start": 8419,
      "end": 8601,
      "loc": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 28
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " In the above example, all declarations of x actually refer to the same x, and this is perfectly valid.\r\n        This often ends up being a source of bugs. Thankfully, let declarations are not as forgiving. ",
      "start": 8722,
      "end": 8933,
      "loc": {
        "start": {
          "line": 223,
          "column": 4
        },
        "end": {
          "line": 224,
          "column": 104
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " error: can't re-declare 'x' in the same scope"
    },
    {
      "type": "CommentBlock",
      "value": " The variables don’t necessarily need to both be block-scoped for TypeScript to tell us\r\n        that there’s a problem.",
      "start": 9024,
      "end": 9148,
      "loc": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 33
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " let x = 100; // error: interferes with parameter declaration"
    },
    {
      "type": "CommentLine",
      "value": " let x = 100;"
    },
    {
      "type": "CommentLine",
      "value": " error: can't have both declarations of 'x'"
    },
    {
      "type": "CommentBlock",
      "value": " That’s not to say that block-scoped variable can never be declared with a function-scoped variable.\r\n        The block-scoped variable just needs to be declared within a distinctly different block.",
      "start": 9376,
      "end": 9578,
      "loc": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 98
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " returns '0'"
    },
    {
      "type": "CommentLine",
      "value": " returns '100'"
    },
    {
      "type": "CommentBlock",
      "value": " The act of introducing a new name in a more nested scope is called shadowing.\r\n        It is a bit of a double-edged sword in that it can introduce certain bugs on its own\r\n        in the event of accidental shadowing, while also preventing certain bugs.\r\n        For instance, imagine we had written our earlier sumMatrix function using let variables. ",
      "start": 9801,
      "end": 10159,
      "loc": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 251,
          "column": 99
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " This version of the loop will actually perform the summation correctly because the inner loop’s i\r\n        shadows i from the outer loop.\r\n        Shadowing should usually be avoided in the interest of writing clearer code.\r\n        While there are some scenarios where it may be fitting to take advantage of it,\r\n        you should use your best judgement. ",
      "start": 10477,
      "end": 10840,
      "loc": {
        "start": {
          "line": 262,
          "column": 4
        },
        "end": {
          "line": 266,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Block-scoped variable capturing\r\n        When we first touched on the idea of variable capturing with var declaration,\r\n        we briefly went into how variables act once captured.\r\n        To give a better intuition of this, each time a scope is run,\r\n        it creates an “environment” of variables.\r\n        That environment and its captured variables can exist even after everything within its scope\r\n        has finished executing. ",
      "start": 10848,
      "end": 11301,
      "loc": {
        "start": {
          "line": 268,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 34
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Because we’ve captured city from within its environment, we’re still able to access it despite\r\n        the fact that the if block finished executing.\r\n        Recall that with our earlier setTimeout example, we ended up needing to use an IIFE to capture\r\n        the state of a variable for every iteration of the for loop.\r\n        In effect, what we were doing was creating a new variable environment for our captured variables.\r\n        That was a bit of a pain, but luckily, you’ll never have to do that again in TypeScript.\r\n\r\n        let declarations have drastically different behavior when declared as part of a loop.\r\n        Rather than just introducing a new environment to the loop itself,\r\n        these declarations sort of create a new scope per iteration.\r\n        Since this is what we were doing anyway with our IIFE, we can change our old setTimeout\r\n        example to just use a let declaration. ",
      "start": 11556,
      "end": 12479,
      "loc": {
        "start": {
          "line": 287,
          "column": 4
        },
        "end": {
          "line": 298,
          "column": 49
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " and as expected, this will print out\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9 ",
      "start": 12591,
      "end": 12703,
      "loc": {
        "start": {
          "line": 302,
          "column": 4
        },
        "end": {
          "line": 312,
          "column": 8
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        const declarations\r\n        const declarations are another way of declaring variables. ",
      "start": 12711,
      "end": 12812,
      "loc": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 69
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " They are like let declarations but, as their name implies, their value cannot be changed once\r\n        they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them.\r\n        This should not be confused with the idea that the values they refer to are immutable. ",
      "start": 12850,
      "end": 13160,
      "loc": {
        "start": {
          "line": 318,
          "column": 4
        },
        "end": {
          "line": 320,
          "column": 97
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Error ",
      "start": 13287,
      "end": 13298,
      "loc": {
        "start": {
          "line": 326,
          "column": 4
        },
        "end": {
          "line": 326,
          "column": 15
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " all \"okay\""
    },
    {
      "type": "CommentBlock",
      "value": " Unless you take specific measures to avoid it, the internal state of a const variable is still modifiable.\r\n        Fortunately, TypeScript allows you to specify that members of an object are readonly.\r\n        The chapter on Interfaces has the details.",
      "start": 13509,
      "end": 13767,
      "loc": {
        "start": {
          "line": 336,
          "column": 4
        },
        "end": {
          "line": 338,
          "column": 52
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        let vs. const\r\n        Given that we have two types of declarations with similar scoping semantics, it’s natural\r\n        to find ourselves asking which one to use. Like most broad questions, the answer is: it depends.\r\n        Applying the principle of least privilege, all declarations other than those you plan to modify\r\n        should use const.\r\n        The rationale is that if a variable didn’t need to get written to, others working on the same\r\n        codebase shouldn’t automatically be able to write to the object, and will need to consider whether\r\n        they really need to reassign to the variable.\r\n        Using const also makes code more predictable when reasoning about flow of data.\r\n        Use your best judgement, and if applicable, consult the matter with the rest of your team.\r\n        The majority of this handbook uses let declarations. ",
      "start": 13775,
      "end": 14657,
      "loc": {
        "start": {
          "line": 340,
          "column": 4
        },
        "end": {
          "line": 351,
          "column": 63
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Destructuring\r\n        Another ECMAScript 2015 feature that TypeScript has is destructuring.\r\n        For a complete reference, see the article on the Mozilla Developer Network.\r\n        In this section, we’ll give a short overview. ",
      "start": 14713,
      "end": 14960,
      "loc": {
        "start": {
          "line": 354,
          "column": 8
        },
        "end": {
          "line": 358,
          "column": 56
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Array destructuring\r\n        The simplest form of destructuring is array destructuring assignment: ",
      "start": 14968,
      "end": 15081,
      "loc": {
        "start": {
          "line": 360,
          "column": 4
        },
        "end": {
          "line": 362,
          "column": 80
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " outputs 1"
    },
    {
      "type": "CommentLine",
      "value": " outputs 2"
    },
    {
      "type": "CommentBlock",
      "value": " This creates two new variables named first and second. This is equivalent to using indexing,\r\n        but is much more convenient:",
      "start": 15227,
      "end": 15362,
      "loc": {
        "start": {
          "line": 367,
          "column": 4
        },
        "end": {
          "line": 368,
          "column": 38
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Destructuring works with already-declared variables as well:",
      "start": 15417,
      "end": 15482,
      "loc": {
        "start": {
          "line": 371,
          "column": 4
        },
        "end": {
          "line": 371,
          "column": 69
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " swap variables"
    },
    {
      "type": "CommentBlock",
      "value": " And with parameters to a function:",
      "start": 15557,
      "end": 15596,
      "loc": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 375,
          "column": 43
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " You can create a variable for the remaining items in a list using the syntax ...: ",
      "start": 15739,
      "end": 15826,
      "loc": {
        "start": {
          "line": 382,
          "column": 4
        },
        "end": {
          "line": 382,
          "column": 91
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " outputs 1"
    },
    {
      "type": "CommentLine",
      "value": " outputs [ 2, 3, 4 ]"
    },
    {
      "type": "CommentBlock",
      "value": " Of course, since this is JavaScript, you can just ignore trailing elements you don’t care about: ",
      "start": 15961,
      "end": 16063,
      "loc": {
        "start": {
          "line": 386,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 106
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " outputs 1"
    },
    {
      "type": "CommentBlock",
      "value": " Or other elements:",
      "start": 16142,
      "end": 16165,
      "loc": {
        "start": {
          "line": 389,
          "column": 4
        },
        "end": {
          "line": 389,
          "column": 27
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Object destructuring\r\n        You can also destructure objects: ",
      "start": 16219,
      "end": 16297,
      "loc": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 394,
          "column": 44
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " This creates new variables a and b from o.a and o.b. Notice that you can skip c if you don’t need it.\r\n        Like array destructuring, you can have assignment without declaration:",
      "start": 16402,
      "end": 16588,
      "loc": {
        "start": {
          "line": 401,
          "column": 4
        },
        "end": {
          "line": 402,
          "column": 80
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Notice that we had to surround this statement with parentheses. JavaScript normally parses\r\n        a { as the start of block.\r\n        You can create a variable for the remaining items in an object using the syntax ...: ",
      "start": 16634,
      "end": 16860,
      "loc": {
        "start": {
          "line": 404,
          "column": 4
        },
        "end": {
          "line": 406,
          "column": 95
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Property renaming\r\n        You can also give different names to properties: ",
      "start": 17139,
      "end": 17229,
      "loc": {
        "start": {
          "line": 418,
          "column": 4
        },
        "end": {
          "line": 420,
          "column": 59
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Here the syntax starts to get confusing. You can read a: newName1 as “a as newName1”.\r\n            The direction is left-to-right, as if you had written: ",
      "start": 17278,
      "end": 17437,
      "loc": {
        "start": {
          "line": 422,
          "column": 4
        },
        "end": {
          "line": 423,
          "column": 69
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Confusingly, the colon here does not indicate the type.\r\n        The type, if you specify it, still needs to be written after the entire destructuring: ",
      "start": 17493,
      "end": 17650,
      "loc": {
        "start": {
          "line": 426,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 97
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Default values\r\n        Default values let you specify a default value in case a property is undefined: ",
      "start": 17707,
      "end": 17825,
      "loc": {
        "start": {
          "line": 430,
          "column": 4
        },
        "end": {
          "line": 432,
          "column": 90
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " keepWholeObject now has a variable for wholeObject as well as the properties a and b,\r\n            even if b is undefined.",
      "start": 17954,
      "end": 18081,
      "loc": {
        "start": {
          "line": 436,
          "column": 4
        },
        "end": {
          "line": 437,
          "column": 37
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Function declarations\r\n        Destructuring also works in function declarations.\r\n        For simple cases this is straightforward: ",
      "start": 18143,
      "end": 18290,
      "loc": {
        "start": {
          "line": 441,
          "column": 4
        },
        "end": {
          "line": 444,
          "column": 52
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ..."
    },
    {
      "type": "CommentBlock",
      "value": " But specifying defaults is more common for parameters, and getting defaults right\r\n        with destructuring can be tricky.\r\n        First of all, you need to remember to put the pattern before the default value. ",
      "start": 18399,
      "end": 18618,
      "loc": {
        "start": {
          "line": 449,
          "column": 4
        },
        "end": {
          "line": 451,
          "column": 90
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ..."
    },
    {
      "type": "CommentBlock",
      "value": " The snippet above is an example of type inference, explained later in the handbook.\r\n        Then, you need to remember to give a default for optional properties on the destructured property\r\n        instead of the main initializer. Remember that C was defined with b optional:",
      "start": 18709,
      "end": 18991,
      "loc": {
        "start": {
          "line": 457,
          "column": 4
        },
        "end": {
          "line": 459,
          "column": 87
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ..."
    },
    {
      "type": "CommentLine",
      "value": " ok, default b = 0"
    },
    {
      "type": "CommentLine",
      "value": " ok, default to { a: \"\" }, which then defaults b = 0"
    },
    {
      "type": "CommentLine",
      "value": " error, 'a' is required if you supply an argument"
    },
    {
      "type": "CommentBlock",
      "value": " Use destructuring with care.\r\n        As the previous example demonstrates, anything but the simplest destructuring expression is confusing.\r\n        This is especially true with deeply nested destructuring, which gets really hard to understand\r\n        even without piling on renaming, default values, and type annotations.\r\n        Try to keep destructuring expressions small and simple.\r\n        You can always write the assignments that destructuring would generate yourself.\r\n    /*\r\n        Spread\r\n        The spread operator is the opposite of destructuring.\r\n        It allows you to spread an array into another array, or an object into another object. For example:",
      "start": 19246,
      "end": 19926,
      "loc": {
        "start": {
          "line": 466,
          "column": 4
        },
        "end": {
          "line": 475,
          "column": 109
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " This gives bothPlus the value [0, 1, 2, 3, 4, 5]. Spreading creates a shallow copy of first and second.\r\n        They are not changed by the spread. ",
      "start": 20032,
      "end": 20186,
      "loc": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 480,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " You can also spread objects: ",
      "start": 20194,
      "end": 20228,
      "loc": {
        "start": {
          "line": 482,
          "column": 4
        },
        "end": {
          "line": 482,
          "column": 38
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Now search is { food: \"rich\", price: \"$$\", ambiance: \"noisy\" }.\r\n        Object spreading is more complex than array spreading.\r\n        Like array spreading, it proceeds from left-to-right, but the result is still an object.\r\n        This means that properties that come later in the spread object overwrite properties that come earlier.\r\n        So if we modify the previous example to spread at the end: ",
      "start": 20357,
      "end": 20769,
      "loc": {
        "start": {
          "line": 485,
          "column": 4
        },
        "end": {
          "line": 489,
          "column": 69
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Then the food property in defaults overwrites food: \"rich\", which is not what we want in this case.\r\n        Object spread also has a couple of other surprising limits. First, it only includes an objects’ own,\r\n        enumerable properties. Basically, that means you lose methods when you spread instances of an object: ",
      "start": 20900,
      "end": 21226,
      "loc": {
        "start": {
          "line": 493,
          "column": 4
        },
        "end": {
          "line": 495,
          "column": 112
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ok"
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentBlock",
      "value": " Second, the Typescript compiler doesn’t allow spreads of type parameters from generic functions. \r\n        That feature is expected in future versions of the language. ",
      "start": 21402,
      "end": 21575,
      "loc": {
        "start": {
          "line": 505,
          "column": 4
        },
        "end": {
          "line": 506,
          "column": 71
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Introduction\r\n        One of TypeScript’s core principles is that type-checking focuses on the shape that values have.\r\n        This is sometimes called “duck typing” or “structural subtyping”.\r\n        In TypeScript, interfaces fill the role of naming these types, and are a powerful way of\r\n        defining contracts within your code as well as contracts with code outside of your project. ",
      "start": 21626,
      "end": 22033,
      "loc": {
        "start": {
          "line": 509,
          "column": 4
        },
        "end": {
          "line": 514,
          "column": 102
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Our First Interface\r\n        The easiest way to see how interfaces work is to start with a simple example:",
      "start": 22039,
      "end": 22150,
      "loc": {
        "start": {
          "line": 515,
          "column": 4
        },
        "end": {
          "line": 516,
          "column": 87
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " The type-checker checks the call to printLabel.\r\n        The printLabel function has a single parameter that requires that the object passed in\r\n        has a property called label of type string.\r\n        Notice that our object actually has more properties than this,\r\n        but the compiler only checks that at least the ones required are present and\r\n        match the types required.\r\n        There are some cases where TypeScript isn’t as lenient, which we’ll cover in a bit.\r\n        We can write the same example again, this time using an interface to describe the requirement\r\n        of having the label property that is a string: ",
      "start": 22343,
      "end": 22990,
      "loc": {
        "start": {
          "line": 522,
          "column": 4
        },
        "end": {
          "line": 530,
          "column": 57
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " The interface LabelledValue is a name we can now use to describe the requirement\r\n    in the previous example.\r\n    It still represents having a single property called label that is of type string.\r\n    Notice we didn’t have to explicitly say that the object we pass to printLabel implements\r\n    this interface like we might have to in other languages.\r\n    Here, it’s only the shape that matters.\r\n    If the object we pass to the function meets the requirements listed, then it’s allowed.\r\n    It’s worth pointing out that the type- checker does not require that these properties come in\r\n    any sort of order, only that the properties the interface requires are present and have the required type.",
      "start": 23241,
      "end": 23948,
      "loc": {
        "start": {
          "line": 539,
          "column": 0
        },
        "end": {
          "line": 547,
          "column": 112
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n    Optional Properties\r\n    Not all properties of an interface may be required.\r\n    Some exist under certain conditions or may not be there at all.\r\n    These optional properties are popular when creating patterns like “option bags” where you pass\r\n    an object to a function that only has a couple of properties filled in.\r\n\r\n    Here’s an example of this pattern:",
      "start": 23952,
      "end": 24326,
      "loc": {
        "start": {
          "line": 549,
          "column": 0
        },
        "end": {
          "line": 556,
          "column": 40
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Interfaces with optional properties are written similar to other interfaces,\r\n        with each optional property denoted by a ? at the end of the property name in the declaration.\r\n\r\n        The advantage of optional properties is that you can describe these possibly available properties\r\n        while still also preventing use of properties that are not part of the interface.\r\n        For example, had we mistyped the name of the color property in createSquare,\r\n        we would get an error message letting us know: ",
      "start": 24837,
      "end": 25365,
      "loc": {
        "start": {
          "line": 573,
          "column": 4
        },
        "end": {
          "line": 579,
          "column": 57
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Error: Property 'clor' does not exist on type 'SquareConfig'"
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Readonly properties\r\n        Some properties should only be modifiable when an object is first created.You can specify this\r\n        by putting readonly before the name of the property:\r\n    ",
      "start": 26007,
      "end": 26212,
      "loc": {
        "start": {
          "line": 599,
          "column": 4
        },
        "end": {
          "line": 603,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " You can construct a Point by assigning an object literal.After the assignment, x and y can’t be changed."
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentLine",
      "value": " TypeScript comes with a ReadonlyArray< T > type that is the same as Array<T> with all mutating "
    },
    {
      "type": "CommentLine",
      "value": " methods removed, so you can make sure you don’t change your arrays after creation:"
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentLine",
      "value": " On the last line of the snippet you can see that even assigning the entire ReadonlyArray back to a "
    },
    {
      "type": "CommentLine",
      "value": " normal array is illegal.You can still override it with a type assertion, though:"
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        readonly vs const\r\n        The easiest way to remember whether to use readonly or const is to ask whether you’re using it\r\n        on a variable or a property. Variables use const whereas properties use readonly.\r\n    ",
      "start": 27086,
      "end": 27318,
      "loc": {
        "start": {
          "line": 622,
          "column": 4
        },
        "end": {
          "line": 626,
          "column": 6
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Excess Property Checks\r\n        In our first example using interfaces, TypeScript lets us pass { size: number; label: string; }\r\n        to something that only expected a { label: string; }. We also just learned about optional properties,\r\n        and how they’re useful when describing so- called “option bags”.\r\n        However, combining the two naively would let you to shoot yourself in the foot the same way\r\n        you might in JavaScript.For example, taking our last example using createSquare:\r\n    ",
      "start": 27380,
      "end": 27903,
      "loc": {
        "start": {
          "line": 629,
          "column": 4
        },
        "end": {
          "line": 636,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ..."
    },
    {
      "type": "CommentBlock",
      "value": "\r\n    Notice the given argument to createSquare is spelled colour instead of color.In plain JavaScript,\r\n    this sort of thing fails silently.\r\n    You could argue that this program is correctly typed, since the width properties are compatible,\r\n    there’s no color property present, and the extra colour property is insignificant.\r\n    However, TypeScript takes the stance that there’s probably a bug in this code.Object literals\r\n    get special treatment and undergo excess property checking when assigning them to other variables,\r\n    or passing them as arguments.If an object literal has any properties that the “target type” doesn’t have,\r\n    you’ll get an error.\r\n    ",
      "start": 28172,
      "end": 28855,
      "loc": {
        "start": {
          "line": 647,
          "column": 4
        },
        "end": {
          "line": 656,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " error: 'colour' not expected in type 'SquareConfig'"
    },
    {
      "type": "CommentLine",
      "value": " Getting around these checks is actually really simple.The easiest method is to just use a type assertion:"
    },
    {
      "type": "CommentLine",
      "value": " However, a better approach might be to add a string index signature if you’re sure that "
    },
    {
      "type": "CommentLine",
      "value": " the object can have some extra properties that are used in some special way.If SquareConfig "
    },
    {
      "type": "CommentLine",
      "value": " can have color and width properties with the above types, but could also have any number "
    },
    {
      "type": "CommentLine",
      "value": " of other properties, then we could define it like so:"
    },
    {
      "type": "CommentLine",
      "value": " We’ll discuss index signatures in a bit, but here we’re saying a SquareConfig can have any number of properties, and as long as they aren’t color or width, their types don’t matter."
    },
    {
      "type": "CommentLine",
      "value": " One final way to get around these checks, which might be a bit surprising, is to assign the object to another variable: Since squareOptions won’t undergo excess property checks, the compiler won’t give you an error."
    },
    {
      "type": "CommentBlock",
      "value": " Keep in mind that for simple code like above, you probably shouldn’t be trying to “get around” these checks.\r\n        For more complex object literals that have methods and hold state, you might need to keep these techniques in mind,\r\n        but a majority of excess property errors are actually bugs.\r\n        That means if you’re running into excess property checking problems for something like option bags,\r\n        you might need to revise some of your type declarations.\r\n        In this instance, if it’s okay to pass an object with both a color or colour property to createSquare,\r\n        you should fix up the definition of SquareConfig to reflect that.",
      "start": 30189,
      "end": 30858,
      "loc": {
        "start": {
          "line": 676,
          "column": 4
        },
        "end": {
          "line": 682,
          "column": 75
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Function Types\r\n        Interfaces are capable of describing the wide range of shapes that JavaScript objects can take.\r\n        In addition to describing an object with properties, interfaces are also capable of describing\r\n        function types.\r\n        To describe a function type with an interface, we give the interface a call signature.\r\n        This is like a function declaration with only the parameter list and return type given.\r\n        Each parameter in the parameter list requires both name and type.\r\n    ",
      "start": 30912,
      "end": 31448,
      "loc": {
        "start": {
          "line": 685,
          "column": 4
        },
        "end": {
          "line": 693,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Once defined, we can use this function type interface like we would other interfaces."
    },
    {
      "type": "CommentLine",
      "value": " Here, we show how you can create a variable of a function type and assign it a function value"
    },
    {
      "type": "CommentLine",
      "value": " of the same type."
    },
    {
      "type": "CommentLine",
      "value": " For function types to correctly type-check, the names of the parameters do not need to match. "
    },
    {
      "type": "CommentLine",
      "value": " We could have, for example, written the above example like this:"
    },
    {
      "type": "CommentLine",
      "value": " Function parameters are checked one at a time, with the type in each corresponding parameter position"
    },
    {
      "type": "CommentLine",
      "value": " checked against each other.If you do not want to specify types at all, TypeScript’s contextual"
    },
    {
      "type": "CommentLine",
      "value": " typing can infer the argument types since the function value is assigned directly to a variable"
    },
    {
      "type": "CommentLine",
      "value": " of type SearchFunc. Here, also, the return type of our function expression is implied by the values "
    },
    {
      "type": "CommentLine",
      "value": " it returns (here false and true).Had the function expression returned numbers or strings, "
    },
    {
      "type": "CommentLine",
      "value": " the type- checker would have warned us that return type doesn’t match the return type described in "
    },
    {
      "type": "CommentLine",
      "value": " the SearchFunc interface."
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Indexable Types\r\n        Similarly to how we can use interfaces to describe function types,\r\n        we can also describe types that we can “index into” like a[10],\r\n        or ageMap[\"daniel\"].\r\n        Indexable types have an index signature that describes the types\r\n        we can use to index into the object, along with the corresponding\r\n        return types when indexing. Let’s take an example:\r\n    ",
      "start": 33153,
      "end": 33576,
      "loc": {
        "start": {
          "line": 726,
          "column": 4
        },
        "end": {
          "line": 734,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Above, we have a StringArray interface that has an index signature. "
    },
    {
      "type": "CommentLine",
      "value": " This index signature states that when a StringArray is indexed with a number, "
    },
    {
      "type": "CommentLine",
      "value": " it will return a string."
    },
    {
      "type": "CommentBlock",
      "value": " There are two types of supported index signatures: string and number. It is possible to support both types of indexers, \r\n        but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer.\r\n        This is because when indexing with a number, JavaScript will actually convert that to a string before indexing into an object.\r\n        That means that indexing with 100 (a number) is the same thing as indexing with \"100\" (a string), so the two need to be consistent. ",
      "start": 33955,
      "end": 34476,
      "loc": {
        "start": {
          "line": 747,
          "column": 4
        },
        "end": {
          "line": 750,
          "column": 142
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Error: indexing with a numeric string might get you a completely separate type of Animal!"
    },
    {
      "type": "CommentLine",
      "value": " While string index signatures are a powerful way to describe the “dictionary” pattern, "
    },
    {
      "type": "CommentLine",
      "value": " they also enforce that all properties match their return type."
    },
    {
      "type": "CommentLine",
      "value": " This is because a string index declares that obj.property is also available "
    },
    {
      "type": "CommentLine",
      "value": " as obj[\"property\"].In the following example, name’s type does not match the string index’s type, "
    },
    {
      "type": "CommentLine",
      "value": " and the type- checker gives an error:"
    },
    {
      "type": "CommentLine",
      "value": " ok, length is a number"
    },
    {
      "type": "CommentLine",
      "value": " error, the type of 'name' is not a subtype of the indexer"
    },
    {
      "type": "CommentLine",
      "value": " Finally, you can make index signatures readonly"
    },
    {
      "type": "CommentLine",
      "value": " in order to prevent assignment to their indices:"
    },
    {
      "type": "CommentLine",
      "value": " error!"
    },
    {
      "type": "CommentLine",
      "value": " You can’t set myArray[2] because the index signature is readonly."
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Class Types\r\n    ",
      "start": 35828,
      "end": 35859,
      "loc": {
        "start": {
          "line": 785,
          "column": 4
        },
        "end": {
          "line": 787,
          "column": 6
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Difference between the static and instance sides of classes\r\n    ",
      "start": 36361,
      "end": 36440,
      "loc": {
        "start": {
          "line": 808,
          "column": 4
        },
        "end": {
          "line": 810,
          "column": 6
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " When working with classes and interfaces, it helps to keep in mind that a class has two types:\r\n        the type of the static side and the type of the instance side.\r\n        You may notice that if you create an interface with a construct signature and try\r\n        to create a class that implements this interface you get an error:\r\n        This is because when a class implements an interface, only the instance side of the class is checked.\r\n        Since the constructor sits in the static side, it is not included in this check. ",
      "start": 36446,
      "end": 36986,
      "loc": {
        "start": {
          "line": 811,
          "column": 4
        },
        "end": {
          "line": 816,
          "column": 91
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " Instead, you would need to work with the static side of the class directly.\r\n        In this example, we define two interfaces, ClockConstructor for the constructor\r\n        and ClockInterface for the instance methods.\r\n        Then for convenience we define a constructor function createClock that creates\r\n        instances of the type that is passed to it.\r\n        Because createClock’s first parameter is of type ClockConstructor, in createClock(AnalogClock, 7, 32),\r\n        it checks that AnalogClock has the correct constructor signature.",
      "start": 37210,
      "end": 37761,
      "loc": {
        "start": {
          "line": 825,
          "column": 4
        },
        "end": {
          "line": 831,
          "column": 75
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Extending Interfaces\r\n    \r\n    interface Shape {\r\n        color: string;\r\n    }\r\n    interface Square extends Shape {\r\n        sideLength: number;\r\n    }\r\n    let square = <Square>{};\r\n    square.color = \"blue\";\r\n    square.sideLength = 10;\r\n\r\n    interface PenStroke {\r\n        // penWidth: number;\r\n    }\r\n\r\n    interface Square2 extends Shape, PenStroke {\r\n        // sideLength: number;\r\n    }\r\n\r\n    let square2 = <Square2>{};\r\n    square2.color = \"blue\";\r\n    // square2.sideLength = 10;\r\n    // square2.penWidth = 5.0;\r\n    ",
      "start": 38585,
      "end": 39131,
      "loc": {
        "start": {
          "line": 860,
          "column": 4
        },
        "end": {
          "line": 885,
          "column": 6
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Hybrid Types\r\n    ",
      "start": 39185,
      "end": 39217,
      "loc": {
        "start": {
          "line": 889,
          "column": 4
        },
        "end": {
          "line": 891,
          "column": 6
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "\r\n        Interfaces Extending Classes\r\n    ",
      "start": 39682,
      "end": 39730,
      "loc": {
        "start": {
          "line": 911,
          "column": 4
        },
        "end": {
          "line": 913,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Error: Property 'state' is missing in type 'Image'."
    }
  ]
}