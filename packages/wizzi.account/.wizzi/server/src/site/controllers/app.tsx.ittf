module
    $
        var ctrl = {
            name: 'App',
            path: '/app'
        }

    controller( &ctrl )

        $append imports
            import 
                @ StyleSheetServer
                from 'aphrodite'
            import 
                @ StaticRouter
                from 'react-router-dom'
            import fetch from 'node-fetch'
            import 
                as React
                from 'react'
            import ReactDOMServer from 'react-dom/server'
            import 
                @ QueryParams
                @ RouterData
                from '../../../client/features/app/'
            import 
                @ SavedAccount
                from '../../../client/features/account/'
            import ClientRouter 
                from '../../../client/components/Router'
            import AppDocument from '../pages/AppDocument'

        _ this.router.get('/:@username/:projectName', this.index)
        _ this.router.get('/:id', this.index)
        _ this.router.get('*', this.index)

        $append handlers
            handler( index )
                const id
                    iif request.params
                        then
                            iif request.params.id
                                then request.params.id
                                else
                                    iif request.params.username && request.params.projectName
                                        then
                                            `lit 
                                                + @
                                                @ request.params.username
                                                + /
                                                _ encodeURIComponent(request.params.projectName)
                                                + 
                                        else undefined
                        else undefined
                log 'packi.index.handler', 'id', id
                let data
                    :ref RouterData
                let queryParams
                    :ref QueryParams
                    = request.query
                $if wzCtx.Build.useExpo
                    const expoSession
                        _ request.cookies.get
                            `lit 
                                _ getAuthStorageKey()
                                + .sessionSecret
                if id
                    try 
                        const response
                            await 
                                _ fetch
                                    `lit 
                                        @ process.env.API_SERVER_URL
                                        + /api/v1/packi/
                                        @ encodeURIComponent(id)
                                        + 
                                    { 
                                        { headers
                        const text
                            await 
                                _ response.text()
                        const json = JSON.parse(text)
                        if json.errors?.length
                            set data =
                                { 
                                    @ type 'error'
                                    { error
                                        @ message 'Server returned errors when fetching data'
                        else
                            set data =
                                { 
                                    @ type 'success'
                                    @ account json.account as SavedAccount
                    catch error
                        set data =
                            { 
                                @ type 'error'
                                { error
                                    @ message error.message
                    log 'app.index.handler', 'data', data
                else
                    if request.body
                        set queryParams =
                            { 
                                @ ...request.body
                                @ ...queryParams
                    set data =
                        { 
                            @ type 'success'
                    log 'app.index.handler', 'data', data
                const context
                    :{ 
                        :p url
                            :optional 
                            :string 
                    =
                        { 
                const cookies
                    { 
                        @ get
                            => 
                                param key
                                    :string 
                                const result = request.cookies.get(key)
                                if result
                                    return decodeURIComponent(result)
                                return result
                const userAgent = request.headers['user-agent']
                const index
                    op+ 
                        + '<!DOCTYPE html>'
                        _ ReactDOMServer.renderToStaticMarkup
                            < AppDocument
                                @ id {id}
                                @ isAuthenticated {false}
                                @ data {data}
                                @ queryParams {queryParams}
                                @ content
                                    _ StyleSheetServer.renderStatic
                                        => 
                                            return 
                                                _ ReactDOMServer.renderToString
                                                    < React.Fragment
                                                        < StaticRouter 
                                                            @ location {request.url}
                                                            @ context {context}
                                                            < ClientRouter 
                                                                @ data {data}
                                                                @ queryParams {queryParams}
                _ sendHtml
                    @ response
                    @ index