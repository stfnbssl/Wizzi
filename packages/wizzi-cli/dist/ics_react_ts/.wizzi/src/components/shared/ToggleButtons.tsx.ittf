module
    import 
        as React
        from 'react'
    import classnames from 'classnames'
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import colors from '../../configs/colors'
    import 
        @ prefColors
        @ usePreferences
        from '../../features/preferences'
    :type Props
        :< T
            :string 
        :{ 
            :p options
                :ref Array
                    :param 
                        :{ 
                            :p label
                                :string 
                            :p value
                                :ref T
            :p label
                :optional 
                :string 
            :p value
                :ref T
            :p onValueChange
                :=> 
                    :void 
                    param value
                        :ref T
            :p disabled
                :optional 
                :boolean 
            :p className
                :optional 
                :string 
    export-default 
        function ToggleButtons
            :< T
                :string 
            param props
                :ref Props
                    :param 
                        :ref T
            const [prefs] = usePreferences()
            const light = prefs.theme !== 'dark'
            return 
                span 
                    @ className {classnames(css(styles.buttons, props.disabled && styles.disabled), props.className)}
                    { 
                        iif props.label
                            then
                                span 
                                    @ className {css(styles.label)}
                                    + {props.label}
                            else null
                    { 
                        _ props.options.map
                            => 
                                param o
                                button 
                                    @ key {o.value}
                                    @ className
                                        _ css
                                            @expr styles.button
                                            iif o.value === props.value
                                                then
                                                    iif props.disabled
                                                        then
                                                            iif light
                                                                then styles.activeDisabledLight
                                                                else styles.activeDisabled
                                                        else styles.active
                                                else undefined
                                    @ onClick
                                        => 
                                            _ props.onValueChange(o.value)
                                    + {o.label}
    const c = prefColors.c
    const styles
        _ StyleSheet.create
            { 
                { disabled
                    @ opacity 0.5
                    @ pointerEvents 'none'
                    @ cursor 'not-allowed'
                { label
                    @ flex 1
                    @ margin '0 .5em'
                { buttons
                    @ display 'flex'
                    @ alignItems 'center'
                    @ whiteSpace 'nowrap'
                    @ margin '0 .5em'
                    @ borderRadius 10
                { button
                    @ appearance 'none'
                    @ outline 0
                    @ height 20
                    @ margin 0
                    @ border
                        `lit 
                            + 1px solid&nbsp;
                            @ colors.border
                            + 
                    @ backgroundColor c('content')
                    @ color c('text')
                    @ lineHeight 1
                    { ':first-of-type'
                        @ borderRightWidth 0
                        @ borderRadius '10px 0 0 10px'
                        @ padding '0 .5em 0 1em'
                    { ':last-of-type'
                        @ borderLeftWidth 0
                        @ borderRadius '0 10px 10px 0'
                        @ padding '0 1em 0 .5em'
                { active
                    @ backgroundColor colors.primary
                    @ color '#fff'
                { activeDisabled
                    @ backgroundColor '#999'
                    @ color '#fff'
                { activeDisabledLight
                    @ backgroundColor 'rgba(255, 255, 255, 0.5)'
