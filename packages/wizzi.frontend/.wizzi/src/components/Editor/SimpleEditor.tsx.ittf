module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import classnames from 'classnames'
    import escape from 'escape-html'
    import 
        @ highlight
        @ languages
        from 'prismjs/components/prism-core'
    import React from 'react'
    import Editor from 'react-simple-code-editor'
    import 'prismjs/components/prism-clike'
    import 'prismjs/components/prism-javascript'
    import 'prismjs/components/prism-typescript'
    import 'prismjs/components/prism-markup'
    import 'prismjs/components/prism-jsx'
    import 'prismjs/components/prism-json'
    import 'prismjs/components/prism-markdown'
    import 
        @ withThemeName
        @ ThemeName
        from '../../features/preferences/index'
    import 
        @ EditorProps
        from './EditorProps'
    import 
        @ light
        @ dark
        from './themes/simple-editor'
    export
        :type SimpleEditorProps
            :intersect 
                :ref EditorProps
                :{ 
                    :p theme
                        :ref ThemeName
    const sessions = new Map()
        # Store selection and undo stack
    class SimpleEditorComp
        super React.Component
            :param 
                :ref SimpleEditorProps
        p defaultProps
            static
            :ref Partial
                :param 
                    :ref SimpleEditorProps
            { 
                @ lineNumbers 'on'
        m removePath
            static
            param path
                :string 
            _ sessions.delete(path)
        m renamePath
            static
            param oldPath
                :string 
            param newPath
                :string 
            const session = sessions.get(oldPath)
            _ sessions.delete(oldPath)
            _ sessions.set(newPath, session)
        m componentDidUpdate
            param prevProps
                :ref SimpleEditorProps
            const editor = this._editor.current
            if this.props.selectedFile !== prevProps.selectedFile && editor
                _ sessions.set(prevProps.selectedFile, editor.session)
                    # Save the editor state for the previous file so we can restore it when it's re-opened
                const session = sessions.get(this.props.selectedFile)
                    # If we find a previous session for the current file, restore it
                    # Otherwise set the session session to a fresh one
                if session
                    set editor.session = session
                else
                    set editor.session =
                        { 
                            { history
                                @ stack []
                                @ offset -1
        => _highlight
            param path
                :string 
            param code
                :string 
            if path.endsWith('.ts') || path.endsWith('.tsx')
                return highlight(code, languages.ts, 'typescript')
            else
                if path.endsWith('.js')
                    return highlight(code, languages.jsx, 'jsx')
                else
                    if path.endsWith('.json')
                        return highlight(code, languages.json, 'json')
                    else
                        if path.endsWith('.md')
                            return highlight(code, languages.markdown, 'markdown')
            return escape(code)
        => _handleValueChange
            param code
                :string 
            _ this.props.updateFiles
                => 
                    (
                        { 
                            { [this.props.selectedFile]
                                @ type 'CODE'
                                @ contents code
        p _editor
            _ React.createRef
                :param 
                    :ref Editor
        m render
            const 
                { 
                    @ selectedFile
                    @ lineNumbers
                    @ theme
                    @ files
                = this.props
            const file = files[selectedFile]
            return 
                div 
                    @ className {css(styles.container, lineNumbers === 'on' && styles.containerWithLineNumbers)}
                    < Editor 
                        @ ref {this._editor}
                            # @ts-ignore
                        @ value
                            iif file?.type === 'CODE'
                                then file.contents
                                else ''
                        @ onValueChange {this._handleValueChange}
                        @ highlight
                            => 
                                param code
                                    :string 
                                iif lineNumbers === 'on'
                                    then
                                        _ this._highlight(selectedFile, code).split('\n').map
                                            => 
                                                param line
                                                    :string 
                                                `lit 
                                                    + <span class="
                                                    _ css(styles.line)
                                                    + ">
                                                    @ line
                                                    + </span>
                                            ._ join
                                                @ '\n'
                                    else this._highlight(selectedFile, code)
                        @ padding
                            iif lineNumbers === 'on'
                                then 0
                                else 8
                        @ className {classnames(css(styles.editor), 'prism-code')}
                    < style 
                        @ type "text/css"
                        @ dangerouslySetInnerHTML
                            { 
                                @ __html
                                    iif theme === 'dark'
                                        then dark
                                        else light
    export 
        const SimpleEditor = withThemeName(SimpleEditorComp)
    export-default withThemeName(SimpleEditorComp)
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ flex 1
                    @ overflow 'auto'
                { containerWithLineNumbers
                    @ paddingLeft 64
                { editor
                    @ fontFamily 'var(--font-monospace)'
                    @ fontSize 12
                    @ minHeight '100%'
                    @ counterReset 'line'
                    @ overflow
                        + 'visible !important'
                            :as 
                                :any 
                { line
                    { ':before'
                        @ position 'absolute'
                        @ right '100%'
                        @ marginRight 26
                        @ textAlign 'right'
                        @ opacity 0.5
                        @ userSelect 'none'
                        @ counterIncrement 'line'
                        @ content 'counter(line)'
