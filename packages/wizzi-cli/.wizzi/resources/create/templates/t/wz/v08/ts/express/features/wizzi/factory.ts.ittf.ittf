$group

    import path from 'path'
    import wizzi from 'wizzi'
    import 
        @ JsonComponents
        @ JsonDocumentDto
        @ FsJson
        from 'wizzi-repo'
    import 
        @ packiFilePrefix
        from '../config/env'
    import 
        @ packiTypes
        from '../packi'
    import 
        @ config
            as appConfig
        from '../config'
    import 
        @ JsonWizziFactory
        @ FilesystemWizziFactory
        from './types'
    import 
        @ config
        from 'isomorphic-git'
    
    +
    export 
        function packiFilesToJsonDocuments
            param files
                :ref packiTypes.PackiFiles
            :return
                :[ 
                    :ref JsonDocumentDto
            const jsonDocuments
                :[ 
                    :ref JsonDocumentDto
                = []
            _ Object.keys(files).map
                => 
                    param value
                    if files[value].type === 'CODE'
                        const filePath = ensurePackiFilePrefix(value)
                        _ jsonDocuments.push
                            { 
                                @ path filePath
                                @ content files[value].contents
            return jsonDocuments
    
    +
    export 
        async-function createFilesystemFactory
            param globalContext
                :{ 
                    :index 
                        :any 
                        param k
                            :string 
                :optional 
            :return
                :ref Promise
                    :param 
                        :ref wizzi.WizziFactory
            const gc
                :{ 
                    :index 
                        :any 
                        param k
                            :string 
                =
                    { 
            if appConfig.isWizziDev
                set gc['isWizziStudio'] = true
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ wizzi.fsFactory
                            { 
                                { plugins
                                    [ items
                                        ${'$'}foreach item in wzCtx.Build.wizzi.plugins
                                            @ '${'$'}{item}'
                                    @ pluginsBaseFolder '${'$'}{wzCtx.Build.wizzi.pluginsBaseFolder}'
                                @ globalContext
                                    _ Object.assign
                                        { 
                                        @ gc
                                        || 
                                            + globalContext
                                            { 
                            function 
                                param err
                                param wf
                                if err
                                    return reject(err)
                                _ resolve(wf)
    +
    export 
        async-function createFsJsonAndFactory
            param files
                :ref packiTypes.PackiFiles
            :return
                :ref Promise
                    :param 
                        :ref JsonWizziFactory
            const plugins
                :[ 
                    :string 
                = []
            const jsonDocuments
                :[ 
                    :ref JsonDocumentDto
                = []
            _ Object.keys(files).map
                => 
                    param value
                    if files[value].type === 'CODE' && files[value].contents && files[value].contents.length > 0
                        const filePath = ensurePackiFilePrefix(value)
                        _ jsonDocuments.push
                            { 
                                @ path filePath
                                @ content files[value].contents
                        const pluginList = pluginsFor(filePath)
                        _ pluginList.forEach
                            => 
                                param item
                                if plugins.indexOf(item) < 0
                                    _ plugins.push(item)
            _ console.log('createFactory', plugins, 'jsonDocuments.length', jsonDocuments.length)
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ JsonComponents.createFsJson
                            @ jsonDocuments
                            => 
                                param err
                                param fsJson
                                if err
                                    return reject(err)
                                _ wizzi.jsonFactory
                                    { 
                                        @ fsJson
                                        { plugins
                                            @ items plugins
                                    function 
                                        param err
                                        param wf
                                        if err
                                            return reject(err)
                                        _ resolve
                                            { 
                                                @ wf
                                                @ fsJson
    +
    export 
        async-function createFsJson
            param files
                :ref packiTypes.PackiFiles
            :return
                :ref Promise
                    :param 
                        :ref FsJson
            const jsonDocuments
                :[ 
                    :ref JsonDocumentDto
                = []
            _ Object.keys(files).map
                => 
                    param value
                    if files[value].type === 'CODE'
                        const filePath = ensurePackiFilePrefix(value)
                        _ jsonDocuments.push
                            { 
                                @ path filePath
                                @ content files[value].contents
            _ console.log('createFsJson', 'jsonDocuments.length', jsonDocuments.length)
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ JsonComponents.createFsJson
                            @ jsonDocuments
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    
    +
    export 
        async-function extractGeneratedFiles
            param fsJson
                :ref FsJson
            :return
                :ref Promise
                    :param 
                        :ref packiTypes.PackiFiles
            const files
                :ref packiTypes.PackiFiles
                =
                    { 
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ fsJson.toFiles
                            { 
                                @ removeRoot packiFilePrefix
                            => 
                                param err
                                param result
                                if err
                                    _ reject(err)
                                _ result.forEach
                                    => 
                                        param value
                                        if value.relPath.endsWith('.ittf') == false
                                            set files[value.relPath] =
                                                { 
                                                    @ type 'CODE'
                                                    @ contents
                                                        @expr value.content
                                                            :as 
                                                                :string 
                                                    @ generated true
                                _ resolve(files)
    
    +
    const schemaPluginMap
        :{ 
            :index 
                :[ 
                    :string 
                param k
                    :string 
        =
            { 
                [ json
                    @ 'wizzi-core'
                [ text
                    @ 'wizzi-core'
                [ xml
                    @ 'wizzi-core'
                [ ittf
                    @ 'wizzi-core'
                [ wfjob
                    @ 'wizzi-core'
                [ wfschema
                    @ 'wizzi-core'
                [ js
                    @ 'wizzi-js'
                [ ts
                    @ 'wizzi-js'
                [ html
                    @ 'wizzi-web'
                    @ 'wizzi-js'
                    @ 'wizzi-core'
                [ css
                    @ 'wizzi-web'
                [ scss
                    @ 'wizzi-web'
                [ graphql
                    @ 'wizzi-web'
                [ vml
                    @ 'wizzi-web'
                [ vue
                    @ 'wizzi-web'
    
    +
    function pluginsFor
        param file
            :string 
        :return
            :[ 
                :string 
        const nameParts = path.basename(file).split('.')
        if nameParts[nameParts.length - 1] === 'ittf'
            return schemaPluginMap[nameParts[nameParts.length - 2]] || []
        return []
    
    +
    export 
        function ensurePackiFilePrefix
            param filePath
                :string 
            return 
                iif filePath.startsWith(packiFilePrefix)
                    then filePath
                    else packiFilePrefix + filePath