module
    $
        var md = {
            name: "EditableField",
            styled: true
        }
    
    v08/ts/react/component(&md)
        
        $append imports
            const RETURN_KEYCODE = 13
            const ESCAPE_KEYCODE = 27

        m getDerivedStateFromProps
            static
            param props
                :ref EditableFieldProps
            param state
                :ref EditableFieldState
            if state.value !== props.value && !state.focused
                return 
                    { 
                        @ value props.value || ''
            return null

        p state
            { 
                @ value this.props.value || ''
                @ focused false
        
        => _handleChangeText
            param e
                :ref React.ChangeEvent
                    :param 
                        :ref HTMLInputElement
            _ this.setState
                { 
                    @ value e.target.value
        
        => _handleFocus
            param e
                :ref React.FocusEvent
                    :param 
                        :ref HTMLInputElement
            _ e.target.select
            _ this.setState
                { 
                    @ focused true
        
        p _handleBlur
            async=> 
                $*
                await 
                    _ this.props.onSubmitText(this.state.value)
                *$
                _ this.setState
                    { 
                        @ focused false
        
        => _handleKeyDown
            param e
                :ref React.KeyboardEvent
                    :param 
                        :ref HTMLInputElement
            if e.keyCode === RETURN_KEYCODE || e.keyCode === ESCAPE_KEYCODE
                $$ TODO _ (e.target as HTMLInputElement).blur
                $* TODO
                _ 
                    ( 
                        @expr e.target
                            :as 
                                :ref HTMLInputElement
                    ._ blur
                *$
        
        m render
            return 
                < Container
                    < Phantom
                        @ className {this.props.className}
                        + {this.state.value.replace(/\n/g, '')}
                    < Input 
                        @ onFocus {this._handleFocus}
                        @ onBlur {this._handleBlur}
                        @ onKeyDown {this._handleKeyDown}
                        @ value {this.state.value}
                        @ onChange {this._handleChangeText}
                        @ className {this.props.className}
                        @ dark {this.props.dark}

        $append styles

            :interface InputProps
                :p dark
                    :boolean

            $function field
                display inline-block
                margin 0
                padding 1px 6px

            styled Container .div
                display flex
                align-items center
                max-width 100%
                position relative
            
            styled Phantom .div
                display inline-block
                max-width 100%
                pointer-events none
                white-space pre
                overflow hidden
                opacity 0
                $_ field

            styled Input .input<InputProps>
                position absolute
                appearance none
                background none
                outline 0
                border 0
                left 0
                width '100%'
                border-radius 0
                $_ field
                & :focus
                    box-shadow
                        => 'inset 0 0 0 1px ' + props.theme.palette.primary
                & :hover:focus
                    box-shadow
                        => 'inset 0 0 0 1px ' + props.theme.palette.primary
                & :hover:focus
                    box-shadow
                        => props.dark ? 'inset 0 0 0 1px rgba(255, 255, 255, .16)' : 'inset 0 0 0 1px rgba(0, 0, 0, .16)'
                

